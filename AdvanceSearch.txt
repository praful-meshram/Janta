
####################################
print_order.jsp
<%@ page import="java.sql.*" %>
<%@ page import="javax.naming.*" %>
<%@ page import="javax.sql.*" %>
<%@ page import="java.io.*" %>
<%@ page import="java.text.*" %>
<%@ page import="java.util.*" %>
<%@page contentType="text/html"%>

<head>
<title>Printing...</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<style>
.boldtable, .boldtable TD, .boldtable TH
{
font-family:serif;
font-size:11pt;
}

.boldtable1, .boldtable1 TD, .boldtable1 TH
{
font-family:serif;
font-size:11pt;
}

</style>

</head>
<body>
<form name="myform">
<%
				DecimalFormat df = new DecimalFormat("###,###.00");
				DecimalFormat dfQty = new DecimalFormat("0.000");
				DecimalFormat dfQty1 = new DecimalFormat("0");
						
				String orderDate="";
				String enteredBy="";				
				String flag="";
				flag= request.getParameter("buttonFlag");
				if (flag==null)
					flag="N";
				int totalItems=0;
				int totalTaken=0;
				int taken_ind=0;
				int itemsPerPage=15;
				int pageItemCount=0;
				int emptyLines=0;
				int  itemQtyCheck=0;
        	    int i=0;
				
				float totalValue=0.0f;
				float itemRate=0.0f;
				float itemQty=0.0f;
				float itemTotPrice=0.0f;
				float itemMRP=0.0f;
				float totalValueMRP=0.0f;
				float savings=0.0f;
				float totalValueDis=0.0f;
				float itemTotDis=0.0f;
				float adv_amt=0.0f;
				float dis_amt=0.0f;
				float bal_amt=0.0f;
				float other_charges_amt=0.0f;				
				
				String itemName="";
				String itemWeight="";
				String custCode="";
				String custName="";
				String building="";
				String buildingNo="";
				String block="";
				String wing="";
				String add1="";
				String add2="";
				String area="";
				String phone="";
				String codeValue="";
				String categoryCode="";
				String storeName="";
				String storeAdd1="";
				String storePhone="";
				String billMessage="";
				String disRemark="";
				String p_type="";
				String station="";
				String deliveryRemark="";
        	    
        		String orderNo="",statusCode="";
        		
        		orderNo=request.getParameter("orderNo");
        		statusCode=request.getParameter("statusCode");
        		String backPage="";
        		
        		backPage=request.getParameter("backPage");
             
		String query="",copyOrder="CopyOrder";
		Connection conn=null;
		Statement stat=null;
		ResultSet rs=null;
		try{	
			Context initContext = new InitialContext();
			Context envContext  = (Context)initContext.lookup("java:/comp/env");
			DataSource ds = (DataSource)envContext.lookup("jdbc/js");
			conn = ds.getConnection();
			stat=conn.createStatement();
			query="select code,value from code_table where code in ('StoreName','StoreAdd1','StorePhone','BILLMSG')";
			rs=stat.executeQuery(query);
			
			while(rs.next())
			{
				categoryCode=rs.getString(1);
				codeValue=rs.getString(2);
									
				if (categoryCode.equals("BILLMSG"))
				{
					billMessage=codeValue;
				}
				
				if (categoryCode.equals("StoreName"))
				{
					storeName=codeValue;
				}
				
				if (categoryCode.equals("StoreAdd1"))
				{
					storeAdd1=codeValue;
				}

				if (categoryCode.equals("StorePhone"))
				{
					storePhone=codeValue;
				}				
				
			}
			rs.close();

			query="select DATE_FORMAT(a.order_date,'%d/%m/%y %r'), a.total_items, a.total_taken, a.total_value, " +
					"a.total_value_mrp, a.enterd_by,a.total_value_discount,a.remark, a.advance_amt, a.discount_amt, a.balance_amt, " + 
					"a.other_charges,b.rate, b.qty, b.price, b.mrp, b.item_discount, b.remark,ifnull(e.payment_type_desc,''), b.item_taken, " + 
				  	"d.item_name, d.item_weight, c.custcode,c.custname,c.building,c.building_no, "+
				  	"c.block,c.wing,c.add1,c.add2,c.phone, c.area, c.station " +
					"from orders a left outer join payment_type e on a.payment_type_code = e.payment_type_code, "+
					"order_detail b, customer_master c, item_master d " +
					"where a.order_num = b.order_num " +
					"and a.custcode = c.custcode " +
					"and b.item_code = d.item_code " +			
					"and a.order_num = '" + orderNo + "' "+
					"order by b.entry_no";
						
				rs=stat.executeQuery(query);		
				int ctr = 0, j=0, itemCount=0;
				
			while(rs.next()) {
			    i=1;
				itemCount=itemCount+1;
				pageItemCount=pageItemCount+1;		
				
				orderDate=rs.getString(i++);
				totalItems=rs.getInt(i++);
				totalTaken=rs.getInt(i++);
				totalValue=rs.getFloat(i++);
				totalValueMRP=rs.getFloat(i++);
				enteredBy=rs.getString(i++);
				totalValueDis=rs.getFloat(i++);
				deliveryRemark=rs.getString(i++);
				adv_amt=rs.getFloat(i++);
				dis_amt=rs.getFloat(i++);				
				bal_amt=rs.getFloat(i++);
				other_charges_amt=rs.getFloat(i++);
											
				itemRate=rs.getFloat(i++);
				itemQty=rs.getFloat(i);
				itemQtyCheck=rs.getInt(i++);
					
				itemTotPrice=rs.getFloat(i++);
				itemMRP=rs.getFloat(i++);
				itemTotDis=rs.getFloat(i++);
				disRemark=rs.getString(i++);
				
				p_type=rs.getString(i++);
				taken_ind=rs.getInt(i++);
				
				itemName=rs.getString(i++);
				itemWeight=rs.getString(i++);
				custCode=rs.getString(i++);
				custName=rs.getString(i++);
				building=rs.getString(i++);
				buildingNo=rs.getString(i++);
				block=rs.getString(i++);
				wing=rs.getString(i++);
				add1=rs.getString(i++);
				add2=rs.getString(i++);
				phone=rs.getString(i++);
				area=rs.getString(i++);
				station=rs.getString(i++);
				
					
	if (ctr==0) {	%> 
	
	<table class='boldtable' width=710 cellpadding='0' cellspacing='4' border='1'> 


	<tr><td colspan=6>&nbsp;</td></tr>
	<tr><td colspan=6></td></tr>
	<tr><td colspan=2 align='right'><%=totalItems%>-<%=totalTaken%>=<%=totalItems - totalTaken%></td>
	<td width='60%' colspan=2 align='right'><%=orderNo%>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td colspan=4>&nbsp;</td><tr>	
	<tr><td colspan=6></td></tr>
	<tr><td colspan=6></td></tr>
	
		
	<tr>
		<td width='15%' colspan=2 align='right'><%=custCode%></td>
<%			if(!deliveryRemark.equals("")){
				if(other_charges_amt>0){	
%>
			<td width='60%' colspan=2 align='center'><%=custName%> (DI: <%=deliveryRemark%>) (Oth Chrgs : <%=other_charges_amt%>)</td>
<%				}else if(other_charges_amt<=0){
%>
			<td width='60%' colspan=2 align='center'><%=custName%> (DI: <%=deliveryRemark%>)</td>
<%				}
			}else if(deliveryRemark.equals("")){
				if(other_charges_amt>0){
%>
					<td width='60%' colspan=2 align='center'><%=custName%> (Oth Chrgs : <%=other_charges_amt%>)</td>
<%				}else if(other_charges_amt<=0){
%>	
				<td width='60%' colspan=2 align='center'><%=custName%></td>				
<%				}
			}
%>


		<td width='25%' colspan=2 align='right'><%=orderDate%></td>
	</tr>
	
		<tr>
		<td colspan=5 width='80%'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<%=buildingNo%>, <%=wing%>, <%=block%>, <%=building%>, <%=area%></td>
		<td colspan=1 width='20%' align='right'><%=phone%></td>
	</tr>
	
	<tr>
		<td colspan=5 width='80%'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<%=add1%> ,<%=add2%>, <%=station%></td>
		<td colspan=1 width='20%' align='right'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
	</tr>
	
	</table>
<% ctr = ctr + 1; 
	} 
	savings = totalValueMRP - totalValue;
	if(savings<0)
		savings=0.0f;
	
	%>
	<table class='boldtable1' width=700 cellpadding='0' cellspacing='3' border='1'>

<tr>
	<td width='9%' valign=top><%=itemWeight%></td>
	<% if ((itemQtyCheck-itemQty)==0)
	{ %>
	<td width='6%' valign=top><%=dfQty1.format(itemQty)%></td>
	<% } else { %>
	<td width='6%' valign=top><%=dfQty.format(itemQty)%></td>
	<% } %>
	
	<td width='59%' valign=top><%=itemName%>&nbsp;<%=disRemark%></td>
	<% if(taken_ind > 0) { %>
		<td width='10%' valign=top>Taken</td>
	<% } else { %>
	<td width='10%' valign=top>&nbsp;</td>
	<%}%>
	<td width='8%' valign=top align=right><font size="3pt"><b><%=df.format(itemTotPrice)%></b></font></td>
	<% if(itemMRP<=0) { %>
	<td width='8%' valign=top align=right>NA</td>
	<% } else { %>
	<td width='8%' valign=top align=right><%=df.format(itemMRP)%></td>
	<%}%>
</tr>

<% 

if ((pageItemCount == itemsPerPage)&&(itemCount != totalItems)) 
{ 
	pageItemCount = 0;%>
<tr>
	<td colSpan=6 align=right>Contd..</td>	

</tr>
<tr><td colSpan=6><p style="page-break-after:always;">&nbsp;</p></td></tr>

<tr><td colspan=6>&nbsp;</td></tr>
<tr><td colspan=6>&nbsp;</td></tr>
<tr><td colspan=6>&nbsp;</td></tr>
<tr><td colspan=6>&nbsp;</td></tr>
<tr><td colspan=6>&nbsp;</td></tr>
<tr><td colspan=6>&nbsp;</td></tr>
 <%
}
if (itemCount==totalItems) {
	emptyLines = itemsPerPage - (totalItems%itemsPerPage);
	while ((emptyLines > 0)&&(emptyLines !=itemsPerPage)) { %>

	<tr><td width='100%' colspan=6>&nbsp;</td></tr>

<% emptyLines=(emptyLines - 1);} } }%>

<tr>
	<% if (bal_amt == totalValue) { %>
	<td colSpan=5 width='92%' cellspacing='0' align='right'><font size="3pt"><B><%=df.format(totalValue)%></b></font></td>
	<td colSpan=1 width='8%' cellspacing='0' align='right'>(<%=p_type%>)</td>	
	<% } else { %>
	<td colSpan=6 width='100%' cellspacing='0' align='right'><font size="3pt"><B><%=df.format(totalValue)%></b></font>(A:<%=df.format(adv_amt)%>,D:<%=df.format(dis_amt)%>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="3pt"><B>Bal:<%=df.format(bal_amt)%></b></font>(<%=p_type%>)</td>
	<% } %>
</tr>

<tr><td colSpan=6 cellspacing='0' align='center'><%= df.format(savings)%>/-</td></tr>	

</table>
<%
		
		rs.close();
		stat.close();
		conn.close();
	}catch(Exception e)
	{
		System.out.println(e);
		rs.close();
		stat.close();
		conn.close();
	}

%>
<br><br>
<input type="hidden" name="horderNo" value="">
<input type="hidden" name="orderNo" value="">
<input type="hidden" name="backPage" value="<%=backPage%>">
<input type="hidden" name="hstatusCode" value="">
<input type="hidden" name="hcopy" value="">
</form>
<div id="id1">
<input type="submit" id="Submit" value="Print <Alt+p>" accesskey="p" onClick="Pass();">
<input type="button" id="Edit" value="Edit <Alt+e>" accesskey="e" onClick="Edit();">
<input type="button" id="Cancel" value="Return <Alt+r>" accesskey="r" onClick="back();">
<input type="button" id="Copy" value="Copy <Alt+c>" accesskey="c" onClick="copy();">

</div>



<script>
function Fun_Print(){    
     document.getElementById('id1').style.visibility="hidden";
     self.print();
     back();
}

function Pass(){
	document.myform.orderNo.value="<%=orderNo%>";
	document.myform.backPage.value="<%=backPage%>";
	document.myform.action="print_order1.jsp?orderNo=<%=orderNo%>";
	document.myform.submit();
}


function back(){
	var backPage="";
	backPage ="<%=request.getParameter("backPage")%>";
	window.location=backPage;
}
function Edit(){
	document.myform.hcopy.value="";
	document.myform.horderNo.value="<%=orderNo%>";
	document.myform.hstatusCode.value="<%=statusCode%>";		
	document.myform.action="EditOrderForm.jsp";
	document.myform.submit();

}
function copy(){
	document.myform.horderNo.value="<%=orderNo%>";
	document.myform.hcopy.value="<%=copyOrder%>";
	document.myform.action="EditOrderForm.jsp";
	document.myform.submit();
}
window.onload = function(){
	var isPrint="<%=flag%>";
	if (isPrint == "N") {
		Fun_Print();
	}
}	
</script>
</body>
</html>
###############################################################























// window.onbeforeunload = beforeUnloadPage;
   	window.onbeforeunload = ConfirmClose;
function ConfirmClose()
{ 
 //alert(window.event.clientX);
// alert(window.event.clientY)
	if (event.clientY < 0)
	{ 
		event.returnValue = 'Do you want to continue?';
		if (childWin && !childWin.closed) {     	       		 	
	   		 	 childWin.close();
	   	}
		
	}
}


   
   /*function beforeUnloadPage(){
    alert("beforeUnloadPage");   
   	if(self.closed){
   		
   	     if (childWin && !childWin.closed) {  
   	       		 	
   		 	 childWin.close();
   		}
   	}
   
   	if((window.event.clientX<0) || (window.event.clientY<0)){
   		alert("hi");
   	}
   }*/
   
   ---------------------------------------------------------------------------------
	    String ans1 = checkPaymentType();
	    if(ans1.equals("1")){  
	     System.out.println("For saveButtton");
	     // calculate order number    
	     
	     String status = mo.getStatus("SUBMITTED");
	     
	     int totalItems = table.getRowCount();
	     totalMrpFld.getText();
	     savingFld.getText();    
	     
	     System.out.println("totalItems"+totalItems);
	     System.out.println("status"+status);
	 
	     System.out.println("totalMrpFld"+totalMrpFld.getText());
	     System.out.println("savingFld"+savingFld.getText());
	     
	     double totOrderValue = Double.parseDouble(totalField.getText());
	     
	     double totMRPValue = Double.parseDouble(totalMrpFld.getText());
	     double totDisValue = Double.parseDouble(savingFld.getText());     
	     
	     try{
	      String query2="SELECT payment_type_code from payment_type where payment_type_desc='"+pay_type+"'";
	      System.out.println(query2);
	      rs3 = getValstmt2.executeQuery(query2);   
	      while(rs3.next()){
	        p_code = rs3.getString(1);
	      } 
	      rs3.close();
	      
	     }catch(Exception e){               
	      System.out.println("Error in Payment_code "+e);
	      
	     } 
	     mo.deleteOrderDetail(orderNo);
	     System.out.println("Delete order details");
	     mo.deleteOrder(orderNo);
	     System.out.println("Delete orders");
	     mo.addOrders(orderNo, custCode, totalItems, pickValue, totOrderValue, totMRPValue, totDisValue, user, p_code, status);
	     // add Order Details
	     for(int i=0; i< table.getRowCount(); i++){      
	      try{
	       String query1="SELECT item_code from item_master where item_name='"+table.getValueAt(i, 0)+"'";   
	       rs2 = getValstmt1.executeQuery(query1);   
	       while(rs2.next()){
	         item_code = rs2.getString(1);
	       }
	       rs2.close();      
	      }catch(Exception e){
	       System.out.println("Error in item_code "+e);
	      } 
	      
	      if(table.getValueAt(i, 1).toString()== "true")  pickup_ind = 1; 
	      else pickup_ind = 0;
	      
	      double itemRate= Double.parseDouble((String)table.getValueAt(i, 3));
	      double itemQty = Double.parseDouble((String) table.getValueAt(i, 4));
	      double totItemPrice=Double.parseDouble((String)table.getValueAt(i, 5)); 
	      double itemMRP= Double.parseDouble((String)table.getValueAt(i, 6));
	      
	      double totItemDisAmt= Double.parseDouble((String)table.getValueAt(i, 7));
	      
	      if(table.getValueAt(i, 8).toString() != "0.00"){
	       
	       disRemark = totItemDisAmt+ "(@Rs " + totItemPrice +" per " + itemQty+ " QTYs)";
	      }else {
	        disRemark = (String)table.getValueAt(i, 8); 
	      }
	      mo.addOrderDetail(orderNo, item_code, itemRate, itemQty, totItemPrice, totItemDisAmt, disRemark, itemMRP, i, pickup_ind);
	     }     
	      try{  
	       win = JSObject.getWindow(this);
	      win.call("showMsgSend",null);
	            win.eval("document.myform.submit()");
	     }
	     catch(JSException e){
	      String error="Not get Win Object";
	     }
	------------------------------------------------------------
//store procedure
DELIMITER $$

DROP PROCEDURE IF EXISTS `js`.`get_cust_info` $$
CREATE DEFINER=`root`@`%` PROCEDURE `get_cust_info`(IN custCode VARCHAR(20))
BEGIN
IF ((custCode = "") or (custCode is NULL)) THEN

select custname,phone,building,block,wing,add1,add2,
custcode,create_datetime,update_datetime,area,pincode,
city,state,building_no,station
from customer_master
where 1=1;

ELSE

select a.custname,a.phone, a.custcode, a.building,a.building_no, a.block, a.wing,
a.area, a.add1, a.add2,
b.fmcg_per_3, b.last_order_date, b.last_order_num, b.fmcg_per_6,
b.fmcg_per_12, b.tot_orders_3, b.tot_orders_6, b.tot_orders_12, b.tot_savings_3,
b.tot_savings_6, b.tot_savings_12, b.tot_value_3, b.tot_value_6, b.tot_value_12,
avg_items_3,avg_items_6,avg_items_12
from customer_master a
left join customer_stats b  on a.custcode = b.custcode
where a.custcode=custCode;

END IF;
END $$

DELIMITER ;
-------------------------------------------------------
<html>/////Display Time
<head>
<script type="text/javascript">
function startTime()
{
var today=new Date();
var h=today.getHours();
var m=today.getMinutes();
var s=today.getSeconds();
// add a zero in front of numbers<10
m=checkTime(m);
s=checkTime(s);
document.getElementById('txt').innerHTML=h+":"+m+":"+s;
t=setTimeout('startTime()',500);
}

function checkTime(i)
{
if (i<10)
  {
  i="0" + i;
  }
return i;
}
</script>
</head>

<body onload="startTime()">
<div id="txt"></div>
</body>
</html>

----------------------------------------------------------------------



//total_value + (0.50 - (round(total_value,2)%0.50));
-----------------------------------------------------------------

/*<jsp:plugin type="applet" code="HelloWorld" codebase="applet"  width="160" height="150" >
   
     <jsp:fallback>
          <B>Unable to start plugin!</B>
     </jsp:fallback>

</jsp:plugin>*/
--------------------------------------------------------------

/**
 * @author: Anup Bansode 
 * Work started on 07/12/2007, Friday
 * This program works for JApplet.
 * Modification done without using JFrame. Also added dropdown menu.(on 10th Dec)
 * (Continued..)AutoComplete is working fine as per required. Tab key is also working
 * properly and F2 Problem also solved. ALso there are no problems with 
 * UP and DOWN Arrow Key. But pressing backspace still hangs the Applet.
 * Recomended on (28-12-2007) Wednesday as most of requirement met
 * Till 2/01/2008 Wednesday
 *  
*/

import javax.swing.*;
import javax.swing.event.CellEditorListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.text.JTextComponent;

import Temp.TextFieldEditor;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.*;
import java.sql.*;
import java.util.EventObject;
import java.util.Vector;
import netscape.javascript.JSObject; 
import netscape.javascript.JSException;


public class CustomerOrderApplet extends JApplet implements ActionListener, TableModelListener{
	
	ManageOrderFile mo = new ManageOrderFile("jdbc/js");	
	JSObject win;
	JTable table;
	DefaultTableModel tabModel;
	JScrollPane scrollPane;
	Vector rows = new Vector();
	Vector columns = new Vector();
	Vector productArray = new Vector();
	Vector item_codeArray = new Vector();
	Object objTemp=null;
	ComboBoxEditor cme;
	
	Connection con=null;
	ResultSet rs,rs1=null,rs2,rs3,rs4; 
	Statement getValstmt,getItemstmt,getValstmt1,getValstmt2,stmt;	
	JButton addButton,deleteButton,saveButton,cancelButton,clearButton;
	JCheckBox checkBox;
	JComboBox paymentCombo;
	JTextComponent commonJTC;
	TextFieldEditor tfe;
	JLabel totalPrice,totalField,totalMrp,totalItems,pickUp,deliver,paymentLbl,savingLbl,
		   totalItemFld,pickUpFld,deliverFld,totalMrpFld,savingFld,emptyFld,emptyFld1;
	JPanel tablePanel,innerbuttonPanel,buttonPanel,mainPanel,labelPanel1,labelPanel2,
		   labelPanel3,labelPanel4,emptyPanel,emptyPanel1,wholeLabelPanel;
	JTextComponent editor;	
	
	double item_mrp=0.00f;
	long pickup_ind=0;	
	int itemCount = 0,pickValue=0, deliverCount = 0, max=0,pickUpCnt=0,columnCount=7;	
	String  customerCode="", item_code="", pay_type="", p_code="";
	String user="", backPage="",disRemark="";
	String productValue,setProdName="",quantityValue="",blankString="",weightString="",
	   	   rateString="",blankValue="         ",blankVar="			",blankValue3="			";
	String[] prodValResult;	
	
	public void init(){
		try{				
			customerCode = getParameter("customerCode");
			user = getParameter("user");
			backPage = getParameter("backPage");
			initialize();
				SwingUtilities.invokeAndWait(new Runnable(){
					public void run(){
						makeGUI();
						}
					}
				);
			}
			catch(Exception e){
				System.out.println("Exception occured in Init"+e);
			}
	} 
	
	public void assignVar(String custCode, String user1, String backPage1){
		customerCode = custCode;		
		user = user1;	
		backPage = backPage1;		
	}
	
	public void start(){
		initialize();
	}
	
	public void  initialize(){
		try{
			String dburl = "jdbc:mysql://192.168.1.104/js";
			String dbuser = "dev";
			String dbpassword = "";
			String dbclassName = "com.mysql.jdbc.Driver";
			Class.forName(dbclassName);
			con = DriverManager.getConnection(dburl, dbuser, dbpassword);
			getValstmt = con.createStatement();
			getValstmt1 = con.createStatement();
			getValstmt2 = con.createStatement();	
			getItemstmt = con.createStatement();
			stmt = con.createStatement();				
		}catch (Exception e){
			System.out.println("Error occurred in Database Connection " + e);			
		}			
	}
	
	public void closeAll(){
		try{
			getValstmt.close();
			getValstmt1.close();
			getValstmt2.close();
			getItemstmt.close();
			stmt.close();
			con.close();
		}catch(Exception e){
	        e.getMessage();
			e.printStackTrace();
	    }	
	}	
	
	public void makeGUI(){		
		UIManager.LookAndFeelInfo[] lfi=UIManager.getInstalledLookAndFeels();		
		String[] columnNames = { "Product","Check", "Weight","Price","Quantity","Total Price","MRP","Discount","Remark"};
		addColumns(columnNames);		
		tabModel = new DefaultTableModel();		
		tabModel.setDataVector(rows,columns);	
		setTabFocus();
		table.setCellSelectionEnabled(true);		
		scrollPane = new JScrollPane(table);	
	    TableColumnModel tcm = table.getColumnModel();
	    TableColumn colwithCombo = tcm.getColumn(0);		
	    TableColumn colwithCheck = tcm.getColumn(1);
	    TableColumn colwithTextField = tcm.getColumn(4);
	    cme=new ComboBoxEditor();
		colwithCombo.setCellEditor(cme);		
		colwithCheck.setCellEditor(new DefaultCellEditor(new CheckBoxEditor()));		
		CheckBoxCellRendrer chkRenderer = new CheckBoxCellRendrer();
		colwithCheck.setCellRenderer(chkRenderer);
		tfe=new TextFieldEditor();
		colwithTextField.setCellEditor(new DefaultCellEditor(new TextFieldEditor()));		
		setUpProductColumn(colwithCombo,colwithCheck);		
		table.getModel().addTableModelListener(this);		
		addComponents();
		colwithCombo.setPreferredWidth( 600 );
		colwithCombo.setMinWidth( 250 );
		colwithCombo.setMaxWidth( 600 );
		table.setColumnSelectionAllowed(false);
	}

	public void addColumns(String[] colName){
		for(int i=0;i<colName.length;i++)
			columns.addElement((String) colName[i]);
	}		
	
	public void addRow(){ 
		Vector r=new Vector();
		r=addBlankElement();	
		rows.addElement(r);
		table.addNotify();	
        int rowcnt = tabModel.getRowCount();
		int row = table.getRowCount() - 1;
		table.changeSelection(row, 0, false, false);		
        cme.checkBlankRows();
        cme.removeAllItems();        
		if(table.getRowCount()==1){
	        setSelectedRow(0);
	        setSelectedCol(0);			
		}
    }
	
			
	public Vector addBlankElement(){
		Vector t = new Vector();
		t.addElement((String) "");
		t.addElement(new Boolean(false));		
		t.addElement((String) "");
		t.addElement((String) "");
		t.addElement((String) "");
		t.addElement((String) "");	
		t.addElement((String) "");
		t.addElement((String) "");	
		t.addElement((String) "");	
		return t;
	}
			
	
	void deleteRow(int index){
		try{
		if(index!=-1){ 
			System.out.println("Row "+index);
			rows.removeElementAt(index);
			table.addNotify();
		}	
		}catch(Exception e){
			System.out.println("In DeleteRow "+e);
		}
	}	
	public void setSelectedRow(int row) {
	    if(row == -1)
	         return;
	    else {
	    	table.setRowSelectionInterval(row, row);
	    }
	}	  
    public void setSelectedCol(int col) {
        if(col == -1)
             return;
        else {
             table.setColumnSelectionInterval(col, col);
        }
    }
	public void setTabFocus(){
        table = new JTable(tabModel){
            public boolean isCellEditable(int row, int column){             	
            	if(column ==0 || column ==4 || column ==1 || column ==8)
            		return true;
            	else
            		return false;
            } 
            public void changeSelection(final int row, final int column, boolean toggle, boolean extend){
                super.changeSelection(row, column, toggle, extend);
                if (editCellAt(row, column))
                    getEditorComponent().requestFocusInWindow();               
            }           
        };
	}
	
	public void addComponents(){
		buttonPanel = new JPanel();
		innerbuttonPanel = new JPanel();
		buttonPanel.setLayout(new GridLayout(2,1,0,0));
		
		addButton = new JButton("Add New Row");
		clearButton = new JButton("Clear");
		deleteButton = new JButton("Delete");
		saveButton = new JButton("Save & Print");
		cancelButton = new JButton("Cancel");
		addButton.setMnemonic(KeyEvent.VK_N);
		clearButton.setMnemonic(KeyEvent.VK_C);
		deleteButton.setMnemonic(KeyEvent.VK_D);
		saveButton.setMnemonic(KeyEvent.VK_S);
		saveButton.setMnemonic(KeyEvent.VK_ENTER);
		cancelButton.setMnemonic(KeyEvent.VK_B);
		wholeLabelPanel = new JPanel(new FlowLayout(0,0,0));
		labelPanel1 = new JPanel(new GridLayout(3,1,0,0));
		emptyPanel = new JPanel(new GridLayout(3,1,0,0));
		labelPanel2 = new JPanel(new GridLayout(3,1,0,0));
		labelPanel3 = new JPanel(new GridLayout(2,1,0,0));
		emptyPanel1 = new JPanel(new GridLayout(3,1,0,0));
		labelPanel4 = new JPanel(new GridLayout(3,1,0,0));
		
		totalItems = new JLabel("Total Items :");
		totalItemFld =  new JLabel();
		pickUp = new JLabel("PickUp         :");
		pickUpFld =  new JLabel();
		deliver = new JLabel("Deliver         :");
		deliverFld =  new JLabel();		
		emptyFld = new JLabel("                                  ");		
		paymentLbl = new JLabel("Payment :");		
		paymentCombo = new JComboBox();	
		paymentCombo.addItem("Select Type");
		try{
			stmt = con.createStatement();
			rs4 = stmt.executeQuery("select payment_type_desc from payment_type");
			while (rs4.next()) {
				paymentCombo.addItem(rs4.getString(1));
			}
			rs4.close();
			stmt.close();
		}catch(Exception e){
			System.out.println("Exception in loading payment type"+e);
		}
		emptyFld1 = new JLabel("  ");		
		totalPrice = new JLabel("Total Price :");
		totalField = new JLabel();
		totalMrp = new JLabel("Total MRP  :");
		totalMrpFld =  new JLabel();				
		savingLbl =  new JLabel("saving         :");
		savingFld =  new JLabel();
		
		labelPanel1.add(totalItems);
		labelPanel1.add(totalItemFld);
	    labelPanel1.add(pickUp);
	    labelPanel1.add(pickUpFld);
	    labelPanel1.add(deliver);
	    labelPanel1.add(deliverFld);	    
	    emptyPanel.add(emptyFld); 	    
		labelPanel2.add(paymentLbl);		
		labelPanel3.add(paymentCombo);		
		emptyPanel1.add(emptyFld1); 		
		labelPanel4.add(totalPrice);
	    labelPanel4.add(totalField);
	    labelPanel4.add(totalMrp);
	    labelPanel4.add(totalMrpFld);
	    labelPanel4.add(savingLbl);
	    labelPanel4.add(savingFld);
	    
	    wholeLabelPanel.add(labelPanel1);
	    wholeLabelPanel.add(emptyPanel);
	    wholeLabelPanel.add(labelPanel2);
	    wholeLabelPanel.add(labelPanel3);
	    wholeLabelPanel.add(emptyPanel1);
	    wholeLabelPanel.add(labelPanel4);

		innerbuttonPanel.add(addButton);
		innerbuttonPanel.add(saveButton);	
		innerbuttonPanel.add(clearButton);
		innerbuttonPanel.add(deleteButton);		
		innerbuttonPanel.add(cancelButton);
	
		buttonPanel.add(wholeLabelPanel);
		buttonPanel.add(innerbuttonPanel);
	
		addButton.addActionListener(this);
		clearButton.addActionListener(this);
		deleteButton.addActionListener(this);
		saveButton.addActionListener(this);
		cancelButton.addActionListener(this);

		mainPanel=new JPanel();
		tablePanel=new JPanel();

		mainPanel.setLayout(new BorderLayout());
		mainPanel.add("Center",scrollPane);
		mainPanel.add("South",buttonPanel);
		tablePanel.setBackground(Color.white);
		buttonPanel.setBackground(Color.white);
		table.getParent().setBackground(Color.white);
		getContentPane().add(mainPanel);
	}
	
	public void setUpProductColumn(TableColumn productColumn , TableColumn checkColumn){
		try{			
			int prevLength=0,maxLength=0,blankLength=0,weightLength=0,rateLength=0;
			String query="SELECT item_name,item_weight, item_rate, item_mrp,item_code from item_master order by item_name";
			rs = getValstmt.executeQuery(query);	
			while(rs.next()){	
					blankLength=100-rs.getString(1).length();
					weightLength=10-rs.getString(2).length();
					rateLength=15-rs.getString(3).length();
					for(int ii=0; ii<blankLength; ii++){
						blankString+=" " ;	
					}
					for(int ii=0; ii<weightLength; ii++){
						weightString+=" " ;	
					}
					for(int ii=0; ii<rateLength; ii++){
						rateString+=" " ;	
					}				
					productArray.add(rs.getString(1).concat(blankString)+rs.getString(2).concat(weightString)+rs.getString(3).concat(rateString)+rs.getString(4));
					item_codeArray.add(rs.getString(5));					
					blankString="";
					blankVar="";
					weightString="";
					rateString="";				
			}				
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setToolTipText("Click the Product to see a list of choices");
			productColumn.setCellRenderer(renderer);
		}catch(Exception e){
			System.out.println("Could not connect to database"+e);
		}
	}		

	public void tableChanged(javax.swing.event.TableModelEvent source){
		switch (source.getType()){
			case TableModelEvent.UPDATE:
		}		
		if(source.getColumn()==1){
			pickValue = 0;
    		int rowCount= table.getRowCount();    		
    		if(rowCount>0){
    			for(int pickYes=0; pickYes<rowCount; pickYes++ ){
    				Object obj=table.getValueAt(pickYes, 1);
    				if(obj.toString()=="true"){
    					pickValue++;
    				}
    			}
    		}
    		setPickupLabel(pickValue);
		}
	}
	
	public void actionPerformed(ActionEvent source){
		try{
			if (source.getSource()==(JButton) addButton){		
				addRow();	
				itemCount++;
				deliverCount= itemCount-pickValue;
				totalItemFld.setText(Integer.toString(itemCount));
				totalItemFld.setForeground(Color.blue);
				deliverFld.setText(Integer.toString(deliverCount));
				deliverFld.setForeground(Color.blue);
				setPickupLabel(pickValue);
			}else if (source.getSource()==(JButton) deleteButton){
				int totalCost = 0;			
				int totalmrpCost = 0;				
				deleteRow(table.getSelectedRow());
				if(itemCount>0 && table.getSelectedRow()!=-1 ){					
					itemCount--;	
					deliverCount= itemCount-pickValue;
					totalItemFld.setText(Integer.toString(itemCount));
					deliverFld.setText(Integer.toString(deliverCount));
					setPickupLabel(pickValue);
					TextFieldEditor tf = new TextFieldEditor();
					tf.setOverallTotal();
				}			
			}else if (source.getSource()==(JButton) saveButton){
				String ans = checkSelctedProduct();
				if(ans.equals("1")){
					String ans1 = checkPaymentType();
					if(ans1.equals("1")){			
						checkBlankProduct();
						saveOrder();				
					}
				}
			}else if (source.getSource()==(JButton) cancelButton){
				try{
					win = JSObject.getWindow(this);
					win.call("showMsg",null);
			        win.eval("document.myform.submit()");
				}catch(JSException e){
					String error="Not get Win Object";
				}			
			}else if (source.getSource()==(JButton) clearButton){
				try{
					win = JSObject.getWindow(this);
					win.eval("window.location.reload(false)");
					win.eval("document.myform.submit()");
				}
				catch(JSException e){
					String error="Not get Win Object";
				}				
			}
		}catch(ArrayIndexOutOfBoundsException aie){
			System.out.println("Error occured in actionPerformed "+ aie);
		}
	}
	
	public void saveOrder(){
		System.out.println("In saveorder");
		max=mo.getOrderNum();
		System.out.println("max"+max);
		saveInOrderTable();	
		saveInOrderDetails();	
		
		clearAll();
	 	try{		
	 		win = JSObject.getWindow(this);	
	 		if(!backPage.equals("create_newCustomer.jsp")) backPage="cust_orderBill.jsp";
	 		int orderNo1= max;
	 		win.eval("document.myform.action='print_order1.jsp?backPage="+backPage+"&orderNo=" + orderNo1 +"'");
	 		win.eval("document.myform.target='_blank'");
	 		win.eval( "window.open(myform.action,myform.target,'fullscreen=yes')");	       
		}
		catch(JSException e){
			String error="Not get Win Object";
		}
	}
	
	public void saveInOrderTable(){
		System.out.println("In saveordertable");
		String status = mo.getStatus("SUBMITTED");		
		int totalItems = table.getRowCount();		
		double totOrderValue = Double.parseDouble(totalField.getText());
		double totMRPValue = Double.parseDouble(totalMrpFld.getText());
		double totDisValue = Double.parseDouble(savingFld.getText());			
		try{
			String query2="SELECT payment_type_code from payment_type where payment_type_desc='"+pay_type+"'";
			rs3 = getValstmt2.executeQuery(query2);			
			while(rs3.next()){
				 p_code = rs3.getString(1);
			}	
			rs3.close();						
		}catch(Exception e){
			System.out.println("Error in Payment_code "+e);
		}			
		mo.addOrders(max, customerCode, totalItems, pickValue, totOrderValue, totMRPValue, totDisValue, user, p_code, status);
	}
	
	public void saveInOrderDetails(){
		for(int i=0; i< table.getRowCount(); i++){		
			System.out.println("In saveorderDetail");
			try{
				String query1="SELECT item_code from item_master where item_name='"+table.getValueAt(i, 0)+"'";			
				rs2 = getValstmt1.executeQuery(query1);			
				while(rs2.next()){
					 item_code = rs2.getString(1);
				}
				rs2.close();				
			}catch(Exception e){
				System.out.println("Error in item_code "+e);
			}				
			if(table.getValueAt(i, 1).toString()== "true")  pickup_ind = 1;	
			else pickup_ind = 0;			
			double itemRate= Double.parseDouble((String)table.getValueAt(i, 3));
			double itemQty = Double.parseDouble((String) table.getValueAt(i, 4));
			double totItemPrice= Double.parseDouble((String)table.getValueAt(i, 5));	
			double itemMRP= Double.parseDouble((String)table.getValueAt(i, 6));			
			double totItemDisAmt= Double.parseDouble((String)table.getValueAt(i, 7));			
			if(table.getValueAt(i, 8).toString() != "0.00"){				
				disRemark = totItemDisAmt+ "(@Rs " + totItemPrice +" per " + itemQty+ " QTYs)";
			}else {
				 disRemark = (String)table.getValueAt(i, 8);	
			}
			mo.addOrderDetail(max, item_code, itemRate, itemQty, totItemPrice, totItemDisAmt, disRemark, itemMRP, i, pickup_ind);
					
		}					
	}
	
	public void clearAll(){	
		for(int i=table.getRowCount()-1; i>-1; i--){
			try{
				 
					System.out.println("Row "+i);
					rows.removeElementAt(i);
					table.addNotify();
				
				}catch(Exception e){
					System.out.println("In DeleteRow "+e);
			}
		}
		itemCount = 0;
		pickValue=0;
		deliverCount = 0;		
		pickUpCnt=0;		
		item_mrp=0.00f;	
		
		totalItemFld.setText("");
		deliverFld.setText("");
		pickUpFld.setText("");
		totalField.setText("");
		totalMrpFld.setText("");
		savingFld.setText("");	
		paymentCombo.setSelectedItem("Select Type");
		
		
		
	}
	public void setCellValues(String item_codeStr){		
		try{			
			String insertIntoCellQuery = "SELECT item_weight,item_rate,deal_on_qty,deal_amount,item_mrp,item_name FROM item_master where item_code='"+item_codeStr+"'";
			rs1 = getItemstmt.executeQuery(insertIntoCellQuery);
			if(rs1.next()){
				selectCell(table.getSelectedRow(),table.getSelectedColumn());
				table.setValueAt(rs1.getString(6), table.getSelectedRow(), 0);				
				table.setValueAt(rs1.getString(1), table.getSelectedRow(), 2);
				table.setValueAt(rs1.getString(2), table.getSelectedRow(), 3);
				item_mrp = rs1.getDouble(5);
				table.setValueAt("0", table.getSelectedRow(), 4);
				table.setValueAt("0", table.getSelectedRow(), 5);
				table.setValueAt(rs1.getString(5), table.getSelectedRow(), 6);
				table.setValueAt("0", table.getSelectedRow(), 7);
				table.setValueAt("", table.getSelectedRow(), 8);
			}			
		}catch(Exception se){
			System.out.println("Exception Occured while inserting data in table cells"+se);
		}
    }    
	
	public void checkBlankProduct(){
		for(int i=0; i< table.getRowCount(); i++){
			if(table.getValueAt(i, 0).equals("")){
				JOptionPane.showMessageDialog(null,"Product cannot be blank","RMS",JOptionPane.INFORMATION_MESSAGE);
			}
		}
	}
   
	public String checkSelctedProduct(){
		try{		
			Vector vec = new Vector();
			for(int i=0; i< table.getRowCount(); i++){
					vec.add(table.getValueAt(i, 0));
			}
			String message = "Duplicate entry for:";
			int rowCount = table.getRowCount(),flagCount=0;
			String str1,str2,matchString="";
			for(int row = 0; row < rowCount; row++){
				 str1 = (String)table.getValueAt(row, 0);
					if(flagCount>0){					
						message = message+matchString;
						JOptionPane.showMessageDialog(null,message,"RMS",JOptionPane.INFORMATION_MESSAGE);
						return("0");					
					}
				for(int j = 0;  j< vec.size(); j++){
					if(row!=j){
						str2 = (String)table.getValueAt(j, 0);
						if(str1.equalsIgnoreCase(str2)){
							flagCount++;
							matchString = str1;
							break;
						}
					}				
				}
			}
			return("1");
		}
		catch(ArrayIndexOutOfBoundsException aie){
			System.out.println("Exception in checkSelctedProduct" +aie);
			return("0");
		}
	}
	
	public int checkQuantity(){
		try{
			String quantityVal =(String)(table.getValueAt(table.getSelectedRow(), 4));
			if(quantityVal.equals("")){			
				String  message="Quantity cannot be blank";
				JOptionPane.showMessageDialog(null,message,"RMS",JOptionPane.INFORMATION_MESSAGE);
				return 1;
			}
		}catch(NumberFormatException nfe){
			System.out.println("Error while editing cell"+nfe);
		}
		return 0;
    }
	
	public String checkPaymentType(){
		String message = "Please select payment term";
		String noItemsMsg = "No items Selected";
		if(paymentCombo.getSelectedItem() == "Select Type" && table.getRowCount()>0){
			JOptionPane.showMessageDialog(null,message,"RMS",JOptionPane.INFORMATION_MESSAGE);
			return("0");
		}else{
			pay_type = (String)paymentCombo.getSelectedItem();
			
		}
		if(table.getRowCount()==0){
			JOptionPane.showMessageDialog(null,noItemsMsg,"RMS",JOptionPane.INFORMATION_MESSAGE);
			return("0");
		}
		return("1");			
	}
	
	public void setPickupLabel(int pickValue){		
		objTemp=Integer.toString(pickValue);
		pickUpFld.setText(objTemp.toString());
		pickUpFld.setForeground(Color.BLUE);
		deliverCount= itemCount-pickValue;		
		deliverFld.setText(Integer.toString(deliverCount));
		deliverFld.setForeground(Color.blue);
	}
	
	public int checkBlankValue(){
		try{
			Object productVal,quantityVal,weightVal,priceVal=null;
			String tempQualStr="";			
			String  zeroMessage="Quantity cannot be zero";
			String  blankMessage="Quantity cannot be blank";
			String  noProdSelectedMessage="Product is blank";
			int val=0;
		    productVal =table.getValueAt(table.getSelectedRow(), 0);
			quantityVal =table.getValueAt(table.getSelectedRow(), 4);
			weightVal =table.getValueAt(table.getSelectedRow(), 2);
			priceVal = table.getValueAt(table.getSelectedRow(), 3);
			tempQualStr = (String)quantityVal;
			if(!productVal.equals("")){
				val = Integer.parseInt(tempQualStr); 
			}
			if(productVal.equals("")){				
				JOptionPane.showMessageDialog(null,noProdSelectedMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
				return 1;
			}else if(quantityVal.equals("")){			
				JOptionPane.showMessageDialog(null,blankMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
				return 1;
			}else if(quantityVal!="" && (val ==0)){
				JOptionPane.showMessageDialog(null,zeroMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
				return 1;
			}else if(weightVal.equals("") && priceVal.equals("")){				
				String  wpMessage="Weight and Price cannot be blank";
				JOptionPane.showMessageDialog(null,wpMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
				return 1;
			}else if(priceVal.equals("")){			
				String  pMessage="Price cannot be blank";
				JOptionPane.showMessageDialog(null,pMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
				return 1;
			}
		}
		catch(NumberFormatException nfe){
			System.out.println("Exception occured in checkBlankValue"+nfe);
		}	
		return 0;
	}

	public void selectCell(int row,int col)
	{
		if(row!=-1 && col !=-1){
			table.setRowSelectionInterval(row,row);
			table.setColumnSelectionInterval(col,col);
		}
	}
	
	public class ComboBoxEditor extends JComboBox implements TableCellEditor{
	   JTextComponent editor;
	   String item_codeStr="",selectedItem="";
	   String[] splitStrVal,splitResult;
	   int iCount=0;	  
	   public ComboBoxEditor() {
		    super();
		    setEditable(true);
		    setEnabled(true);
		    editor = (JTextComponent) getEditor().getEditorComponent();
		    commonJTC=editor;
		    editor.addMouseListener(new MouseAdapter(){
		    	public void mouseReleased(MouseEvent me) {
	    			if(table.getSelectedColumn()==0){
	    				editor.setText(table.getValueAt(table.getSelectedRow(), table.getSelectedColumn()).toString());
	    			}
		    	}		    	
		    	public void mousePressed(MouseEvent me) {
		    		try{
			    		String prodName="";				    		
			    		prodName=(String)getSelectedItem();			    	
		    			if(!prodName.equals("")){
		    				splitStrVal = prodName.split(blankValue);
		    				editor.setText(splitStrVal[0]);
		    			}	
		    			item_codeStr=item_codeArray.get(productArray.indexOf(prodName)).toString();
		    			setCellValues(item_codeStr);
			    		checkBlankRows();
			    	}catch(ArrayIndexOutOfBoundsException aio){
			    			System.out.println("Exception in mousePressed"+aio);
			    	}catch(NullPointerException npe){
			    			System.out.println("Exception in mousePressed"+npe);
			    	}
		    	}
		    });
		    editor.addKeyListener(new KeyAdapter(){
	    		String temp="";
	    		int rowCount= table.getColumnCount();
	    		String item_codeStr="";
	        	public void keyPressed(KeyEvent ke){  
	        		try{	        			
		               	if(ke.getKeyCode() == KeyEvent.VK_TAB){
		               		int r = table.getSelectedRow();
		                    int c = table.getSelectedColumn();
		                    int cols=columnCount;
		                    int tempcols = 0;
		                    String prodvalue=table.getValueAt(table.getSelectedRow(), 0).toString();
		                    int rowCount = table.getRowCount();
		                    if(table.getValueAt(table.getSelectedRow(), 0)==""){
		                    	JOptionPane.showMessageDialog(null,"Product Name is blank","RMS",JOptionPane.INFORMATION_MESSAGE);
		                    	table.changeSelection(r, 2, false, false);	                    	                    	                    	
		                    }else if(c ==0 ) {
		                        table.changeSelection(table.getSelectedRow(), 3, false, false);
		                    } 		                   
		                } 
	        		}catch(NumberFormatException nfe){
	        			System.out.println("Exception occured in ComboBoxEdidor keyPressed");
	        			nfe.printStackTrace();
	        		}
	        	}
	        	
	        	public void keyReleased(KeyEvent ke){        		        		
	        		if((ke.getKeyCode()>=96) && (ke.getKeyCode()<=105) || (ke.getKeyCode()>=48) && (ke.getKeyCode()<=57)){
	        			JOptionPane.showMessageDialog(null,"Numeric digits are not allowed","RMS",JOptionPane.INFORMATION_MESSAGE);
	        			editor.setText("");
	        		}	        		
	        		if((ke.getKeyCode()==KeyEvent.VK_DOWN)){
	        			setPopupVisible(true);
	        		}
	        		if ((ke.getKeyCode() == KeyEvent.VK_ESCAPE)){
	        			if(isPopupVisible())
	        				setPopupVisible(false);        				
	        		}	        		
	        		if ((ke.getKeyCode() == KeyEvent.VK_SHIFT) && ke.getKeyCode() == KeyEvent.VK_TAB){
	        			checkBlankRows();
	        			if(table.getSelectedColumn()==0 && table.getValueAt(table.getSelectedRow(), 1)!=""){
	        				editor.setText(table.getValueAt(table.getSelectedRow(), table.getSelectedColumn()).toString());
	        			}
	        		}
	    			if(editor.getText().length()<3 && ke.getKeyCode() == KeyEvent.VK_ENTER){
	    					editor.setText(getItemAt(0).toString());
	    			}	        		
	        		if (ke.getKeyCode() == KeyEvent.VK_ENTER){
	        			try{
        		 			setProdName=selectedItem;
        		 			prodValResult = setProdName.split(blankValue);
        		 			item_codeStr=item_codeArray.get(productArray.indexOf(setProdName)).toString();
        		 			if(table.getRowCount()>0)
		        				setCellValues(item_codeStr);
		        		}catch(ArrayIndexOutOfBoundsException aie){
		        				System.out.println("Exception when item entered"+aie);
		        		}
	        		}	        		
	        		if(!(ke.getKeyCode()==KeyEvent.VK_DOWN) && !(ke.getKeyCode()==KeyEvent.VK_UP)
	        			&& !(ke.getKeyCode()==KeyEvent.VK_LEFT) && !(ke.getKeyCode()==KeyEvent.VK_RIGHT)
	        			&& !(ke.getKeyCode()==KeyEvent.VK_ENTER) && !(ke.getKeyCode()==KeyEvent.VK_TAB)
	        			&& !(ke.getKeyCode()==KeyEvent.VK_SHIFT) && !(ke.getKeyCode()==KeyEvent.VK_HOME)
	        			&& !(ke.getKeyCode()==KeyEvent.VK_PAGE_UP) && !(ke.getKeyCode()==KeyEvent.VK_PAGE_DOWN)) {
	        			try{
	        				temp = editor.getText();
	        				while(getItemCount()!=0)
	        					removeItemAt(0);
	        				String str="";        				        			
	        				if (temp.trim().length()>0){
		        				for(int i=0; i<productArray.size(); i++){
		        					str = productArray.get(i).toString();
		        					if(str.toUpperCase().startsWith(temp.toUpperCase())){
		        						addItem(str);
		        					}
		        				}
	        				}
	        				setProdName = temp;           				
	        				if(setProdName == ""){
	        					hidePopup();
	        				}else showPopup();
	        				editor.setText(temp); 
	        			}catch(Exception e){
	        				System.out.println("Error occured in KeyReleased"+e);
	        			}
	        		} // EOF Various Conditions
	        		if((ke.getKeyCode()==KeyEvent.VK_DOWN) || (ke.getKeyCode()==KeyEvent.VK_UP)||
	        			(ke.getKeyCode()==KeyEvent.VK_PAGE_UP) || (ke.getKeyCode()==KeyEvent.VK_PAGE_DOWN)){
	        			selectedItem=(String)getItemAt(getSelectedIndex());
	    				if(selectedItem!=""){
	    					splitStrVal = selectedItem.split(blankValue);
	    					editor.setText(splitStrVal[0]);
	    				}
	        		}//EOF Condition for up,down,pageUp, pageDown keys respectively for setting the editor.
	        	}	        	
	        });	    
		  } // EOF Combo Constructor	  
		  
		  public void addCellEditorListener(CellEditorListener listener) {}

		  public void removeCellEditorListener(CellEditorListener listener) {}

		  public void fireEditingStopped() {}

		  public void fireEditingCanceled() {}

		  public void cancelCellEditing() {		   
		      fireEditingCanceled();
		  }

		  public boolean stopCellEditing() {
		      return true;
		  }

		  public boolean isCellEditable(EventObject event) {
			  return true;
		  }

		  public boolean shouldSelectCell(EventObject event) {
		      return true;
		  }

		  public Object getCellEditorValue() {
		      return this;
		  }

		  public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected,
		      int row, int column) {
			  return this;
		  }
		  
		  public void checkBlankRows(){
			  	int rowCount=0;
			  	rowCount=table.getRowCount();
				for(int row=0; row<rowCount; row++){
					if(table.getValueAt(row, 0).equals("") || table.getValueAt(row, 2).equals("false") &&
						table.getValueAt(row, 3).equals("") && table.getValueAt(row, 4).equals("")&&
						table.getValueAt(row, 5).equals("") && table.getValueAt(row, 6).equals("") ){
						for(int itemCount=0; itemCount<getItemCount(); itemCount++){
							removeAllItems(); 
							break;
						}
					}
				}         			
				for(int row=0; row<rowCount; row++){
					if(!(table.getValueAt(row, 0).equals("") || table.getValueAt(row, 2).equals("false") &&
							table.getValueAt(row, 3).equals("") && table.getValueAt(row, 4).equals("")&&
							table.getValueAt(row, 5).equals("") && table.getValueAt(row, 6).equals(""))){
						//table.setValueAt(null, row, 0);
						for(int itemCount=0; itemCount<getItemCount(); itemCount++){
							removeAllItems();
							break;
						}
					}
				}
		  } 	  
	}// EOF ComboBoxEditor	
			
	public class CheckBoxEditor extends JCheckBox {	
		Object objTemp=null;
		int spaceCount=0,pickValue=0;
		public CheckBoxEditor(){
			super();
			setEnabled(true);			
			requestFocus();
			setHorizontalAlignment(JLabel.CENTER);
			setBackground(Color.LIGHT_GRAY);
			addItemListener(new ItemListener() {
				public void itemStateChanged(ItemEvent event) {				
					JCheckBox cb = (JCheckBox)event.getSource();
				    Object item = event.getItem();  			
				    if(event.getStateChange()==ItemEvent.SELECTED){
			    		int rowCount= table.getRowCount();
			    		pickUpCnt++;
			    		int checkFlag=0;			    		
					    checkFlag = checkBlankValue();
						if(checkFlag == 1){				
							setSelected(false);											
						}
					}				     
				    if(event.getStateChange()==ItemEvent.DESELECTED){
				    	 pickUpCnt--;
				    }	
				}
			});		
		}//Consturtor	
 }//EOF CheckBox Class
	
	public class CheckBoxCellRendrer implements TableCellRenderer {
		public boolean cellEnabled = true;
		int spaceCount =0,pickValue=0;
		Object objTemp=null;
		JCheckBox jcb = new JCheckBox();
		public CheckBoxCellRendrer(){
			jcb.setEnabled(true);			
			jcb.setHorizontalAlignment(JLabel.CENTER);
		}
		
		public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,	
				boolean hasFocus, int row, int column) {			
			if (value != null && value.equals(new Boolean(true))) {
				jcb.setSelected(true);
			}else {
				jcb.setSelected(false);
			}
			return jcb;
		}
	}// EOF CheckBoxCellRendrer	
	
	public class TextFieldEditor extends JTextField{
		int productColBlank=0;
		public TextFieldEditor(){
			super();
		    table.addMouseListener(new MouseAdapter(){
		    	public void mouseReleased(MouseEvent me) {
		    		
		    		int rowCount=table.getRowCount();		    		
		    		for(int i=0; i<rowCount; i++){
		    			if(table.getValueAt(i, 0).equals("")){
		    				JOptionPane.showMessageDialog(null,"Product cannot be blank","RMS",JOptionPane.INFORMATION_MESSAGE);
		    				table.changeSelection(i, 0, false, false);
		    			}		    			
		    			else if(!table.getValueAt(i, 4).equals("") && !table.getValueAt(i, 4).equals("0")){
		    				//JOptionPane.showMessageDialog(null,"Quantity neither blank nor zero","RMS",JOptionPane.INFORMATION_MESSAGE);
		    				table.changeSelection(i, 4, false, false);
		    			}
		    			else if(!table.getValueAt(i, 0).equals("")){
		    				//JOptionPane.showMessageDialog(null,"Product is not blank","RMS",JOptionPane.INFORMATION_MESSAGE);
		    				table.changeSelection(i, 4, false, false);
		    			}
		    		}//EOF For		    		
		    	}
		    	public void mousePressed(MouseEvent me) {
		    		//System.out.println("TextField MousePressed......");
		    	}
		  });

		table.addKeyListener(new KeyAdapter(){				
				public void keyReleased(KeyEvent ke){
					System.out.println("Hello..........");
		    		for(int i=0; i<table.getRowCount(); i++){
		    			if(table.getValueAt(i, 0).equals("")){
		    				JOptionPane.showMessageDialog(null,"Product cannot be blank","RMS",JOptionPane.INFORMATION_MESSAGE);
		    				table.changeSelection(i, 0, false, false);
		    			}		    			
		    			else if(!table.getValueAt(i, 4).equals("") && !table.getValueAt(i, 4).equals("0")){
		    				//JOptionPane.showMessageDialog(null,"Quantity neither blank nor zero","RMS",JOptionPane.INFORMATION_MESSAGE);
		    				table.changeSelection(i, 4, false, false);
		    			}
		    			else if(!table.getValueAt(i, 0).equals("")){
		    				//JOptionPane.showMessageDialog(null,"Product is not blank","RMS",JOptionPane.INFORMATION_MESSAGE);
		    				table.changeSelection(i, 4, false, false);
		    			}
		    		}//EOF For
				}
		});
		
			addKeyListener(new KeyAdapter(){				
				public void keyPressed(KeyEvent ke){
					
					boolean checkFirstColFlag=false,checkLastRowFlag=false;
					int rowCount=table.getRowCount();					
					if((ke.getKeyCode()==KeyEvent.VK_TAB && table.getSelectedColumn()==4)){
						String quantity=getText();
						checkFirstColFlag=isFirstColumnBlank();
			            if(table.getSelectedRow()==rowCount-1 && table.getSelectedColumn()==4){
			            	checkLastRowFlag=true;
			            }						
						if(quantity.equals("") || quantity.equals("0")){
							JOptionPane.showMessageDialog(null,"Quantity cannot be blank","RMS",JOptionPane.INFORMATION_MESSAGE);
							setSelectedCol(3);
						}
						else if(!quantity.equals("") && !quantity.equals("0")&& checkFirstColFlag==true){
							JOptionPane.showMessageDialog(null,"Product Name is blank at row "+(productColBlank+1),"RMS",JOptionPane.INFORMATION_MESSAGE);
							System.out.println("Product Name== "+(productColBlank+1));
							setSelectedCol(3);
						}
						else if(!quantity.equals("") && !quantity.equals("0")&& checkFirstColFlag==false && checkLastRowFlag==false){
							JOptionPane.showMessageDialog(null,"Next Row can only be added from last row","RMS",JOptionPane.INFORMATION_MESSAGE);
							//setSelectedCol(3);
							table.changeSelection(rowCount-1, 0, false, false);
						}
						else if(!quantity.equals("") && !quantity.equals("0")&& checkFirstColFlag==false && checkLastRowFlag){
							addRow();
							//cme.editor.setText(table.getValueAt((table.getSelectedRow()-1), 0).toString());
							//table.setValueAt(table.getValueAt((table.getSelectedRow()-1), 0),(table.getSelectedRow()-1), 0);
							itemCount++;
							totalItemFld.setText(Integer.toString(itemCount));
							totalItemFld.setForeground(Color.blue);
							deliverFld.setText(Integer.toString(itemCount));
							deliverFld.setForeground(Color.blue);
							table.changeSelection(table.getSelectedRow(), 0, false, false);
						}									
					} //EOF TAB						
					
				} //EOF Pressed
				
				public void keyReleased(KeyEvent ke){
					if((ke.getKeyCode()>=96) && (ke.getKeyCode()<=105) || (ke.getKeyCode()>=48) && (ke.getKeyCode()<=57)||
						ke.getKeyCode()==KeyEvent.VK_BACK_SPACE || ke.getKeyCode()==KeyEvent.VK_DELETE ){
						quantityValue = getText();
						setQuantityTotalPriceMrp();						
					}					
					if((ke.getKeyCode()>=65) && (ke.getKeyCode()<=90)){						
						JOptionPane.showMessageDialog(null,"Please enter only digits","RMS",JOptionPane.INFORMATION_MESSAGE);
						setText("");
					}			
					if((ke.getKeyCode()==45) || (ke.getKeyCode()==109)){
						JOptionPane.showMessageDialog(null,"Negative value in not permitted","RMS",JOptionPane.INFORMATION_MESSAGE);
						setText("");
					}					
					if((ke.getKeyCode()==KeyEvent.VK_SPACE)){
						JOptionPane.showMessageDialog(null,"No blank value allowed","RMS",JOptionPane.INFORMATION_MESSAGE);
						setText(getText().trim());
					}					
					if((ke.getKeyCode()==KeyEvent.VK_ENTER)){
						table.changeSelection(table.getSelectedRow(), 4, false, false);
					}
					if((ke.getKeyCode()==KeyEvent.VK_ALT || ke.getKeyCode()==KeyEvent.VK_N)){
						table.changeSelection(table.getSelectedRow(), 4, false, false);
					}					
				}// EOF keyReleased()       	
			}); //EOF KeyListener Adapter inner Class
		} // EOF TextFieldEditor constructor..
		
        public boolean isFirstCell() {
            int rows = table.getRowCount();
            int column = 0;
            int selectedRow = table.getSelectedRow();
            int selectedCol = table.getSelectedColumn();
            if(rows == (selectedRow+1) && table.getSelectedColumn()==4){
	            return true;
	        }else{
            		return false;
            }
        }
        public boolean isFirstColumnBlank()
        {
            int rows = table.getRowCount();
            boolean flag=false;
            for(int i=0; i<rows; i++){
            	if(table.getValueAt(i, 0).equals("")){
            		flag=true;
            		productColBlank=i;
            		break;
            	}
            	else{
            		flag=false;
            	}
           }
           return flag;
        }// EOF isFirstColumnBlank()	

		public void setQuantityTotalPriceMrp(){
			double tempquantity=0.00f;
			if(quantityValue.equals("")){
				tempquantity=0.00f;
				setTotalPrice(Double.toString(tempquantity));
			}
			setText(quantityValue);
			if(!quantityValue.equals("")){
				setTotalPrice(quantityValue);
			}
			setOverallTotal();
		}
        
		public void setTotalPrice(String quantityValue){
			try{
				String priceValueStr="",priceMessage="Price is Blank";;
				double quantityVal=0.00f;
				double priceValue=0.00f, totalRate=0.00f;
				priceValueStr = (String)table.getValueAt(table.getSelectedRow(), 3);
				if(priceValueStr.equals("")){
					JOptionPane.showMessageDialog(null,priceMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
				}else	priceValue = Double.parseDouble(priceValueStr);
				if(!getText().equals("")){
					quantityVal = Double.parseDouble(quantityValue); 								
					totalRate = quantityVal * priceValue;
					table.setValueAt(Double.toString(totalRate), table.getSelectedRow(), 5);
				}else if(getText().equals("")){
					totalRate = 0.0f;
					table.setValueAt(Double.toString(totalRate), table.getSelectedRow(), 5);
				}
			}catch(NumberFormatException nfe){
				nfe.printStackTrace();
				System.out.println("Exception Occured in setTotalPrice"+nfe);
			}	
			catch(StackOverflowError soe){
				System.out.println("Error Occured in setTotalPrice"+soe);
			}
		}
		
		public void setOverallTotal(){
			try{
				int rowCount = table.getRowCount(),col = 4;
				double totalCost = 0.00f, totalmrpCost = 0.00f, savCost= 0.00f;
				Object str = null, str1=null,sav=null;
				for(int i=0; i<rowCount; i++){
					Object total =(table.getValueAt(i, 5));
					Object totalmrp =(table.getValueAt(i, 6));
					if(total!=""){
						double totalValue = Double.parseDouble(total.toString());
						totalCost += totalValue;
					} 
					if(totalmrp!=""){
						double totalmrpValue = Double.parseDouble(total.toString());
						totalmrpCost += totalmrpValue;
					} 
				}
				savCost = totalmrpCost - totalCost;
				str = Double.toString(totalCost);
				totalField.setText(str.toString());
				totalField.setForeground(Color.blue);
				str1 = Double.toString(totalmrpCost);
				totalMrpFld.setText(str1.toString());
				totalMrpFld.setForeground(Color.blue);
				sav = Double.toString(savCost);
				savingFld.setText(sav.toString());
				savingFld.setForeground(Color.blue);				
			}catch(NumberFormatException nfe){
				System.out.println("Error Occured in setOverallTotal "+nfe);
			}
		}
	} //EOF TextFieldEditor Class		   	
	
	public boolean checkRowBeforeAdding(){
		boolean flag=false;
		String quantityStrValue="",productStrValue="";
		try{
			int quantityVal=0;
			int rowCount = table.getRowCount();
			for(int r=0; r<rowCount; r++){	
				quantityStrValue =(table.getValueAt(r, 4)).toString();
				productStrValue=table.getValueAt(r, 0).toString();
				if(!quantityStrValue.equals("") && quantityStrValue.equals("0")){
					quantityVal = Integer.parseInt(quantityStrValue.toString());
				}
				if( productStrValue.equals("")){
					flag=true;
					JOptionPane.showMessageDialog(null,"Product Name is blank","RMS",JOptionPane.INFORMATION_MESSAGE);
					table.changeSelection(table.getSelectedRow(), 0, false, false);
					return flag;
				}else if(table.getValueAt(r, 4).equals("") || table.getValueAt(r, 4).equals("0")){	
					flag=true;				
					JOptionPane.showMessageDialog(null,"Quantity is blank or zero","RMS",JOptionPane.INFORMATION_MESSAGE);
					table.changeSelection(table.getSelectedRow(), 4, false, false);
					return flag;
				}				
			}// EOF For loop
		}catch(NumberFormatException nfe){
			System.out.println("Exception in checkRowBeforeAdding"+nfe);
		}
		return flag;
	}   	
}
---------------------------------------------------------------
/**
 * @author: Anup Bansode 
 * Work started on 07/12/2007, Friday
 * This program works for JApplet.
 * Modification done without using JFrame. Also added dropdown menu.(on 10th Dec)
 * (Continued..)AutoComplete is working fine as per required. Tab key is also working
 * properly and F2 Problem also solved. ALso there are no problems with 
 * UP and DOWN Arrow Key. But pressing backspace still hangs the Applet.
 * Recomended on (28-12-2007) Wednesday as most of requirement met
 * Till 2/01/2008 Wednesday
 *  
*/

import javax.swing.*;
import javax.swing.event.CellEditorListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.text.JTextComponent;



import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.*;
import java.sql.*;
import java.util.EventObject;
import java.util.Vector;
import netscape.javascript.JSObject; 
import netscape.javascript.JSException;
/*<apple code = "RetailSys" width=300 height=300>
<applet>
*/

public class CustomerOrderApplet extends JApplet implements ActionListener, TableModelListener{
	
	JSObject win;
	JTable table;
	Vector rows,columns;
	DefaultTableModel tabModel;
	JScrollPane scrollPane;
	JButton addButton,deleteButton,saveButton,cancelButton,clearButton;
	JCheckBox checkBox;
	JComboBox paymentCombo; 
	JLabel totalPrice,totalField,totalMrp,totalItems,pickUp,deliver,paymentLbl,savingLbl,
		   totalItemFld,pickUpFld,deliverFld,totalMrpFld,savingFld,emptyFld,emptyFld1;
	JPanel tablePanel,innerbuttonPanel,buttonPanel,mainPanel,labelPanel1,labelPanel2,
		   labelPanel3,labelPanel4,emptyPanel,emptyPanel1,wholeLabelPanel;
	JTextComponent editor;
	Connection con=null;
	ResultSet rs,rs1,rs2,rs3,rs4; 
	Statement getValstmt,getItemstmt,getValstmt1,getValstmt2,stmt;	
	String productValue,setProdName="", customerCode="", item_code="", pay_type="", p_code="";
	String user="", backPage="",disRemark="";
	long pickup_ind=0;
	Object objTemp=null;
	Vector productArray = new Vector();
	int itemCount = 0,pickValue=0, deliverCount = 0, max=0,pickUpCnt=0;
	
	double item_mrp=0.00f;
	ManageOrderFile mo = new ManageOrderFile("jdbc/js");
	ComboBoxEditor cme;
	public void init(){
		try{
				
			customerCode = getParameter("customerCode");
			user = getParameter("user");
			backPage = getParameter("backPage");
			initialize();
				SwingUtilities.invokeAndWait(new Runnable(){
					public void run(){
						makeGUI();
						}
					}
				);
			}
			catch(Exception e){
				System.out.println("Exception occured in Init"+e);
			}
	} //EOF intit()
	public void assignVar(String custCode, String user1, String backPage1){
		customerCode = custCode;
		System.out.println("IN "+customerCode);
		user = user1;
		System.out.println("IN "+user);
		backPage = backPage1;
		System.out.println("IN "+backPage);
	}
	public void start(){
		
	}
	public void  initialize(){
		try{
			String dburl = "jdbc:mysql://192.168.1.104/js";
			String dbuser = "dev";
			String dbpassword = "";
			String dbclassName = "com.mysql.jdbc.Driver";
			Class.forName(dbclassName);
			con = DriverManager.getConnection(dburl, dbuser, dbpassword);
			getValstmt = con.createStatement();
			getValstmt1 = con.createStatement();
			getValstmt2 = con.createStatement();	
			stmt = con.createStatement();			
			
		}catch (Exception e){
			System.out.println("Error occurred in Database Connection " + e);			
		}
			
	}
	
	public void closeAll(){
		try{
			getValstmt.close();
			getValstmt1.close();
			getValstmt2.close();			
			stmt.close();
			con.close();
		}
		catch(Exception e)
		{
	        e.getMessage();
			e.printStackTrace();
	    }	
	}
	
	
	public void makeGUI(){
		
		UIManager.LookAndFeelInfo[] lfi=UIManager.getInstalledLookAndFeels();
		rows=new Vector();
		columns= new Vector();
		String[] columnNames = { "Product","Check", "Weight","Price","Quantity","Total Price","MRP","Discount","Remark"};
		addColumns(columnNames);		
		tabModel = new DefaultTableModel();		
		tabModel.setDataVector(rows,columns);	
		setTabFocus();
		table.setCellSelectionEnabled(true);		
		scrollPane = new JScrollPane(table);	
	    TableColumnModel tcm = table.getColumnModel();
	    TableColumn colwithCombo = tcm.getColumn(0);		
	    TableColumn colwithCheck = tcm.getColumn(1);
	    TableColumn colwithTextField = tcm.getColumn(4);
	    cme=new ComboBoxEditor();
		colwithCombo.setCellEditor(cme);
		//Adding KeyListener for inserting new Row
		table.addKeyListener(new MyKeyListener(table));

		//	Add CheckBox in cell
		colwithCheck.setCellEditor(new DefaultCellEditor(new CheckBoxEditor()));		
		CheckBoxCellRendrer chkRenderer = new CheckBoxCellRendrer();
		colwithCheck.setCellRenderer(chkRenderer);				
				
//		Add TextField in cell
		colwithTextField.setCellEditor(new DefaultCellEditor(new TextFieldEditor()));
		
		setUpProductColumn(colwithCombo,colwithCheck);
		
		table.getModel().addTableModelListener(this);
		//Add combonents to table
		addComponents();
		colwithCombo.setPreferredWidth( 250 );
		colwithCombo.setMinWidth( 150 );
		colwithCombo.setMaxWidth( 250 );

	}//EOF retail()  

	// Table Columns
	public void addColumns(String[] colName){
		for(int i=0;i<colName.length;i++)
			columns.addElement((String) colName[i]);
	}
		
	// Add Row
	public void addRow(){ 
		Vector r=new Vector();
		r=addBlankElement();
		rows.addElement(r);
		table.addNotify();	
        int rowcnt = tabModel.getRowCount(); 
        int row = table.getRowCount() - 1;
		table.changeSelection(row, 0, false, false);
		table.requestFocusInWindow();
		table.requestFocus();
        //setSelectedRow(itemCount);
        //setSelectedCol(0);
        cme.checkBlankRows();
        cme.removeAllItems();
        
	}
			
	 public Vector addBlankElement(){
		Vector t = new Vector();
		t.addElement((String) "");
		t.addElement(new Boolean(false));		
		t.addElement((String) "");
		t.addElement((String) "");
		t.addElement((String) "");
		t.addElement((String) "");	
		t.addElement((String) "");
		t.addElement((String) "");	
		t.addElement((String) "");	
		return t;
	}
			
	void deleteRow(int index){
		if(index!=-1)//At least one Row in Table
		{ 
			rows.removeElementAt(index);
			table.addNotify();
		}	
	}//Delete Row
	
	 public void setSelectedRow(int row) {
	        if(row == -1)
	             return;
	        else {
	        	table.setRowSelectionInterval(row, row);
	        }
	   }
	  
	   public void setSelectedCol(int col) {
	        if(col == -1)
	             return;
	        else {
	             table.setColumnSelectionInterval(col, col);
	        }
	   }
	public void setTabFocus(){
        table = new JTable(tabModel)
        {
            public boolean isCellEditable(int row, int column)
            {             	
            	if(column ==0 || column ==4 || column ==1 || column ==8)
            		return true;
            	else
            		return false;
            }
 
            public void changeSelection(final int row, final int column, boolean toggle, boolean extend)
            {
                super.changeSelection(row, column, toggle, extend);
                if (editCellAt(row, column))
                    getEditorComponent().requestFocusInWindow();               
            } 
//-------------------------------------------------------------------------------------------------            
/*						Code for CheckBox																				 */            
//-------------------------------------------------------------------------------------------------            
           
            
          
        };

	}

	
	public void addComponents(){
		buttonPanel = new JPanel();
		innerbuttonPanel = new JPanel();
		buttonPanel.setLayout(new GridLayout(2,1,0,0));
		
		addButton = new JButton("Add New Row");
		clearButton = new JButton("Clear");
		deleteButton = new JButton("Delete");
		saveButton = new JButton("Save & Print");
		cancelButton = new JButton("Cancel");
		addButton.setMnemonic(KeyEvent.VK_N);
		clearButton.setMnemonic(KeyEvent.VK_C);
		deleteButton.setMnemonic(KeyEvent.VK_D);
		saveButton.setMnemonic(KeyEvent.VK_S);
		saveButton.setMnemonic(KeyEvent.VK_ENTER);
		cancelButton.setMnemonic(KeyEvent.VK_B);
		wholeLabelPanel = new JPanel(new FlowLayout(0,0,0));
		labelPanel1 = new JPanel(new GridLayout(3,1,0,0));
		emptyPanel = new JPanel(new GridLayout(3,1,0,0));
		labelPanel2 = new JPanel(new GridLayout(3,1,0,0));
		labelPanel3 = new JPanel(new GridLayout(2,1,0,0));
		emptyPanel1 = new JPanel(new GridLayout(3,1,0,0));
		labelPanel4 = new JPanel(new GridLayout(3,1,0,0));
		
		totalItems = new JLabel("Total Items :");
		totalItemFld =  new JLabel();
		pickUp = new JLabel("PickUp         :");
		pickUpFld =  new JLabel();
		deliver = new JLabel("Deliver         :");
		deliverFld =  new JLabel();
		
		emptyFld = new JLabel("                                  ");
		
		paymentLbl = new JLabel("Payment :");
		
		paymentCombo = new JComboBox();	
		paymentCombo.addItem("Select Type");
		try{
			stmt = con.createStatement();
			rs4 = stmt.executeQuery("select payment_type_desc from payment_type");
			while (rs4.next()) {
				paymentCombo.addItem(rs4.getString(1));
			}
			rs4.close();
			stmt.close();
		}catch(Exception e){
			System.out.println("Exception in loading payment type"+e);
		}
		emptyFld1 = new JLabel("  ");
		
		totalPrice = new JLabel("Total Price :");
		totalField = new JLabel();
		totalMrp = new JLabel("Total MRP  :");
		totalMrpFld =  new JLabel();				
		savingLbl =  new JLabel("saving         :");
		savingFld =  new JLabel();
		
		labelPanel1.add(totalItems);
		labelPanel1.add(totalItemFld);
	    labelPanel1.add(pickUp);
	    labelPanel1.add(pickUpFld);
	    labelPanel1.add(deliver);
	    labelPanel1.add(deliverFld);
	    
	    emptyPanel.add(emptyFld); 
	    
		labelPanel2.add(paymentLbl);
		
		labelPanel3.add(paymentCombo);
		
		emptyPanel1.add(emptyFld1); 
		
		labelPanel4.add(totalPrice);
	    labelPanel4.add(totalField);
	    labelPanel4.add(totalMrp);
	    labelPanel4.add(totalMrpFld);
	    labelPanel4.add(savingLbl);
	    labelPanel4.add(savingFld);
	    
	    wholeLabelPanel.add(labelPanel1);
	    wholeLabelPanel.add(emptyPanel);
	    wholeLabelPanel.add(labelPanel2);
	    wholeLabelPanel.add(labelPanel3);
	    wholeLabelPanel.add(emptyPanel1);
	    wholeLabelPanel.add(labelPanel4);

		innerbuttonPanel.add(addButton);
		innerbuttonPanel.add(saveButton);	
		innerbuttonPanel.add(clearButton);
		innerbuttonPanel.add(deleteButton);		
		innerbuttonPanel.add(cancelButton);
	
		buttonPanel.add(wholeLabelPanel);
		buttonPanel.add(innerbuttonPanel);
	
		addButton.addActionListener(this);
		clearButton.addActionListener(this);
		deleteButton.addActionListener(this);
		saveButton.addActionListener(this);
		cancelButton.addActionListener(this);

		mainPanel=new JPanel();
		tablePanel=new JPanel();

		mainPanel.setLayout(new BorderLayout());
		mainPanel.add("Center",scrollPane);
		mainPanel.add("South",buttonPanel);
		tablePanel.setBackground(Color.white);
		buttonPanel.setBackground(Color.white);
		table.getParent().setBackground(Color.white);
		getContentPane().add(mainPanel);
	}
	
	public void setUpProductColumn(TableColumn productColumn , TableColumn checkColumn){
		//Set up the editor for the ProductName cells.
		try{			
			String query="SELECT DISTINCT item_name from item_master order by item_name";			
			rs = getValstmt.executeQuery(query);			
			while(rs.next()){
				productArray.add(rs.getString(1));
			}	
			rs.close();		
				
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setToolTipText("Click the Product to see a list of choices");
			productColumn.setCellRenderer(renderer);
		  }//EOF Try
		catch(Exception e){

			System.out.println("Could not connect to database"+e);

		}// catch

	}//EOF setUpProductColumn
			
//	This method is to implement the change in table cells
	public void tableChanged(javax.swing.event.TableModelEvent source){
		switch (source.getType())
		{
			case TableModelEvent.UPDATE:
				//System.out.println("Cell Edited==>>"+table.getValueAt(table.getEditingRow(),table.getEditingColumn()));
		}
		/*		if(source.getColumn()==1){
			//System.out.println("Checkbox value is"+table.getValueAt(table.getSelectedRow(),1));
			int checkQuantityFlag=0;
			checkboxFlag++;
			checkQuantityFlag =  checkQuantity();		
			if(checkQuantityFlag == 1 ){
				setQuantityFlag++;
				//System.out.println("checkQuantityFlag is == "+checkQuantityFlag+"setFlag"+setQuantityFlag+"checkboxFlag="+checkboxFlag);
				if(setQuantityFlag == 1){
					table.setValueAt(false, table.getSelectedRow(), 1);
					setQuantityFlag=0;
					System.out.println("Checkbox assigned to false");					
				}
			}
			else{
				System.out.println("checkQuantityFlag is == "+checkQuantityFlag);
			}
			
		}// EOF col 1	
*/		      						

		if(source.getColumn()==0){
			//System.out.println("Checking product column redundancy");
			//checkSelctedProduct();
		}
		
		if(source.getColumn()==4){
			//setTotalPrice();
			//setOverallTotal();
		}
		
		// Set pickup label
		if(source.getColumn()==1){
			pickValue = 0;
    		int rowCount= table.getRowCount();
    		//System.out.println("RowCount"+rowCount);
    		if(rowCount>0){
    			for(int pickYes=0; pickYes<rowCount; pickYes++ ){
    				Object obj=table.getValueAt(pickYes, 1);
    				if(obj.toString()=="true"){
    					pickValue++;
    				}
    			}
    		}
    		setPickupLabel(pickValue);
		}// EOF col 1			


	}//Table Changed Method			
	
	public void actionPerformed(ActionEvent source)
	{try{
		if (source.getSource()==(JButton) addButton)
		{		
			addRow();	
			itemCount++;
			deliverCount= itemCount-pickValue;
			totalItemFld.setText(Integer.toString(itemCount));
			totalItemFld.setForeground(Color.blue);
			deliverFld.setText(Integer.toString(deliverCount));
			deliverFld.setForeground(Color.blue);
			//System.out.println("In actionPerformed for addButton "+itemCount);
		}
		else if (source.getSource()==(JButton) deleteButton)
		{
			int totalCost = 0;			
			int totalmrpCost = 0;
			
			deleteRow(table.getSelectedRow());
			if(itemCount>0 && table.getSelectedRow()!=-1 )
				{
				//System.out.println("delete count"+itemCount);
				itemCount--;	
				deliverCount= itemCount-pickValue;
				totalItemFld.setText(Integer.toString(itemCount));
				deliverFld.setText(Integer.toString(deliverCount));
				//----pickUpFld.setText(Integer.toString(pickUpCnt));
				TextFieldEditor tf = new TextFieldEditor();
				tf.setOverallTotal();
			}			
			//System.out.println("In actionPerformed for deleteButton "+itemCount);
		}
		else if (source.getSource()==(JButton) saveButton)
		{
			String ans = checkSelctedProduct();
			if(ans.equals("1")){
				String ans1 = checkPaymentType();
				if(ans1.equals("1")){		
					System.out.println("For saveButtton");
					// calculate order number		
					max=mo.getOrderNum();
					String status = mo.getStatus("SUBMITTED");
					
					int totalItems = table.getRowCount();
					totalMrpFld.getText();
					savingFld.getText();				
					
					double totOrderValue = Double.parseDouble(totalField.getText());
					double totMRPValue = Double.parseDouble(totalMrpFld.getText());
					double totDisValue = Double.parseDouble(savingFld.getText());					
					
					try{
						String query2="SELECT payment_type_code from payment_type where payment_type_desc='"+pay_type+"'";
						System.out.println(query2);
						rs3 = getValstmt2.executeQuery(query2);			
						while(rs3.next()){
							 p_code = rs3.getString(1);
						}	
						rs3.close();						
					}catch(Exception e){
						System.out.println("Error in Payment_code "+e);
					}			
					System.out.println("customerCode: "+customerCode);
					System.out.println("user: "+user);
					System.out.println("back Page:"+backPage);
					mo.addOrders(max, customerCode, totalItems, pickValue, totOrderValue, totMRPValue, totDisValue, user, p_code, status);
					// add Order Details
					for(int i=0; i< table.getRowCount(); i++){						
						try{
							String query1="SELECT item_code from item_master where item_name='"+table.getValueAt(i, 0)+"'";			
							rs2 = getValstmt1.executeQuery(query1);			
							while(rs2.next()){
								 item_code = rs2.getString(1);
							}
							rs2.close();
							
						}catch(Exception e){
							System.out.println("Error in item_code "+e);
						}	
						
						if(table.getValueAt(i, 1).toString()== "true")  pickup_ind = 1;	
						else pickup_ind = 0;
						
						double itemRate= Double.parseDouble((String)table.getValueAt(i, 3));
						double itemQty = Double.parseDouble((String) table.getValueAt(i, 4));
						double totItemPrice= Double.parseDouble((String)table.getValueAt(i, 5));	
						double itemMRP= Double.parseDouble((String)table.getValueAt(i, 6));
						
						double totItemDisAmt= Double.parseDouble((String)table.getValueAt(i, 7));
						
						if(table.getValueAt(i, 8).toString() != "0.00"){
							
							disRemark = totItemDisAmt+ "(@Rs " + totItemPrice +" per " + itemQty+ " QTYs)";
						}else {
							 disRemark = (String)table.getValueAt(i, 8);	
						}
						mo.addOrderDetail(max, item_code, itemRate, itemQty, totItemPrice, totItemDisAmt, disRemark, itemMRP, i, pickup_ind);
						deleteRow(i);
						System.out.println("Delete Row:"+ i);
					}					
				 	try{		
				 		win = JSObject.getWindow(this);	
				 		if(!backPage.equals("create_newCustomer.jsp")) backPage="cust_orderBill.jsp";
				 		//String msg = ;
				 		win.eval("document.myform.action='print_order1.jsp?backPage="+backPage+"&orderNo=" + max +"'");
				 		//document.myform.action="create_newCustomerForm.jsp?backPage=customer_detailsForm.jsp&custnm="+custnm+"&phno="+phno+"&build="+build+"&block="+block+"&buildno="+buildno+"&add1="+add1+"&add2="+add2+"&wing="+wing+"&area="+area+"&station="+station+"";
				 		win.eval("document.myform.target='_blank'");
				 		win.eval( "window.open(myform.action,myform.target,'fullscreen=yes')");
				        
				       //  win.eval("document.myform.submit();");
					}
					catch(JSException e){
						String error="Not get Win Object";
					}
				}
			}

		}
		else if (source.getSource()==(JButton) cancelButton)
		{
			try{
				win = JSObject.getWindow(this);
				win.call("showMsg",null);
		        win.eval("document.myform.submit()");
			}
			catch(JSException e){
				String error="Not get Win Object";
			}	
			//System.out.println("For cancelButton");
		}
		else if (source.getSource()==(JButton) clearButton)
		{
			try{
				win = JSObject.getWindow(this);
				win.eval("window.location.reload(false)");
				win.eval("document.myform.submit()");
			}
			catch(JSException e){
				String error="Not get Win Object";
			}	
			//System.out.println("For cancelButton");
		}
	}
	catch(ArrayIndexOutOfBoundsException aie){
		System.out.println("Error occured in actionPerformed "+ aie);
	}

	}// EOF ActionList
	
	public void setCellValues(String productName){		
		try{
			getItemstmt = con.createStatement();
			String insertIntoCellQuery = "SELECT item_weight,item_rate,deal_on_qty,deal_amount,item_mrp FROM item_master where item_name='"+productName+"'";
			rs1 = getItemstmt.executeQuery(insertIntoCellQuery);
			if(rs1.next()){
				selectCell(table.getSelectedRow(),table.getSelectedColumn());
				table.setValueAt(setProdName, table.getSelectedRow(), 0);
				//table.setValueAt(new Boolean(false), table.getSelectedRow(), 1);
				table.setValueAt(rs1.getString(1), table.getSelectedRow(), 2);
				table.setValueAt(rs1.getString(2), table.getSelectedRow(), 3);
				item_mrp = rs1.getDouble(5);
				table.setValueAt("0", table.getSelectedRow(), 4);
				table.setValueAt("0", table.getSelectedRow(), 5);
				table.setValueAt(rs1.getString(5), table.getSelectedRow(), 6);
				table.setValueAt("0", table.getSelectedRow(), 7);
				table.setValueAt("", table.getSelectedRow(), 8);
			}
			
		}
		catch(Exception se){
			System.out.println("Exception Occured while inserting data in table cells"+se);
		}
     }
    
	
	public String checkSelctedProduct(){
		try{
			//System.out.println("In checkSelctedProduct");
			Vector vec = new Vector();
			for(int i=0; i< table.getRowCount(); i++){
					vec.add(table.getValueAt(i, 0));
			}
			String message = "Duplicate entry for:";
			int rowCount = table.getRowCount(),flagCount=0;
			String str1,str2,matchString="";
			for(int row = 0; row < rowCount; row++){
				 str1 = (String)table.getValueAt(row, 0);
					if(flagCount>0){					
						message = message+matchString;
						JOptionPane.showMessageDialog(null,message,"RMS",JOptionPane.INFORMATION_MESSAGE);
						return("0");					
					}
				for(int j = 0;  j< vec.size(); j++){
					if(row!=j){
						str2 = (String)table.getValueAt(j, 0);
						if(str1.equalsIgnoreCase(str2)){
							flagCount++;
							matchString = str1;
							//System.out.println("SAME ELEMENTS"+"\tstr1="+str1+"\tstr1"+str2);
							//System.out.println("At position =>"+j+"Flag Value =>"+flagCount);
							break;
						}
					}				
				}
			}
			return("1");
		}
		catch(ArrayIndexOutOfBoundsException aie){
			System.out.println("Exception in checkSelctedProduct" +aie);
			return("0");
		}
	}
	
	public int checkQuantity(){
	try{
		String quantityVal =(String)(table.getValueAt(table.getSelectedRow(), 4));

		if(quantityVal.equals("")){
			//System.out.println("For checking blank ");
			String  message="Quantity cannot be blank";
			JOptionPane.showMessageDialog(null,message,"RMS",JOptionPane.INFORMATION_MESSAGE);
			System.out.println("Returning one in checkQuantity()");
			return 1;
		}
	}
	catch(NumberFormatException nfe){
		System.out.println("Error while editing cell"+nfe);
	}
	System.out.println("Returning zero in checkQuantity()");
		return 0;
}

	
	public String checkPaymentType(){
		String message = "Please select payment term";
		String noItemsMsg = "No items Selected";
		if(paymentCombo.getSelectedItem() == "Select Type" && table.getRowCount()>0){
			JOptionPane.showMessageDialog(null,message,"RMS",JOptionPane.INFORMATION_MESSAGE);
			return("0");
		}else{
			pay_type = (String)paymentCombo.getSelectedItem();
			
		}
		if(table.getRowCount()==0){
			JOptionPane.showMessageDialog(null,noItemsMsg,"RMS",JOptionPane.INFORMATION_MESSAGE);
			return("0");
		}
		return("1");
		
			
	}
	
	public void setPickupLabel(int pickValue){		
		objTemp=Integer.toString(pickValue);
		pickUpFld.setText(objTemp.toString());
		pickUpFld.setForeground(Color.BLUE);
		deliverCount= itemCount-pickValue;
		System.out.println(deliverCount);
		deliverFld.setText(Integer.toString(deliverCount));
		deliverFld.setForeground(Color.blue);
	}
	
	public int checkBlankValue(){
		try{
			Object productVal,quantityVal,weightVal,priceVal=null;
			String tempQualStr="";			
			String  zeroMessage="Quantity cannot be zero";
			String  blankMessage="Quantity cannot be blank";
			String  noProdSelectedMessage="Product is blank";
			int val=0;

		    productVal =table.getValueAt(table.getSelectedRow(), 0);
			quantityVal =table.getValueAt(table.getSelectedRow(), 4);
			weightVal =table.getValueAt(table.getSelectedRow(), 2);
			priceVal = table.getValueAt(table.getSelectedRow(), 3);
			tempQualStr = (String)quantityVal;

			if(!productVal.equals("")){
				val = Integer.parseInt(tempQualStr); 
			}
			if(productVal.equals("")){
				System.out.println("For checking blank Product");	
				JOptionPane.showMessageDialog(null,noProdSelectedMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
				return 1;
			}
			else if(quantityVal.equals("")){
				System.out.println("For checking blank ");	
				JOptionPane.showMessageDialog(null,blankMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
				return 1;
			}	
			else if(quantityVal!="" && (val ==0)){
				JOptionPane.showMessageDialog(null,zeroMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
				return 1;
			}
				
			else if(weightVal.equals("") && priceVal.equals("")){
				System.out.println("Validating weight price ");
				String  wpMessage="Weight and Price cannot be blank";
				JOptionPane.showMessageDialog(null,wpMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
				return 1;
			}
			else if( weightVal.equals("")){
				System.out.println("Validating weight price ");
				String  wMessage="Weight cannot be blank";
				JOptionPane.showMessageDialog(null,wMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
				return 1;
			}

			else if(priceVal.equals("")){
				System.out.println("Validating weight price ");
				String  pMessage="Price cannot be blank";
				JOptionPane.showMessageDialog(null,pMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
				return 1;
			}
		}
		catch(NumberFormatException nfe){
			System.out.println("Exception occured in checkBlankValue"+nfe);
		}	
		return 0;
	}

	public void selectCell(int row,int col)
	{
		if(row!=-1 && col !=-1)            
		{
			table.setRowSelectionInterval(row,row);
			table.setColumnSelectionInterval(col,col);
		}
	}//EOF selecCell()


//------------------------------------------------------------------------------------
	/*    ComboBox code   	*/
//------------------------------------------------------------------------------------	
	public class ComboBoxEditor extends JComboBox implements TableCellEditor{

		  JTextComponent editor;

		  public ComboBoxEditor() {
		    super();
		    setEditable(true);
		    setEnabled(true);
		    editor = (JTextComponent) getEditor().getEditorComponent();
		    editor.addMouseListener(new MouseAdapter(){

		    	public void mouseReleased(MouseEvent me) {
	    			if(table.getSelectedColumn()==0){
	    				System.out.println("Released selected column is zero"+"row "+table.getSelectedRow()+"col"+table.getSelectedColumn());
	    				editor.setText(table.getValueAt(table.getSelectedRow(), table.getSelectedColumn()).toString());
	    			}
		    	} 
		    	
		    	public void mousePressed(MouseEvent me) {
		    		System.out.println("In MousePressed");
		    		setProdName = editor.getText();
		    		setCellValues(setProdName);
		    		checkBlankRows();
		    	}
		    });
		    editor.addKeyListener(new KeyAdapter(){
	    		String temp="";
	    		int rowCount=0;

	        	public void keyReleased(KeyEvent ke){        	

	        		if((ke.getKeyCode()==KeyEvent.VK_DOWN)){
	        			setPopupVisible(true);
	        		}
	        		if ((ke.getKeyCode() == KeyEvent.VK_ESCAPE)){
	        			if(isPopupVisible())
	        				setPopupVisible(false);        				
	        		}
	        		
	        		if ((ke.getKeyCode() == KeyEvent.VK_SHIFT) || ke.getKeyCode() == KeyEvent.VK_TAB){
	        			//System.out.println("In Shift + TAB"); 
	        			checkBlankRows();
	        			if(table.getSelectedColumn()==0){
	        				editor.setText(table.getValueAt(table.getSelectedRow(), table.getSelectedColumn()).toString());
	        			}
	        		}

	    			if(editor.getText().length()<3 && ke.getKeyCode() == KeyEvent.VK_ENTER){
	    					editor.setText(getItemAt(0).toString());
	    			} 
	        		
	        		if (ke.getKeyCode() == KeyEvent.VK_ENTER){
	        			setProdName = editor.getText();
	        			if(table.getRowCount()>0)
	        				setCellValues(setProdName);     			
	        		}
	        		
	        		if(!(ke.getKeyCode()==KeyEvent.VK_DOWN) && !(ke.getKeyCode()==KeyEvent.VK_UP)
	        			&& !(ke.getKeyCode()==KeyEvent.VK_LEFT) && !(ke.getKeyCode()==KeyEvent.VK_RIGHT)
	        			&& !(ke.getKeyCode()==KeyEvent.VK_ENTER) && !(ke.getKeyCode()==KeyEvent.VK_TAB)
	        			&& !(ke.getKeyCode()==KeyEvent.VK_SHIFT) && !(ke.getKeyCode()==KeyEvent.VK_HOME)
	        			&& !(ke.getKeyCode()==KeyEvent.VK_PAGE_UP) && !(ke.getKeyCode()==KeyEvent.VK_PAGE_DOWN)) {
	        			try{
	        				temp = editor.getText();
	        				while(getItemCount()!=0)
	        					removeItemAt(0);
	        				
	        				String str="";
	        				
	        				if (temp.trim().length()>0){
		        				for(int i=0; i<productArray.size(); i++){
		        					str = productArray.get(i).toString();
		        					if(str.toUpperCase().startsWith(temp.toUpperCase())){
		        						addItem(str);
		        	    				
		        					}
		        				}
	        				}
	        				setProdName = temp;        				
	        				if(setProdName == ""){
	        					hidePopup();
	        				}
	        				else
	        					showPopup();
	        				//This statement is important for the working of BackSpace
	        				editor.setText(temp);
	        			}
	        			catch(Exception e){
	        				System.out.println("Error occured in KeyReleased"+e);
	        			}
	        		}
	        	
	        	}	        	
	        });	    
		  } // EOF Combo Constructor	  
		  

		  public void addCellEditorListener(CellEditorListener listener) {
		   // listenerList.add(CellEditorListener.class, listener);
		   // System.out.println("----In addCellEditorListener----");
		  }

		  public void removeCellEditorListener(CellEditorListener listener) {
		    //listenerList.remove(CellEditorListener.class, listener);
		    //System.out.println("----In removeCellEditorListener----");
		  }

		  public void fireEditingStopped() {
		    //System.out.println("fireEditingStopped called ");
		  }

		  public void fireEditingCanceled() {
			 //System.out.println("----In fireEditingCanceled----");

		  }

		  public void cancelCellEditing() {
		    //System.out.println("cancelCellEditing called ");
		    fireEditingCanceled();
		  }

		  public boolean stopCellEditing() {
		   // System.out.println("stopCellEditing called ");
		   // fireEditingStopped();
		    return true;
		  }

		  public boolean isCellEditable(EventObject event) {
			//System.out.println("----In isCellEditable----");
		    return true;
		  }

		  public boolean shouldSelectCell(EventObject event) {
			  //System.out.println("----In shouldSelectCell----");
		    return true;
		  }

		  public Object getCellEditorValue() {
		   // System.out.println("getCellEditorValue called returning vlaue: " + newValue);
		    return this;
		  }

		  public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected,
		      int row, int column) {
		    return this;
		  }
		  
		  public void checkBlankRows(){
			  int rowCount=0;
				rowCount=table.getRowCount();
					for(int row=0; row<rowCount; row++){
						if(table.getValueAt(row, 0)=="" || table.getValueAt(row, 2)=="" &&
							table.getValueAt(row, 3)=="" && table.getValueAt(row, 4)==""&&
							table.getValueAt(row, 5)=="" && table.getValueAt(row, 6)=="" ){
							for(int itemCount=0; itemCount<getItemCount(); itemCount++){
								removeAllItems(); 
								break;
							}
						}
					}         			
					for(int row=0; row<rowCount; row++){
						if(!(table.getValueAt(row, 0)=="" || table.getValueAt(row, 2)=="" &&
							table.getValueAt(row, 3)=="" && table.getValueAt(row, 4)==""&&
							table.getValueAt(row, 5)=="" && table.getValueAt(row, 6)=="" )){
							//table.setValueAt(null, row, 0);
							for(int itemCount=0; itemCount<getItemCount(); itemCount++){
								removeAllItems();
								break;
							}
						}
					}
			} // EOF checkBlankRows

		  
		}// EOF ComboBoxEditor
		
			
//	-----------------------------------------------------------------------------------
	/* CheckBox Class Code*/
//-----------------------------------------------------------------------------------	
	public class CheckBoxEditor extends JCheckBox {	

		Object objTemp=null;
		int spaceCount=0,pickValue=0;
		public CheckBoxEditor(){
			super();
			setEnabled(true);
			//setVisible(true);
			requestFocus();
			setHorizontalAlignment(JLabel.CENTER);
			setBackground(Color.LIGHT_GRAY);
			System.out.println("In CheckBox Constructor..");		    			

		addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent event) {				
				JCheckBox cb = (JCheckBox)event.getSource();
			    Object item = event.getItem();  
		
			    if(event.getStateChange()==ItemEvent.SELECTED){
		    		int rowCount= table.getRowCount();
		    		pickUpCnt++;
		    		int checkFlag=0;
		    		
				    checkFlag = checkBlankValue();
					if(checkFlag == 1){				
						System.out.println("checkFlag is == "+checkFlag);
							//table.setValueAt(false, table.getSelectedRow(), 1);
						setSelected(false);
							System.out.println("Checkbox assigned to false");					
					}
				    else if(checkFlag ==0){
				    	System.out.println("Flag is "+checkFlag);
				    }
		    		System.out.println("In SELECTED pickUpCnt==>"+pickUpCnt);   		
			    }
			     
			     if(event.getStateChange()==ItemEvent.DESELECTED){
			    	 pickUpCnt--;
			    	System.out.println("In DESELECTED==>"+pickUpCnt);  		
			     }	
				}
	});	
	
	}//Consturtor
		
		public void setPickupLabel(int pickValue){		
			objTemp=Integer.toString(pickValue);
			pickUpFld.setText(objTemp.toString());
			pickUpFld.setForeground(Color.BLUE);
			deliverCount= itemCount-pickValue;
			System.out.println(deliverCount);
			deliverFld.setText(Integer.toString(deliverCount));
			deliverFld.setForeground(Color.blue);
		}
 }//EOF CheckBox Class
	
	public class CheckBoxCellRendrer implements TableCellRenderer {

		public boolean cellEnabled = true;
		int spaceCount =0,pickValue=0;
		Object objTemp=null;
		JCheckBox jcb = new JCheckBox();
		public CheckBoxCellRendrer(){
			jcb.setEnabled(true);
			//jcb.requestFocus();
			jcb.setHorizontalAlignment(JLabel.CENTER);
			//jcb.setBackground(Color.LIGHT_GRAY);
			//System.out.println("In CheckBoxCellRendrer constructor..");			
		}
		public void setPickupLabel(int pickValue){		
			objTemp=Integer.toString(pickValue);
			pickUpFld.setText(objTemp.toString());
			pickUpFld.setForeground(Color.BLUE);
			deliverCount= itemCount-pickValue;
			System.out.println(deliverCount);
			deliverFld.setText(Integer.toString(deliverCount));
			deliverFld.setForeground(Color.blue);
		}
		public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,	
				boolean hasFocus, int row, int column) {		
			
			if (value != null && value.equals(new Boolean(true))) {
				jcb.setSelected(true);
			}
		
			else {
				jcb.setSelected(false);
			}
			return jcb;
		}
	}// EOF CheckBoxCellRendrer	
	
//--------------------------------------------------------------------------------------------------------------//
/*/						TextFieldEditor Class																  *///
//--------------------------------------------------------------------------------------------------------------//	
	
//	TextField
	public class TextFieldEditor extends JTextField{
		public TextFieldEditor(){
			super();
			System.out.println("In TextFieldEditor Constructor..");
			addKeyListener(new KeyAdapter(){
				public void keyReleased(KeyEvent ke){ 
					//System.out.println("In KeyRealeased..");
					System.out.println("Text Value=="+getText()+"KeyCode=="+ke.getKeyCode());
					if((ke.getKeyCode()>=96) && (ke.getKeyCode()<=105) || (ke.getKeyCode()>=48) && (ke.getKeyCode()<=57)){
						String quantityValue="";
						quantityValue = getText();
						setTotalPrice(quantityValue);
						setOverallTotal();
						
					}
				}       	

			}); //EOF KeyListener Adapter inner Class
			
		} // EOF TextFieldEditor constructor..
		
		public void setTotalPrice(String quantityValue){
			try{
				//System.out.println(" In setTotalPrice()");
				int totalCost = Integer.parseInt(quantityValue); 
				String priceValueStr = (String)table.getValueAt(table.getSelectedRow(), 3);
				int priceValue = Integer.parseInt(priceValueStr);
				int totalRate = totalCost * priceValue;
				System.out.println("TotalRate in col 5==>"+totalRate);
				table.setValueAt(Integer.toString(totalRate), table.getSelectedRow(), 5);
			}
			catch(NumberFormatException nfe){
				System.out.println("Error Occured in setTotalPrice"+nfe);
			}	
			catch(StackOverflowError soe){
				System.out.println("Error Occured in setTotalPrice"+soe);
			}
		}
		
		public void setOverallTotal(){
			try{
				int rowCount = table.getRowCount(),col = 4,totalCost = 0, totalmrpCost = 0, savCost;
				Object str = null, str1=null,sav=null;
				//System.out.println("In setOverallTotal row count==>"+rowCount);
				for(int i=0; i<rowCount; i++){
					Object total =(table.getValueAt(i, 5));
					Object totalmrp =(table.getValueAt(i, 6));
					if(total!=""){
						int totalValue = Integer.parseInt(total.toString());
						totalCost += totalValue;
					} 
					if(totalmrp!=""){
						int totalmrpValue = Integer.parseInt(total.toString());
						totalmrpCost += totalmrpValue;
					} 
				}
				savCost = totalmrpCost - totalCost;
				str = Integer.toString(totalCost);
				totalField.setText(str.toString());
				totalField.setForeground(Color.blue);
				str1 = Integer.toString(totalmrpCost);
				totalMrpFld.setText(str1.toString());
				totalMrpFld.setForeground(Color.blue);
				sav = Integer.toString(savCost);
				savingFld.setText(sav.toString());
				savingFld.setForeground(Color.blue);
				
			}
			catch(NumberFormatException nfe){
				System.out.println("Error Occured in setOverallTotal "+nfe);
			}
		}

	} //EOF TextFieldEditor Class
	 class MyKeyListener implements KeyListener
	    {
	        JTable table = null;
	        
	        MyKeyListener(JTable table)
	        {
	            this.table = table;
	        }
	        public void keyPressed(KeyEvent ke){}
	 
	        public void keyTyped(KeyEvent ke){}
	 
	        public void keyReleased(KeyEvent ke)
	        {        	
	            if(ke.getKeyCode() == KeyEvent.VK_TAB)
	            {
	                System.out.println(" TAB RLEASED ");
	                //System.out.println(" Selected Row "+table.getSelectedRow());
	                //System.out.println(" Selected Col "+table.getSelectedColumn());
	                
		        	if(isFirstCell())
		        	{
		        	    Vector v = new Vector();
		        		v.addElement((String) "");
		        		v.addElement((String) "");
		        		v.addElement((String) "");
		        		v.addElement((String) "");
		        		v.addElement((String) "");
		        		v.addElement((String) "");	
		        		v.addElement((String) "");
		        		v.addElement((String) "");

		        	    ((DefaultTableModel)table.getModel()).addRow(v);
		        	    int rowCount = table.getRowCount();
		        	    ((DefaultTableModel)table.getModel()).fireTableRowsInserted(rowCount,rowCount);
		        	}
	            }
	        }
	 
	        public boolean isFirstCell()
	        {
	            int rows = table.getRowCount();
	            //int cols = table.getColumnCount();
	            int column = 0;
	            int selectedRow = table.getSelectedRow();
	            System.out.println("getSelected col=="+table.getSelectedColumn());
	            int selectedCol = table.getSelectedColumn();
	            if(rows == (selectedRow+1) && column==0){
	            	System.out.println(" In If getSelected col=="+table.getSelectedColumn());
	                return true;
	            }
	            else{
	            	System.out.println(" In Else getSelected col=="+table.getSelectedColumn());
	            		return false;
	                }
	        }
	 
	    }
		
	 
	
	
	
	
}//EOF RetailSys class

/*try{
URL url = new URL("http://localhost:8080/rms/customer_detailsForm.jsp");
this.getAppletContext().showDocument(url);
System.out.println("complete");
}
catch(MalformedURLException m){
System.out.println("MalformedURLException: "+ m);
}*/



--------------------------------------------------------------
System.out.println(win);				
				        JSObject doc = (JSObject) win.getMember("document");
				        System.out.println(doc);
				        JSObject loc = (JSObject) doc.getMember("location");
				        System.out.println(loc);
				         String s = (String) loc.getMember("href");  
				         System.out.println(s);
				        // win.call("check", null);
-------------------------------------------------------------
Temp.java

/**
 * @author: Anup Bansode 
 * Work started on 10/12/2007, Friday
 * This program works for JApplet.
 * Modification done without using JFrame. Also added dropdown menu.(on 10th Dec)
 * (Continued..)AutoComplete is working fine as per required. Tab key is also working
 * properly and F2 Problem also solved. ALso there are no problems with 
 * UP and DOWN Arrow Key. But pressing backspace still hangs the Applet.
 * Recomended on (28-12-2007) Wednesday as most of requirement met
 * CheckBox is working correctly.All checkbox problems rectified .
 * Worked on it till 10/01/2008 Thursday
 *  
*/

import javax.swing.*;
import javax.swing.event.CellEditorListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.text.JTextComponent;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.*;
import java.sql.*;
import java.util.EventObject;
import java.util.Vector;

/*<apple code = "RetailSys" width=300 height=300>
<applet>
*/

public class Temp extends JApplet implements ActionListener, TableModelListener{
	JTable table;
	Vector rows,columns;
	DefaultTableModel tabModel;
	JScrollPane scrollPane;
	ComboBoxEditor cme;
	JButton addButton,deleteButton,saveButton,cancelButton;
	JCheckBox checkBox;
	JComboBox paymentCombo,tempCombo;
	JLabel totalPrice,totalField,totalMrp,totalItems,pickUp,deliver,paymentLbl,savingLbl,
		   totalItemFld,pickUpFld,deliverFld,totalMrpFld,savingFld,emptyFld,emptyFld1;
	JPanel tablePanel,innerbuttonPanel,buttonPanel,mainPanel,labelPanel1,labelPanel2,
		   labelPanel3,labelPanel4,emptyPanel,emptyPanel1,wholeLabelPanel;
	JTextComponent editor;
	Connection con=null;
	ResultSet rs=null,rs1=null; 
	Statement getValstmt=null,getItemstmt=null;	
	String productValue,setProdName="";
	Vector productArray = new Vector();
	int itemCount = 0,setQuantityFlag=0,checkboxFlag,pickUpCnt=0;
	Object objTemp=null;
	
	public void init(){

		try{
				SwingUtilities.invokeAndWait(new Runnable(){
					public void run(){
						
						makeGUI();
						}
					}
				);
			}
			catch(Exception e){
				System.out.println("Exception occured in Init"+e);
			}
	} //EOF intit()
		
	public void makeGUI(){
		UIManager.LookAndFeelInfo[] lfi=UIManager.getInstalledLookAndFeels();
		setSize(1000, 330);
		rows=new Vector();
		columns= new Vector();
		String[] columnNames = { "Product","Check", "Weight","Price","Quantity","Total Price","Discount","Remark"};		
		addColumns(columnNames);
		tabModel = new DefaultTableModel();
		tabModel.setDataVector(rows,columns);
		setTabFocus();	
		table.setCellSelectionEnabled(true);
		//table = new JTable(tabModel);
		scrollPane = new JScrollPane(table);				
		//table.setRowSelectionAllowed(true);
	    TableColumnModel tcm = table.getColumnModel();
	    TableColumn colwithCombo = tcm.getColumn(0);		
	    TableColumn colwithCheck = tcm.getColumn(1);
	    TableColumn colwithTextField = tcm.getColumn(4);
	    
		//Add ComboBox in cell
	    cme=new ComboBoxEditor();
		colwithCombo.setCellEditor(cme);
		//Adding KeyListener for inserting new Row
		table.addKeyListener(new MyKeyListener(table));

		//	Add CheckBox in cell
		colwithCheck.setCellEditor(new DefaultCellEditor(new CheckBoxEditor()));		
		CheckBoxCellRendrer chkRenderer = new CheckBoxCellRendrer();
		colwithCheck.setCellRenderer(chkRenderer);				
				
//		Add TextField in cell
		colwithTextField.setCellEditor(new DefaultCellEditor(new TextFieldEditor()));
		
		setUpProductColumn(colwithCombo,colwithCheck);
		
		table.getModel().addTableModelListener(this);
		//Add combonents to table
		addComponents();
		colwithCombo.setPreferredWidth( 250 );
		colwithCombo.setMinWidth( 150 );
		colwithCombo.setMaxWidth( 250 );
		//table.setColumnSelectionAllowed(true);
					     
	}//EOF retail()  

	// Table Columns
	public void addColumns(String[] colName){
		for(int i=0;i<colName.length;i++)
			columns.addElement((String) colName[i]);
	}
		
	// Add Row
	public void addRow(){ 
		Vector r=new Vector();
		r=addBlankElement();	
		rows.addElement(r);
		table.addNotify();	
        int rowcnt = tabModel.getRowCount();
/*        
        table.setSurrendersFocusOnKeystroke(true);
        table.requestFocus();
        table.setEditingRow(table.getRowCount());
        table.setEditingColumn(0);
*/
		//tabModel.setRowCount( tabModel.getRowCount());
		int row = table.getRowCount() - 1;
		table.changeSelection(row, 0, false, false);
		table.requestFocusInWindow();
		table.requestFocus();
        //setSelectedRow(itemCount);
        //setSelectedCol(0);
        cme.checkBlankRows();
        cme.removeAllItems();
    }
			
	 public Vector addBlankElement(){
		Vector t = new Vector();
		t.addElement((String) "");
		t.addElement((String) "");
		t.addElement((String) "");
		t.addElement((String) "");
		t.addElement((String) "");
		t.addElement((String) "");	
		t.addElement((String) "");
		t.addElement((String) "");
		return t;
	}
			
	void deleteRow(int index){
		if(index!=-1)//At least one Row in Table
		{ 
			System.out.println("Index==>"+index);
			rows.removeElementAt(index);
			table.addNotify();
		}	
	}//Delete Row
	
	
    public void setSelectedRow(int row) {
        if(row == -1)
             return;
        else {
        	table.setRowSelectionInterval(row, row);
        }
   }
  
   public void setSelectedCol(int col) {
        if(col == -1)
             return;
        else {
             table.setColumnSelectionInterval(col, col);
        }
   }
	
	public void setTabFocus(){
        table = new JTable(tabModel)
        {
            public boolean isCellEditable(int row, int column)
            {             	
            	if(column ==0 || column ==4 || column ==1)
            		return true;
            	else
            		return false;
            }
 
            public void changeSelection(final int row, final int column, boolean toggle, boolean extend)
            {
                super.changeSelection(row, column, toggle, extend);
	                if (editCellAt(row, column))
	                    getEditorComponent().requestFocusInWindow();
            }             
        };
	}
	
	public void addComponents(){
		buttonPanel = new JPanel();
		innerbuttonPanel = new JPanel();
		buttonPanel.setLayout(new GridLayout(2,1,0,0));
		
		addButton = new JButton("Add Row");
		deleteButton = new JButton("Delete");
		saveButton = new JButton("Save&Print");
		cancelButton = new JButton("Cancel");
		addButton.setMnemonic(KeyEvent.VK_N);
		deleteButton.setMnemonic(KeyEvent.VK_R);
		saveButton.setMnemonic(KeyEvent.VK_S);
		cancelButton.setMnemonic(KeyEvent.VK_B);
		wholeLabelPanel = new JPanel(new FlowLayout(0,0,0));
		labelPanel1 = new JPanel(new GridLayout(3,1,0,0));
		emptyPanel = new JPanel(new GridLayout(3,1,0,0));
		labelPanel2 = new JPanel(new GridLayout(3,1,0,0));
		labelPanel3 = new JPanel(new GridLayout(2,1,0,0));
		emptyPanel1 = new JPanel(new GridLayout(3,1,0,0));
		labelPanel4 = new JPanel(new GridLayout(3,1,0,0));
		
		totalItems = new JLabel("Total Items :");
		totalItemFld =  new JLabel();
		pickUp = new JLabel("PickUp         :");
		pickUpFld =  new JLabel();
		deliver = new JLabel("Deliver         :");
		deliverFld =  new JLabel();
		
		emptyFld = new JLabel("                                  ");
		
		paymentLbl = new JLabel("Payment :");
		
		paymentCombo = new JComboBox();		
		paymentCombo.addItem("Select Type");
		paymentCombo.addItem("Cash");
		paymentCombo.addItem("Credit");
		paymentCombo.addItem("Hawala");
		
		emptyFld1 = new JLabel("  ");
		
		totalPrice = new JLabel("Total Price :");
		totalField = new JLabel();
		totalMrp = new JLabel("Total MRP  :");
		totalMrpFld =  new JLabel();				
		savingLbl =  new JLabel("saving         :");
		savingFld =  new JLabel();
		
		labelPanel1.add(totalItems);
		labelPanel1.add(totalItemFld);
	    labelPanel1.add(pickUp);
	    labelPanel1.add(pickUpFld);
	    labelPanel1.add(deliver);
	    labelPanel1.add(deliverFld);
	    
	    emptyPanel.add(emptyFld); 
	    
		labelPanel2.add(paymentLbl);
		
		labelPanel3.add(paymentCombo);
		
		emptyPanel1.add(emptyFld1); 
		
		labelPanel4.add(totalPrice);
	    labelPanel4.add(totalField);
	    labelPanel4.add(totalMrp);
	    labelPanel4.add(totalMrpFld);
	    labelPanel4.add(savingLbl);
	    labelPanel4.add(savingFld);
	    
	    wholeLabelPanel.add(labelPanel1);
	    wholeLabelPanel.add(emptyPanel);
	    wholeLabelPanel.add(labelPanel2);
	    wholeLabelPanel.add(labelPanel3);
	    wholeLabelPanel.add(emptyPanel1);
	    wholeLabelPanel.add(labelPanel4);

		innerbuttonPanel.add(addButton);
		innerbuttonPanel.add(deleteButton);	
		innerbuttonPanel.add(saveButton);	
		innerbuttonPanel.add(cancelButton);
	
		buttonPanel.add(wholeLabelPanel);
		buttonPanel.add(innerbuttonPanel);
	
		addButton.addActionListener(this);
		deleteButton.addActionListener(this);
		saveButton.addActionListener(this);
		cancelButton.addActionListener(this);

		mainPanel=new JPanel();
		tablePanel=new JPanel();

		mainPanel.setLayout(new BorderLayout());
		mainPanel.add("Center",scrollPane);
		mainPanel.add("South",buttonPanel);
		tablePanel.setBackground(Color.white);
		buttonPanel.setBackground(Color.white);
		table.getParent().setBackground(Color.white);
		getContentPane().add(mainPanel);
	}
	
	public void setUpProductColumn(TableColumn productColumn , TableColumn checkColumn){
		//Set up the editor for the ProductName cells.
		try{
			String dburl = "jdbc:mysql://192.168.1.104/js";
			String dbuser = "dev";
			String dbpassword = "";
			String dbclassName = "com.mysql.jdbc.Driver";
			Class.forName(dbclassName);
			con = DriverManager.getConnection(dburl, dbuser, dbpassword);
			getValstmt = con.createStatement();
			
			String query="SELECT DISTINCT item_name from item_master order by item_name";			
			rs = getValstmt.executeQuery(query);			
			while(rs.next()){
				productArray.add(rs.getString(1));
			}	
			//checkColumn.setCellEditor((new DefaultCellEditor(checkCombo)));
			con.close();
			getValstmt.close();
			rs.close();	
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setToolTipText("Click the Product to see a list of choices");
			productColumn.setCellRenderer(renderer);
		  }//EOF Try
		catch(Exception e){

			System.out.println("Could not connect to database"+e);

		}// catch

	}//EOF setUpProductColumn
			
//	This method is to implement the change in table cells
	public void tableChanged(javax.swing.event.TableModelEvent source){
		switch (source.getType())
		{
			case TableModelEvent.UPDATE:
				//System.out.println("Cell Edited==>>"+table.getValueAt(table.getEditingRow(),table.getEditingColumn()));
		}
		/*		if(source.getColumn()==1){
			//System.out.println("Checkbox value is"+table.getValueAt(table.getSelectedRow(),1));
			int checkQuantityFlag=0;
			checkboxFlag++;
			checkQuantityFlag =  checkQuantity();		
			if(checkQuantityFlag == 1 ){
				setQuantityFlag++;
				//System.out.println("checkQuantityFlag is == "+checkQuantityFlag+"setFlag"+setQuantityFlag+"checkboxFlag="+checkboxFlag);
				if(setQuantityFlag == 1){
					table.setValueAt(false, table.getSelectedRow(), 1);
					setQuantityFlag=0;
					System.out.println("Checkbox assigned to false");					
				}
			}
			else{
				System.out.println("checkQuantityFlag is == "+checkQuantityFlag);
			}
			
		}// EOF col 1	
*/		      						

		if(source.getColumn()==0){
			//System.out.println("Checking product column redundancy");
			//checkSelctedProduct();
		}
		
		if(source.getColumn()==4){
			//setTotalPrice();
			//setOverallTotal();
			//System.out.println("Quantity Value==> "+table.getValueAt(table.getSelectedRow(),4));
		}

		// Set pickup label
		if(source.getColumn()==1){
			int pickValue=0;
    		int rowCount= table.getRowCount();
		    int checkFlag=0,checkFlagCount=0;
		    Object checkBoxVal=null,productVal=null,quantityVal;
		    //System.out.println("pickUp Value==>"+pickValue);
		    
		    //System.out.println("-----------------------------------------------------------\n");
/*		    
		    //checkFlag = checkBlankValue();
			if(checkFlag == 1){
			    System.out.println("setQuantityFlag Value "+setQuantityFlag);
				setQuantityFlag++;				
				System.out.println("checkFlag is == "+checkFlag+"setFlag  "+setQuantityFlag+"checkboxFlag=  "+checkboxFlag);
				if(setQuantityFlag==1){
					setQuantityFlag++;
					table.setValueAt(false, table.getSelectedRow(), 1);
					System.out.println("Checkbox assigned to false");					
				}
			}
		    else if(checkFlag ==0){
		    	System.out.println("Flag is "+checkFlag);
		    }

		    
			checkBoxVal=table.getValueAt(table.getSelectedRow(),1);
			productVal =table.getValueAt(table.getSelectedRow(), 0);
    		quantityVal =table.getValueAt(table.getSelectedRow(), 4);
		    if(checkBoxVal=="true" && productVal.toString()=="" && quantityVal.toString()==""){
		    	//table.setValueAt(false, table.getSelectedRow(), 1);
				setQuantityFlag++;
				System.out.println("checkFlag is == "+checkFlag+"setFlag  "+setQuantityFlag+"checkboxFlag=  "+checkboxFlag);
				if(setQuantityFlag==1){
					table.setValueAt(false, table.getSelectedRow(), 1);
					//setQuantityFlag=0;
					System.out.println("Checkbox assigned to false");					
				}
		    }
*/    		
    		//System.out.println("RowCount"+rowCount);
    		if(rowCount>0){
    			for(int pickYes=0; pickYes<rowCount; pickYes++ ){
    				Object obj=table.getValueAt(pickYes, 1);
    				if(obj.toString()=="true"){
    					pickValue++;
    				}
    			}
    		}
    		setPickupLabel(pickValue);
		}// EOF col 1			
		

	}//Table Changed Method			
	
	public void actionPerformed(ActionEvent source)
	{try{
		if (source.getSource()==(JButton) addButton)
		{		
			addRow();	
			itemCount++;
			totalItemFld.setText(Integer.toString(itemCount));
			totalItemFld.setForeground(Color.blue);
			deliverFld.setText(Integer.toString(itemCount));
			deliverFld.setForeground(Color.blue);
			//System.out.println("In actionPerformed for addButton "+itemCount);
		}
		else if (source.getSource()==(JButton) deleteButton)
		{
			int totalCost = 0;
			System.out.println("Deleting Selected Row=="+table.getSelectedRow());
			deleteRow(table.getSelectedRow());
			if(itemCount>0 && table.getSelectedRow()!=-1 )
				{
				//System.out.println("delete count"+itemCount);
				itemCount--;				
				totalItemFld.setText(Integer.toString(itemCount));
				deliverFld.setText(Integer.toString(itemCount));
				//----pickUpFld.setText(Integer.toString(pickUpCnt));
				TextFieldEditor tf = new TextFieldEditor();
				tf.setOverallTotal();
			}			
			//System.out.println("In actionPerformed for deleteButton "+itemCount);
		}
		else if (source.getSource()==(JButton) saveButton)
		{
			checkSelctedProduct();
			checkPaymentType();
			//System.out.println("For saveButtton");
		}
		else if (source.getSource()==(JButton) cancelButton)
		{
			//System.out.println("For cancelButton");
		}
	}
	catch(ArrayIndexOutOfBoundsException aie){
		System.out.println("Error occured in actionPerformed "+ aie);
	}

	}// EOF ActionList
			
	public void setCellValues(String productName){		
		try{
			int rowCount=0;
			String dburl = "jdbc:mysql://192.168.1.104/js";
			String dbuser = "dev";
			String dbpassword = "";
			String dbclassName = "com.mysql.jdbc.Driver";
			Class.forName(dbclassName);
			con = DriverManager.getConnection(dburl, dbuser, dbpassword);
			getItemstmt = con.createStatement();
			String insertIntoCellQuery = "SELECT item_weight,item_rate,deal_on_qty,deal_amount FROM item_master where item_name='"+productName+"'";
			rs1 = getItemstmt.executeQuery(insertIntoCellQuery);
			if(rs1.next()){
				selectCell(table.getSelectedRow(),table.getSelectedColumn());
				table.setValueAt(setProdName, table.getSelectedRow(), 0);
				//table.setValueAt(new Boolean(false), table.getSelectedRow(), 1);
				table.setValueAt(rs1.getString(1), table.getSelectedRow(), 2);
				table.setValueAt(rs1.getString(2), table.getSelectedRow(), 3);
				table.setValueAt(rs1.getString(3), table.getSelectedRow(), 4);
				table.setValueAt(rs1.getString(4), table.getSelectedRow(), 5);
			}
		}
		catch(Exception se){
			System.out.println("Exception Occured while inserting data in table cells"+se);
		}
     }
    
	
	public void checkSelctedProduct(){
		try{
			//System.out.println("In checkSelctedProduct");
			Vector vec = new Vector();
			for(int i=0; i< table.getRowCount(); i++){
					vec.add(table.getValueAt(i, 0));
			}
			String message = "Duplicate entry for:";
			int rowCount = table.getRowCount(),flagCount=0;
			String str1,str2,matchString="";
			for(int row = 0; row < rowCount; row++){
				 str1 = (String)table.getValueAt(row, 0);
					if(flagCount>0){					
						message = message+matchString;
						JOptionPane.showMessageDialog(null,message,"RMS",JOptionPane.INFORMATION_MESSAGE);
						break;
					}
				for(int j = 0;  j< vec.size(); j++){
					if(row!=j){
						str2 = (String)table.getValueAt(j, 0);
						if(str1.equalsIgnoreCase(str2)){
							flagCount++;
							matchString = str1;
							//System.out.println("SAME ELEMENTS"+"\tstr1="+str1+"\tstr1"+str2);
							//System.out.println("At position =>"+j+"Flag Value =>"+flagCount);
							break;
						}
					}				
				}
			}

		}
		catch(ArrayIndexOutOfBoundsException aie){
			System.out.println("Exception in checkSelctedProduct" +aie);
		}
	}
	
	public int checkQuantity(){
	try{
		String quantityVal =(String)(table.getValueAt(table.getSelectedRow(), 4));

		if(quantityVal.equals("")){
			//System.out.println("For checking blank ");
			String  message="Quantity cannot be blank";
			JOptionPane.showMessageDialog(null,message,"RMS",JOptionPane.INFORMATION_MESSAGE);
			System.out.println("Returning one in checkQuantity()");
			return 1;
		}
	}
	catch(NumberFormatException nfe){
		System.out.println("Error while editing cell"+nfe);
	}
	System.out.println("Returning zero in checkQuantity()");
		return 0;
}
	
	public void checkPaymentType(){
		String message = "Please select payment term";
		String noItemsMsg = "No items Selected";
		if(paymentCombo.getSelectedItem() == "Select Type" && table.getRowCount()>0){
			JOptionPane.showMessageDialog(null,message,"RMS",JOptionPane.INFORMATION_MESSAGE);
		}
		if(table.getRowCount()==0){
			JOptionPane.showMessageDialog(null,noItemsMsg,"RMS",JOptionPane.INFORMATION_MESSAGE);
		}
			
	}	
	
	public void setPickupLabel(int pickValue){
		objTemp=pickValue;
		pickUpFld.setText(objTemp.toString());
		pickUpFld.setForeground(Color.BLUE);
	}
	
	public int checkBlankValue(){
		try{
			Object productVal,quantityVal,weightVal,priceVal=null;
			String tempQualStr="";			
			String  zeroMessage="Quantity cannot be zero";
			String  blankMessage="Quantity cannot be blank";
			String  noProdSelectedMessage="Product is blank";
			int val=0;

		    productVal =table.getValueAt(table.getSelectedRow(), 0);
			quantityVal =table.getValueAt(table.getSelectedRow(), 4);
			weightVal =table.getValueAt(table.getSelectedRow(), 2);
			priceVal = table.getValueAt(table.getSelectedRow(), 3);
			tempQualStr = (String)quantityVal;

			if(!productVal.equals("")){
				val = Integer.parseInt(tempQualStr); 
			}
			if(productVal.equals("")){
				System.out.println("For checking blank Product");	
				JOptionPane.showMessageDialog(null,noProdSelectedMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
				return 1;
			}
			else if(quantityVal.equals("")){
				System.out.println("For checking blank ");	
				JOptionPane.showMessageDialog(null,blankMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
				return 1;
			}	
			else if(quantityVal!="" && (val ==0)){
				JOptionPane.showMessageDialog(null,zeroMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
				return 1;
			}
				
			else if(weightVal.equals("") && priceVal.equals("")){
				System.out.println("Validating weight price ");
				String  wpMessage="Weight and Price cannot be blank";
				JOptionPane.showMessageDialog(null,wpMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
				return 1;
			}
			else if( weightVal.equals("")){
				System.out.println("Validating weight price ");
				String  wMessage="Weight cannot be blank";
				JOptionPane.showMessageDialog(null,wMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
				return 1;
			}

			else if(priceVal.equals("")){
				System.out.println("Validating weight price ");
				String  pMessage="Price cannot be blank";
				JOptionPane.showMessageDialog(null,pMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
				return 1;
			}
		}
		catch(NumberFormatException nfe){
			System.out.println("Exception occured in checkBlankValue"+nfe);
		}	
		return 0;
	}
	
	public void selectCell(int row,int col)
	{
		if(row!=-1 && col !=-1)            
		{
			table.setRowSelectionInterval(row,row);
			table.setColumnSelectionInterval(col,col);
		}
	}//EOF selecCell()

//------------------------------------------------------------------------------------
	/*    ComboBox code   	*/
//------------------------------------------------------------------------------------	
	public class ComboBoxEditor extends JComboBox implements TableCellEditor{

	  JTextComponent editor;

	  public ComboBoxEditor() {
	    super();
	    setEditable(true);
	    setEnabled(true);
	    editor = (JTextComponent) getEditor().getEditorComponent();
	    editor.addMouseListener(new MouseAdapter(){

	    	public void mouseReleased(MouseEvent me) {
    			if(table.getSelectedColumn()==0){
    				System.out.println("Released selected column is zero"+"row "+table.getSelectedRow()+"col"+table.getSelectedColumn());
    				editor.setText(table.getValueAt(table.getSelectedRow(), table.getSelectedColumn()).toString());
    			}
	    	} 
	    	
	    	public void mousePressed(MouseEvent me) {
	    		System.out.println("In MousePressed");
	    		setProdName = editor.getText();
	    		setCellValues(setProdName);
	    		checkBlankRows();
	    	}
	    });
	    editor.addKeyListener(new KeyAdapter(){
    		String temp="";
    		int rowCount=0;

        	public void keyReleased(KeyEvent ke){        	

        		if((ke.getKeyCode()==KeyEvent.VK_DOWN)){
        			setPopupVisible(true);
        		}
        		if ((ke.getKeyCode() == KeyEvent.VK_ESCAPE)){
        			if(isPopupVisible())
        				setPopupVisible(false);        				
        		}
        		
        		if ((ke.getKeyCode() == KeyEvent.VK_SHIFT) || ke.getKeyCode() == KeyEvent.VK_TAB){
        			//System.out.println("In Shift + TAB"); 
        			checkBlankRows();
        			if(table.getSelectedColumn()==0){
        				editor.setText(table.getValueAt(table.getSelectedRow(), table.getSelectedColumn()).toString());
        			}
        		}

    			if(editor.getText().length()<3 && ke.getKeyCode() == KeyEvent.VK_ENTER){
    					editor.setText(getItemAt(0).toString());
    			} 
        		
        		if (ke.getKeyCode() == KeyEvent.VK_ENTER){
        			setProdName = editor.getText();
        			if(table.getRowCount()>0)
        				setCellValues(setProdName);     			
        		}
        		
        		if(!(ke.getKeyCode()==KeyEvent.VK_DOWN) && !(ke.getKeyCode()==KeyEvent.VK_UP)
        			&& !(ke.getKeyCode()==KeyEvent.VK_LEFT) && !(ke.getKeyCode()==KeyEvent.VK_RIGHT)
        			&& !(ke.getKeyCode()==KeyEvent.VK_ENTER) && !(ke.getKeyCode()==KeyEvent.VK_TAB)
        			&& !(ke.getKeyCode()==KeyEvent.VK_SHIFT) && !(ke.getKeyCode()==KeyEvent.VK_HOME)
        			&& !(ke.getKeyCode()==KeyEvent.VK_PAGE_UP) && !(ke.getKeyCode()==KeyEvent.VK_PAGE_DOWN)) {
        			try{
        				temp = editor.getText();
        				while(getItemCount()!=0)
        					removeItemAt(0);
        				
        				String str="";
        				
        				if (temp.trim().length()>0){
	        				for(int i=0; i<productArray.size(); i++){
	        					str = productArray.get(i).toString();
	        					if(str.toUpperCase().startsWith(temp.toUpperCase())){
	        						addItem(str);
	        	    				
	        					}
	        				}
        				}
        				setProdName = temp;        				
        				if(setProdName == ""){
        					hidePopup();
        				}
        				else
        					showPopup();
        				//This statement is important for the working of BackSpace
        				editor.setText(temp);
        			}
        			catch(Exception e){
        				System.out.println("Error occured in KeyReleased"+e);
        			}
        		}
        	
        	}	        	
        });	    
	  } // EOF Combo Constructor	  
	  

	  public void addCellEditorListener(CellEditorListener listener) {
	   // listenerList.add(CellEditorListener.class, listener);
	   // System.out.println("----In addCellEditorListener----");
	  }

	  public void removeCellEditorListener(CellEditorListener listener) {
	    //listenerList.remove(CellEditorListener.class, listener);
	    //System.out.println("----In removeCellEditorListener----");
	  }

	  public void fireEditingStopped() {
	    //System.out.println("fireEditingStopped called ");
	  }

	  public void fireEditingCanceled() {
		 //System.out.println("----In fireEditingCanceled----");

	  }

	  public void cancelCellEditing() {
	    //System.out.println("cancelCellEditing called ");
	    fireEditingCanceled();
	  }

	  public boolean stopCellEditing() {
	   // System.out.println("stopCellEditing called ");
	   // fireEditingStopped();
	    return true;
	  }

	  public boolean isCellEditable(EventObject event) {
		//System.out.println("----In isCellEditable----");
	    return true;
	  }

	  public boolean shouldSelectCell(EventObject event) {
		  //System.out.println("----In shouldSelectCell----");
	    return true;
	  }

	  public Object getCellEditorValue() {
	   // System.out.println("getCellEditorValue called returning vlaue: " + newValue);
	    return this;
	  }

	  public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected,
	      int row, int column) {
	    return this;
	  }
	  
	  public void checkBlankRows(){
		  int rowCount=0;
			rowCount=table.getRowCount();
				for(int row=0; row<rowCount; row++){
					if(table.getValueAt(row, 0)=="" || table.getValueAt(row, 2)=="" &&
						table.getValueAt(row, 3)=="" && table.getValueAt(row, 4)==""&&
						table.getValueAt(row, 5)=="" && table.getValueAt(row, 6)=="" ){
						for(int itemCount=0; itemCount<getItemCount(); itemCount++){
							removeAllItems(); 
							break;
						}
					}
				}         			
				for(int row=0; row<rowCount; row++){
					if(!(table.getValueAt(row, 0)=="" || table.getValueAt(row, 2)=="" &&
						table.getValueAt(row, 3)=="" && table.getValueAt(row, 4)==""&&
						table.getValueAt(row, 5)=="" && table.getValueAt(row, 6)=="" )){
						//table.setValueAt(null, row, 0);
						for(int itemCount=0; itemCount<getItemCount(); itemCount++){
							removeAllItems();
							break;
						}
					}
				}
		} // EOF checkBlankRows

	  
	}// EOF ComboBoxEditor
	
	
	

//	-----------------------------------------------------------------------------------
	/* CheckBox Class Code*/
//-----------------------------------------------------------------------------------	
	public class CheckBoxEditor extends JCheckBox {	

		Object objTemp=null;
		int spaceCount=0,pickValue=0;
		public CheckBoxEditor(){
			super();
			setEnabled(true);
			//setVisible(true);
			requestFocus();
			setHorizontalAlignment(JLabel.CENTER);
			setBackground(Color.LIGHT_GRAY);
			System.out.println("In CheckBox Constructor..");		    			

		addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent event) {				
				JCheckBox cb = (JCheckBox)event.getSource();
			    Object item = event.getItem();  
		
			    if(event.getStateChange()==ItemEvent.SELECTED){
		    		int rowCount= table.getRowCount();
		    		pickUpCnt++;
		    		int checkFlag=0;
		    		
				    checkFlag = checkBlankValue();
					if(checkFlag == 1){				
						System.out.println("checkFlag is == "+checkFlag);
							//table.setValueAt(false, table.getSelectedRow(), 1);
						setSelected(false);
							System.out.println("Checkbox assigned to false");					
					}
				    else if(checkFlag ==0){
				    	System.out.println("Flag is "+checkFlag);
				    }
		    		System.out.println("In SELECTED pickUpCnt==>"+pickUpCnt);   		
			    }
			     
			     if(event.getStateChange()==ItemEvent.DESELECTED){
			    	 pickUpCnt--;
			    	System.out.println("In DESELECTED==>"+pickUpCnt);  		
			     }	
				}
	});	
	
	}//Consturtor
		
		public void setPickupLabel(){
			System.out.println("In setPickUpLabel");
			objTemp=pickValue;
			pickUpFld.setText(objTemp.toString());
			pickUpFld.setForeground(Color.BLUE);
		}
 }//EOF CheckBox Class
		
//--------------------------------------------------------------------------------------	
	/*   CheckBoxCellRendrer Class Code  */
//--------------------------------------------------------------------------------------
    
	public class CheckBoxCellRendrer implements TableCellRenderer {

		public boolean cellEnabled = true;
		int spaceCount =0,pickValue=0;
		Object objTemp=null;
		JCheckBox jcb = new JCheckBox();
		public CheckBoxCellRendrer(){
			jcb.setEnabled(true);
			//jcb.requestFocus();
			jcb.setHorizontalAlignment(JLabel.CENTER);
			//jcb.setBackground(Color.LIGHT_GRAY);
			//System.out.println("In CheckBoxCellRendrer constructor..");			
		}
		public void setPickupLabel(){
			objTemp=pickValue;
			pickUpFld.setText(objTemp.toString());
			pickUpFld.setForeground(Color.BLUE);
		}
		public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,	
				boolean hasFocus, int row, int column) {		
			
			if (value != null && value.equals(new Boolean(true))) {
				jcb.setSelected(true);
			}
		
			else {
				jcb.setSelected(false);
			}
			return jcb;
		}
	}// EOF CheckBoxCellRendrer	
	
//--------------------------------------------------------------------------------------------------------------//
/*/						TextFieldEditor Class																  *///
//--------------------------------------------------------------------------------------------------------------//	
	
//	TextField
	public class TextFieldEditor extends JTextField{
		public TextFieldEditor(){
			super();
			//System.out.println("In TextFieldEditor Constructor..");
			addKeyListener(new KeyAdapter(){
				public void keyReleased(KeyEvent ke){ 
					//System.out.println("In KeyRealeased..");
					//System.out.println("Text Value=="+getText()+"KeyCode=="+ke.getKeyCode());
					if((ke.getKeyCode()>=96) && (ke.getKeyCode()<=105) || (ke.getKeyCode()>=48) && (ke.getKeyCode()<=57)){
						String quantityValue="";
						quantityValue = getText();
						if(quantityValue!=""){
							setTotalPrice(quantityValue);
						}
						setOverallTotal();
						
					}
				}       	

			}); //EOF KeyListener Adapter inner Class
			
		} // EOF TextFieldEditor constructor..
		
		public void setTotalPrice(String quantityValue){
			try{
				//System.out.println(" In setTotalPrice()");
				int quantityVal = Integer.parseInt(quantityValue); 
				String priceValueStr = (String)table.getValueAt(table.getSelectedRow(), 3);
				int priceValue ;
				String priceMessage="Price is Blank";
					priceValue = Integer.parseInt(priceValueStr);
					int totalRate = quantityVal * priceValue;
					System.out.println("TotalRate in col 5==>"+totalRate);
					table.setValueAt(totalRate, table.getSelectedRow(), 5);

			}
			catch(NumberFormatException nfe){
				System.out.println("Exception Occured in setTotalPrice"+nfe);
			}	
			catch(StackOverflowError soe){
				System.out.println("Error Occured in setTotalPrice"+soe);
			}
		}
		
		public void setOverallTotal(){
			try{
				int rowCount = table.getRowCount(),col = 4,totalCost = 0;
				Object str = null;
				//System.out.println("In setOverallTotal row count==>"+rowCount);
				for(int i=0; i<rowCount; i++){
					Object total =(table.getValueAt(i, 5));
					if(total!=""){
						int totalValue = Integer.parseInt(total.toString());
						totalCost += totalValue;
					} 
				}
				str = totalCost;
				totalField.setText(str.toString());
				totalField.setForeground(Color.blue);
				totalMrpFld.setText(str.toString());
				totalMrpFld.setForeground(Color.blue);
			}
			catch(NumberFormatException nfe){
				System.out.println("Error Occured in setOverallTotal "+nfe);
			}
		}

	} //EOF TextFieldEditor Class	
	

    class MyKeyListener implements KeyListener
    {
        JTable table = null;
        
        MyKeyListener(JTable table)
        {
            this.table = table;
        }
        public void keyPressed(KeyEvent ke){}
 
        public void keyTyped(KeyEvent ke){}
 
        public void keyReleased(KeyEvent ke)
        {        	
            if(ke.getKeyCode() == KeyEvent.VK_TAB)
            {
                System.out.println(" TAB RLEASED ");
                //System.out.println(" Selected Row "+table.getSelectedRow());
                //System.out.println(" Selected Col "+table.getSelectedColumn());
                
	        	if(isFirstCell())
	        	{
	        	    Vector v = new Vector();
	        		v.addElement((String) "");
	        		v.addElement((String) "");
	        		v.addElement((String) "");
	        		v.addElement((String) "");
	        		v.addElement((String) "");
	        		v.addElement((String) "");	
	        		v.addElement((String) "");
	        		v.addElement((String) "");

	        	    ((DefaultTableModel)table.getModel()).addRow(v);
	        	    int rowCount = table.getRowCount();
	        	    ((DefaultTableModel)table.getModel()).fireTableRowsInserted(rowCount,rowCount);
	        	}
            }
        }
 
        public boolean isFirstCell()
        {
            int rows = table.getRowCount();
            //int cols = table.getColumnCount();
            int column = 0;
            int selectedRow = table.getSelectedRow();
            System.out.println("getSelected col=="+table.getSelectedColumn());
            int selectedCol = table.getSelectedColumn();
            if(rows == (selectedRow+1) && column==0){
            	System.out.println(" In If getSelected col=="+table.getSelectedColumn());
                return true;
            }
            else{
            	System.out.println(" In Else getSelected col=="+table.getSelectedColumn());
            		return false;
                }
        }
 
    }
	
}//EOF RetailSys class





-------------------------------------------------------------
CustomerOrderApplet.java
/**
 * @author: Anup Bansode 
 * Work started on 07/12/2007, Friday
 * This program works for JApplet.
 * Modification done without using JFrame. Also added dropdown menu.(on 10th Dec)
 * (Continued..)AutoComplete is working fine as per required. Tab key is also working
 * properly and F2 Problem also solved. ALso there are no problems with 
 * UP and DOWN Arrow Key. But pressing backspace still hangs the Applet.
 * Recomended on (28-12-2007) Wednesday as most of requirement met
 * Till 2/01/2008 Wednesday
 *  
*/

import javax.swing.*;
import javax.swing.event.CellEditorListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.text.JTextComponent;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.*;
import java.sql.*;
import java.util.EventObject;
import java.util.Vector;
import netscape.javascript.JSObject; 
import netscape.javascript.JSException;
/*<apple code = "RetailSys" width=300 height=300>
<applet>
*/

public class CustomerOrderApplet extends JApplet implements ActionListener, TableModelListener{
	
	JSObject win;
	JTable table;
	Vector rows,columns;
	DefaultTableModel tabModel;
	JScrollPane scrollPane;
	JButton addButton,deleteButton,saveButton,cancelButton,clearButton;
	JCheckBox checkBox;
	JComboBox paymentCombo; 
	JLabel totalPrice,totalField,totalMrp,totalItems,pickUp,deliver,paymentLbl,savingLbl,
		   totalItemFld,pickUpFld,deliverFld,totalMrpFld,savingFld,emptyFld,emptyFld1;
	JPanel tablePanel,innerbuttonPanel,buttonPanel,mainPanel,labelPanel1,labelPanel2,
		   labelPanel3,labelPanel4,emptyPanel,emptyPanel1,wholeLabelPanel;
	JTextComponent editor;
	Connection con=null;
	ResultSet rs,rs1,rs2,rs3,rs4; 
	Statement getValstmt,getItemstmt,getValstmt1,getValstmt2,stmt;	
	String productValue,setProdName="", customerCode="", item_code="", pay_type="", p_code="";
	String user="", backPage="",disRemark="";
	long pickup_ind=0;
	Object objTemp=null;
	Vector productArray = new Vector();
	int itemCount = 0,pickValue=0, deliverCount = 0, max=0;
	
	double item_mrp=0.00f;
	ManageOrderFile mo = new ManageOrderFile("jdbc/js");
	
	public void init(){
		try{
				
				customerCode = getParameter("customerCode");
				user = getParameter("user");
				backPage = getParameter("backPage");
				initialize();
				SwingUtilities.invokeAndWait(new Runnable(){
					public void run(){
						makeGUI();
						}
					}
				);
			}
			catch(Exception e){
				System.out.println("Exception occured in Init"+e);
			}
	} //EOF intit()
	
	public void  initialize(){
		try{
			String dburl = "jdbc:mysql://192.168.1.104/js";
			String dbuser = "dev";
			String dbpassword = "";
			String dbclassName = "com.mysql.jdbc.Driver";
			Class.forName(dbclassName);
			con = DriverManager.getConnection(dburl, dbuser, dbpassword);
			getValstmt = con.createStatement();
			getValstmt1 = con.createStatement();
			getValstmt2 = con.createStatement();	
			stmt = con.createStatement();			
			
		}catch (Exception e){
			System.out.println("Error occurred in Database Connection " + e);			
		}
			
	}
	
	public void closeAll(){
		try{
			getValstmt.close();
			getValstmt1.close();
			getValstmt2.close();			
			stmt.close();
			con.close();
		}
		catch(Exception e)
		{
	        e.getMessage();
			e.printStackTrace();
	    }	
	}
	
	
	public void makeGUI(){
		
		UIManager.LookAndFeelInfo[] lfi=UIManager.getInstalledLookAndFeels();
		rows=new Vector();
		columns= new Vector();
		String[] columnNames = { "Product","Check", "Weight","Price","Quantity","Total Price","MRP","Discount","Remark"};
		addColumns(columnNames);
		
		tabModel = new DefaultTableModel();		
		tabModel.setDataVector(rows,columns);
		//table = new JTable(tabModel);
		setTabFocus();

		scrollPane = new JScrollPane(table);				
		table.setRowSelectionAllowed(false);
		
	    TableColumnModel tcm = table.getColumnModel();
	    TableColumn colwithCombo = tcm.getColumn(0);		
	    TableColumn colwithCheck = tcm.getColumn(1);
	    TableColumn colwithTextField = tcm.getColumn(4);
		table.getModel().addTableModelListener(this);			
		//Add ComboBox in cell
		colwithCombo.setCellEditor(new ComboBoxEditor());
		
//		Add TextField in cell
		colwithTextField.setCellEditor(new DefaultCellEditor(new TextFieldEditor()));
		setUpProductColumn(colwithCombo,colwithCheck);
		
		//Add combonents to table
		addComponents();

	}//EOF retail()  

	// Table Columns
	public void addColumns(String[] colName){
		for(int i=0;i<colName.length;i++)
			columns.addElement((String) colName[i]);
	}
		
	// Add Row
	public void addRow(){ 
		Vector r=new Vector();
		r=addBlankElement();
		rows.addElement(r);
		table.addNotify();	
        int rowcnt = tabModel.getRowCount();   
        
	}
			
	 public Vector addBlankElement(){
		Vector t = new Vector();
		t.addElement((String) "");
		t.addElement(new Boolean(false));
		//t.addElement((String) "");
		t.addElement((String) "");
		t.addElement((String) "");
		t.addElement((String) "");
		t.addElement((String) "");	
		t.addElement((String) "");
		t.addElement((String) "");	
		t.addElement((String) "");	
		return t;
	}
			
	void deleteRow(int index){
		if(index!=-1)//At least one Row in Table
		{ 
			rows.removeElementAt(index);
			table.addNotify();
		}	
	}//Delete Row
	
	public void setTabFocus(){
        table = new JTable(tabModel)
        {
            public boolean isCellEditable(int row, int column)
            {             	
            	if(column ==0 || column ==4 || column ==1 || column ==8)
            		return true;
            	else
            		return false;
            }
 
            public void changeSelection(final int row, final int column, boolean toggle, boolean extend)
            {
                super.changeSelection(row, column, toggle, extend);
                if (editCellAt(row, column))
                    getEditorComponent().requestFocusInWindow();               
            } 
//-------------------------------------------------------------------------------------------------            
/*						Code for CheckBox																				 */            
//-------------------------------------------------------------------------------------------------            
            CellValueRenderer renderer = new CellValueRenderer();
            
            public TableCellRenderer getCellRenderer(int row, int col) {
                if(col > 1) {
                    return renderer;                       
                }
                return super.getCellRenderer(row, col);
            }
            
            public Class getColumnClass(int col) {
                if( col == 1)  {
                    return Boolean.class;                	
                }
                return super.getColumnClass(col);
            }	            
            
            
        };

	}

	
	public void addComponents(){
		buttonPanel = new JPanel();
		innerbuttonPanel = new JPanel();
		buttonPanel.setLayout(new GridLayout(2,1,0,0));
		
		addButton = new JButton("Add New Row");
		clearButton = new JButton("Clear");
		deleteButton = new JButton("Delete");
		saveButton = new JButton("Save & Print");
		cancelButton = new JButton("Cancel");
		addButton.setMnemonic(KeyEvent.VK_N);
		clearButton.setMnemonic(KeyEvent.VK_C);
		deleteButton.setMnemonic(KeyEvent.VK_D);
		saveButton.setMnemonic(KeyEvent.VK_S);
		saveButton.setMnemonic(KeyEvent.VK_ENTER);
		cancelButton.setMnemonic(KeyEvent.VK_B);
		wholeLabelPanel = new JPanel(new FlowLayout(0,0,0));
		labelPanel1 = new JPanel(new GridLayout(3,1,0,0));
		emptyPanel = new JPanel(new GridLayout(3,1,0,0));
		labelPanel2 = new JPanel(new GridLayout(3,1,0,0));
		labelPanel3 = new JPanel(new GridLayout(2,1,0,0));
		emptyPanel1 = new JPanel(new GridLayout(3,1,0,0));
		labelPanel4 = new JPanel(new GridLayout(3,1,0,0));
		
		totalItems = new JLabel("Total Items :");
		totalItemFld =  new JLabel();
		pickUp = new JLabel("PickUp         :");
		pickUpFld =  new JLabel();
		deliver = new JLabel("Deliver         :");
		deliverFld =  new JLabel();
		
		emptyFld = new JLabel("                                  ");
		
		paymentLbl = new JLabel("Payment :");
		
		paymentCombo = new JComboBox();	
		paymentCombo.addItem("Select Type");
		try{
			stmt = con.createStatement();
			rs4 = stmt.executeQuery("select payment_type_desc from payment_type");
			while (rs4.next()) {
				paymentCombo.addItem(rs4.getString(1));
			}
			rs4.close();
			stmt.close();
		}catch(Exception e){
			System.out.println("Exception in loading payment type"+e);
		}
		emptyFld1 = new JLabel("  ");
		
		totalPrice = new JLabel("Total Price :");
		totalField = new JLabel();
		totalMrp = new JLabel("Total MRP  :");
		totalMrpFld =  new JLabel();				
		savingLbl =  new JLabel("saving         :");
		savingFld =  new JLabel();
		
		labelPanel1.add(totalItems);
		labelPanel1.add(totalItemFld);
	    labelPanel1.add(pickUp);
	    labelPanel1.add(pickUpFld);
	    labelPanel1.add(deliver);
	    labelPanel1.add(deliverFld);
	    
	    emptyPanel.add(emptyFld); 
	    
		labelPanel2.add(paymentLbl);
		
		labelPanel3.add(paymentCombo);
		
		emptyPanel1.add(emptyFld1); 
		
		labelPanel4.add(totalPrice);
	    labelPanel4.add(totalField);
	    labelPanel4.add(totalMrp);
	    labelPanel4.add(totalMrpFld);
	    labelPanel4.add(savingLbl);
	    labelPanel4.add(savingFld);
	    
	    wholeLabelPanel.add(labelPanel1);
	    wholeLabelPanel.add(emptyPanel);
	    wholeLabelPanel.add(labelPanel2);
	    wholeLabelPanel.add(labelPanel3);
	    wholeLabelPanel.add(emptyPanel1);
	    wholeLabelPanel.add(labelPanel4);

		innerbuttonPanel.add(addButton);
		innerbuttonPanel.add(saveButton);	
		innerbuttonPanel.add(clearButton);
		innerbuttonPanel.add(deleteButton);		
		innerbuttonPanel.add(cancelButton);
	
		buttonPanel.add(wholeLabelPanel);
		buttonPanel.add(innerbuttonPanel);
	
		addButton.addActionListener(this);
		clearButton.addActionListener(this);
		deleteButton.addActionListener(this);
		saveButton.addActionListener(this);
		cancelButton.addActionListener(this);

		mainPanel=new JPanel();
		tablePanel=new JPanel();

		mainPanel.setLayout(new BorderLayout());
		mainPanel.add("Center",scrollPane);
		mainPanel.add("South",buttonPanel);
		tablePanel.setBackground(Color.white);
		buttonPanel.setBackground(Color.white);
		table.getParent().setBackground(Color.white);
		getContentPane().add(mainPanel);
	}
	
	public void setUpProductColumn(TableColumn productColumn , TableColumn checkColumn){
		//Set up the editor for the ProductName cells.
		try{			
			String query="SELECT DISTINCT item_name from item_master order by item_name";			
			rs = getValstmt.executeQuery(query);			
			while(rs.next()){
				productArray.add(rs.getString(1));
			}	
			rs.close();		
				
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setToolTipText("Click the Product to see a list of choices");
			productColumn.setCellRenderer(renderer);
		  }//EOF Try
		catch(Exception e){

			System.out.println("Could not connect to database"+e);

		}// catch

	}//EOF setUpProductColumn
			
//	This method is to implement the change in table cells
	public void tableChanged(javax.swing.event.TableModelEvent source){
		switch (source.getType())
		{
			case TableModelEvent.UPDATE:
				//System.out.println("Cell Edited==>>"+table.getValueAt(table.getEditingRow(),table.getEditingColumn()));
		}
		/*		if(source.getColumn()==1){
			//System.out.println("Checkbox value is"+table.getValueAt(table.getSelectedRow(),1));
			int checkQuantityFlag=0;
			checkboxFlag++;
			checkQuantityFlag =  checkQuantity();		
			if(checkQuantityFlag == 1 ){
				setQuantityFlag++;
				//System.out.println("checkQuantityFlag is == "+checkQuantityFlag+"setFlag"+setQuantityFlag+"checkboxFlag="+checkboxFlag);
				if(setQuantityFlag == 1){
					table.setValueAt(false, table.getSelectedRow(), 1);
					setQuantityFlag=0;
					System.out.println("Checkbox assigned to false");					
				}
			}
			else{
				System.out.println("checkQuantityFlag is == "+checkQuantityFlag);
			}
			
		}// EOF col 1	
*/		      						

		if(source.getColumn()==0){
			//System.out.println("Checking product column redundancy");
			//checkSelctedProduct();
		}
		
		if(source.getColumn()==4){
			//setTotalPrice();
			//setOverallTotal();
		}
		
		// Set pickup label
		if(source.getColumn()==1){
			pickValue = 0;
    		int rowCount= table.getRowCount();
    		//System.out.println("RowCount"+rowCount);
    		if(rowCount>0){
    			for(int pickYes=0; pickYes<rowCount; pickYes++ ){
    				Object obj=table.getValueAt(pickYes, 1);
    				if(obj.toString()=="true"){
    					pickValue++;
    				}
    			}
    		}
    		setPickupLabel(pickValue);
		}// EOF col 1			


	}//Table Changed Method			
	
	public void actionPerformed(ActionEvent source)
	{try{
		if (source.getSource()==(JButton) addButton)
		{		
			addRow();	
			itemCount++;
			deliverCount= itemCount-pickValue;
			totalItemFld.setText(Integer.toString(itemCount));
			totalItemFld.setForeground(Color.blue);
			deliverFld.setText(Integer.toString(deliverCount));
			deliverFld.setForeground(Color.blue);
			//System.out.println("In actionPerformed for addButton "+itemCount);
		}
		else if (source.getSource()==(JButton) deleteButton)
		{
			int totalCost = 0;			
			int totalmrpCost = 0;
			
			deleteRow(table.getSelectedRow());
			if(itemCount>0 && table.getSelectedRow()!=-1 )
				{
				//System.out.println("delete count"+itemCount);
				itemCount--;	
				deliverCount= itemCount-pickValue;
				totalItemFld.setText(Integer.toString(itemCount));
				deliverFld.setText(Integer.toString(deliverCount));
				//----pickUpFld.setText(Integer.toString(pickUpCnt));
				TextFieldEditor tf = new TextFieldEditor();
				tf.setOverallTotal();
			}			
			//System.out.println("In actionPerformed for deleteButton "+itemCount);
		}
		else if (source.getSource()==(JButton) saveButton)
		{
			String ans = checkSelctedProduct();
			if(ans.equals("1")){
				String ans1 = checkPaymentType();
				if(ans1.equals("1")){		
					System.out.println("For saveButtton");
					// calculate order number		
					max=mo.getOrderNum();
					String status = mo.getStatus("SUBMITTED");
					
					int totalItems = table.getRowCount();
					totalMrpFld.getText();
					savingFld.getText();				
					
					double totOrderValue = Double.parseDouble(totalField.getText());
					double totMRPValue = Double.parseDouble(totalMrpFld.getText());
					double totDisValue = Double.parseDouble(savingFld.getText());					
					
					try{
						String query2="SELECT payment_type_code from payment_type where payment_type_desc='"+pay_type+"'";
						System.out.println(query2);
						rs3 = getValstmt2.executeQuery(query2);			
						while(rs3.next()){
							 p_code = rs3.getString(1);
						}	
						rs3.close();						
					}catch(Exception e){
						System.out.println("Error in Payment_code "+e);
					}			
					
					mo.addOrders(max, customerCode, totalItems, pickValue, totOrderValue, totMRPValue, totDisValue, user, p_code, status);
					// add Order Details
					for(int i=0; i< table.getRowCount(); i++){						
						try{
							String query1="SELECT item_code from item_master where item_name='"+table.getValueAt(i, 0)+"'";			
							rs2 = getValstmt1.executeQuery(query1);			
							while(rs2.next()){
								 item_code = rs2.getString(1);
							}
							rs2.close();
							
						}catch(Exception e){
							System.out.println("Error in item_code "+e);
						}	
						
						if(table.getValueAt(i, 1).toString()== "true")  pickup_ind = 1;	
						else pickup_ind = 0;
						
						double itemRate= Double.parseDouble((String)table.getValueAt(i, 3));
						double itemQty = Double.parseDouble((String) table.getValueAt(i, 4));
						double totItemPrice= Double.parseDouble((String)table.getValueAt(i, 5));	
						double itemMRP= Double.parseDouble((String)table.getValueAt(i, 6));
						
						double totItemDisAmt= Double.parseDouble((String)table.getValueAt(i, 7));
						
						if(table.getValueAt(i, 8).toString() != "0.00"){
							
							disRemark = totItemDisAmt+ "(@Rs " + totItemPrice +" per " + itemQty+ " QTYs)";
						}else {
							 disRemark = (String)table.getValueAt(i, 8);	
						}
						mo.addOrderDetail(max, item_code, itemRate, itemQty, totItemPrice, totItemDisAmt, disRemark, itemMRP, i, pickup_ind);
					}					
				 	try{		
				 		win = JSObject.getWindow(this);	
				 		if(!backPage.equals("create_newCustomer.jsp")) backPage="customer_detailsForm.jsp";
				 		String msg = "document.myform.action='print_order1.jsp?backPage="+backPage+"&orderNo=" + max +"'";
				 		 System.out.println(msg);
				         win.eval(msg);
				         win.eval("document.myform.submit();");
					}
					catch(JSException e){
						String error="Not get Win Object";
					}
				}
			}

		}
		else if (source.getSource()==(JButton) cancelButton)
		{
			try{
				win = JSObject.getWindow(this);
				win.call("showMsg",null);
		        win.eval("document.myform.submit()");
			}
			catch(JSException e){
				String error="Not get Win Object";
			}	
			//System.out.println("For cancelButton");
		}
		else if (source.getSource()==(JButton) clearButton)
		{
			try{
				win = JSObject.getWindow(this);
				win.eval("window.location.reload(false)");
				win.eval("document.myform.submit()");
			}
			catch(JSException e){
				String error="Not get Win Object";
			}	
			//System.out.println("For cancelButton");
		}
	}
	catch(ArrayIndexOutOfBoundsException aie){
		System.out.println("Error occured in actionPerformed "+ aie);
	}

	}// EOF ActionList
	
	public void setCellValues(String productName){		
		try{
			getItemstmt = con.createStatement();
			String insertIntoCellQuery = "SELECT item_weight,item_rate,deal_on_qty,deal_amount,item_mrp FROM item_master where item_name='"+productName+"'";
			rs1 = getItemstmt.executeQuery(insertIntoCellQuery);
			if(rs1.next()){
				selectCell(table.getSelectedRow(),table.getSelectedColumn());
				table.setValueAt(setProdName, table.getSelectedRow(), 0);
				//table.setValueAt(new Boolean(false), table.getSelectedRow(), 1);
				table.setValueAt(rs1.getString(1), table.getSelectedRow(), 2);
				table.setValueAt(rs1.getString(2), table.getSelectedRow(), 3);
				item_mrp = rs1.getDouble(5);
				table.setValueAt("0", table.getSelectedRow(), 4);
				table.setValueAt("0", table.getSelectedRow(), 5);
				table.setValueAt(rs1.getString(5), table.getSelectedRow(), 6);
				table.setValueAt("0", table.getSelectedRow(), 7);
				table.setValueAt("", table.getSelectedRow(), 8);
			}
			
		}
		catch(Exception se){
			System.out.println("Exception Occured while inserting data in table cells"+se);
		}
     }
    
	
	public String checkSelctedProduct(){
		try{
			//System.out.println("In checkSelctedProduct");
			Vector vec = new Vector();
			for(int i=0; i< table.getRowCount(); i++){
					vec.add(table.getValueAt(i, 0));
			}
			String message = "Duplicate entry for:";
			int rowCount = table.getRowCount(),flagCount=0;
			String str1,str2,matchString="";
			for(int row = 0; row < rowCount; row++){
				 str1 = (String)table.getValueAt(row, 0);
					if(flagCount>0){					
						message = message+matchString;
						JOptionPane.showMessageDialog(null,message,"RMS",JOptionPane.INFORMATION_MESSAGE);
						return("0");					
					}
				for(int j = 0;  j< vec.size(); j++){
					if(row!=j){
						str2 = (String)table.getValueAt(j, 0);
						if(str1.equalsIgnoreCase(str2)){
							flagCount++;
							matchString = str1;
							//System.out.println("SAME ELEMENTS"+"\tstr1="+str1+"\tstr1"+str2);
							//System.out.println("At position =>"+j+"Flag Value =>"+flagCount);
							break;
						}
					}				
				}
			}
			return("1");
		}
		catch(ArrayIndexOutOfBoundsException aie){
			System.out.println("Exception in checkSelctedProduct" +aie);
			return("0");
		}
	}
	
	public int checkQuantity(){
	try{
		String quantityVal =(String)(table.getValueAt(table.getSelectedRow(), 4));

		if(quantityVal.equals("")){
			//System.out.println("For checking blank ");
			String  message="Quantity cannot be blank";
			JOptionPane.showMessageDialog(null,message,"RMS",JOptionPane.INFORMATION_MESSAGE);
			System.out.println("Returning one in checkQuantity()");
			return 1;
		}
	}
	catch(NumberFormatException nfe){
		System.out.println("Error while editing cell"+nfe);
	}
	System.out.println("Returning zero in checkQuantity()");
		return 0;
}

	
	public String checkPaymentType(){
		String message = "Please select payment term";
		String noItemsMsg = "No items Selected";
		if(paymentCombo.getSelectedItem() == "Select Type" && table.getRowCount()>0){
			JOptionPane.showMessageDialog(null,message,"RMS",JOptionPane.INFORMATION_MESSAGE);
			return("0");
		}else{
			pay_type = (String)paymentCombo.getSelectedItem();
			
		}
		if(table.getRowCount()==0){
			JOptionPane.showMessageDialog(null,noItemsMsg,"RMS",JOptionPane.INFORMATION_MESSAGE);
			return("0");
		}
		return("1");
		
			
	}
	
	public void setPickupLabel(int pickValue){		
		objTemp=Integer.toString(pickValue);
		pickUpFld.setText(objTemp.toString());
		pickUpFld.setForeground(Color.BLUE);
		deliverCount= itemCount-pickValue;
		System.out.println(deliverCount);
		deliverFld.setText(Integer.toString(deliverCount));
		deliverFld.setForeground(Color.blue);
	}
	
	
	public void selectCell(int row,int col)
	{
		if(row!=-1 && col !=-1)            
		{
			table.setRowSelectionInterval(row,row);
			table.setColumnSelectionInterval(col,col);
		}
	}//EOF selecCell()


//------------------------------------------------------------------------------------
	/*    ComboBox code   	*/
//------------------------------------------------------------------------------------	
	public class ComboBoxEditor extends JComboBox implements TableCellEditor{

	  JTextComponent editor;

	  Object newValue;	  	  
	  
	  public ComboBoxEditor() {
	    super();
	    setEditable(true);
	    setEnabled(true);
	    editor = (JTextComponent) getEditor().getEditorComponent();
	    editor.addMouseListener(new MouseAdapter(){

	    	public void mouseReleased(MouseEvent me) {
	    		setProdName = editor.getText();
	    		setCellValues(setProdName);
	    	} 
	    });
	    editor.addKeyListener(new KeyAdapter(){
    		String temp="";

        	public void keyReleased(KeyEvent ke){        	

        		if((ke.getKeyCode()==KeyEvent.VK_DOWN)){
        			setPopupVisible(true);
        		}
        		if ((ke.getKeyCode() == KeyEvent.VK_ESCAPE)){
        			if(isPopupVisible())
        				setPopupVisible(false);        				
        		}
        		
        		if (ke.getKeyCode() == KeyEvent.VK_ENTER){
        			setProdName = editor.getText();
        			if(table.getRowCount()>0)
        				setCellValues(setProdName);  
        		}
        		
        		if(!(ke.getKeyCode()==KeyEvent.VK_DOWN) && !(ke.getKeyCode()==KeyEvent.VK_UP)
        			&& !(ke.getKeyCode()==KeyEvent.VK_LEFT) && !(ke.getKeyCode()==KeyEvent.VK_RIGHT)
        			&& !(ke.getKeyCode()==KeyEvent.VK_ENTER) && !(ke.getKeyCode()==KeyEvent.VK_TAB)
        			&& !(ke.getKeyCode()==KeyEvent.VK_SHIFT) && !(ke.getKeyCode()==KeyEvent.VK_HOME)
        			&& !(ke.getKeyCode()==KeyEvent.VK_PAGE_UP) && !(ke.getKeyCode()==KeyEvent.VK_PAGE_DOWN)) {
        			try{
        				temp = editor.getText();

        				while(getItemCount()!=0)
        					removeItemAt(0);
        				
        				String str="";
        				
        				if (temp.trim().length()>0){
	        				for(int i=0; i<productArray.size(); i++){
	        					str = productArray.get(i).toString();
	        					if(str.toUpperCase().startsWith(temp.toUpperCase())){
	        						addItem(str);
	        					}
	        				}
        				}
        				setProdName = temp;        				
        				if(setProdName == ""){
        					hidePopup();
        				}
        				else
        					showPopup();
        				editor.setText(temp);

        			}
        			catch(Exception e){
        				System.out.println("Error occured in KeyReleased"+e);
        			}
        		}
        	
        	}	        	
        });
	    
	    addActionListener(new ActionListener() {
	      public void actionPerformed(ActionEvent event) {
	    	  //System.out.println("----In actionListener----"+editor.getText()+"  "+count);	    	  
	      }
	    });
	  }	  

	  public void addCellEditorListener(CellEditorListener listener) {
	   // listenerList.add(CellEditorListener.class, listener);
	   // System.out.println("----In addCellEditorListener----");
	  }

	  public void removeCellEditorListener(CellEditorListener listener) {
	    //listenerList.remove(CellEditorListener.class, listener);
	    //System.out.println("----In removeCellEditorListener----");
	  }

	  public void fireEditingStopped() {
	    //System.out.println("fireEditingStopped called ");
	  }

	  public void fireEditingCanceled() {
		 //System.out.println("----In fireEditingCanceled----");

	  }

	  public void cancelCellEditing() {
	    //System.out.println("cancelCellEditing called ");
	    fireEditingCanceled();
	  }

	  public boolean stopCellEditing() {
	   // System.out.println("stopCellEditing called ");
	   // fireEditingStopped();
	    return true;
	  }

	  public boolean isCellEditable(EventObject event) {
		//System.out.println("----In isCellEditable----");
	    return true;
	  }

	  public boolean shouldSelectCell(EventObject event) {
		  //System.out.println("----In shouldSelectCell----");
	    return true;
	  }

	  public Object getCellEditorValue() {
	   // System.out.println("getCellEditorValue called returning vlaue: " + newValue);
	    return this;
	  }

	  public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected,
	      int row, int column) {
	    return this;
	  }
	  
	}// EOF ComboBoxEditor
		
//	-----------------------------------------------------------------------------------
	/* CheckBox Class Code*/
//-----------------------------------------------------------------------------------	
	

//--------------------------------------------------------------------------------------------------------------//
/*/						TextFieldEditor Class																  *///
//--------------------------------------------------------------------------------------------------------------//	
	
//	TextField
	public class TextFieldEditor extends JTextField{
		public TextFieldEditor(){
			super();
			System.out.println("In TextFieldEditor Constructor..");
			addKeyListener(new KeyAdapter(){
				public void keyReleased(KeyEvent ke){ 
					//System.out.println("In KeyRealeased..");
					System.out.println("Text Value=="+getText()+"KeyCode=="+ke.getKeyCode());
					if((ke.getKeyCode()>=96) && (ke.getKeyCode()<=105) || (ke.getKeyCode()>=48) && (ke.getKeyCode()<=57)){
						String quantityValue="";
						quantityValue = getText();
						setTotalPrice(quantityValue);
						setOverallTotal();
						
					}
				}       	

			}); //EOF KeyListener Adapter inner Class
			
		} // EOF TextFieldEditor constructor..
		
		public void setTotalPrice(String quantityValue){
			try{
				//System.out.println(" In setTotalPrice()");
				int totalCost = Integer.parseInt(quantityValue); 
				String priceValueStr = (String)table.getValueAt(table.getSelectedRow(), 3);
				int priceValue = Integer.parseInt(priceValueStr);
				int totalRate = totalCost * priceValue;
				System.out.println("TotalRate in col 5==>"+totalRate);
				table.setValueAt(Integer.toString(totalRate), table.getSelectedRow(), 5);
			}
			catch(NumberFormatException nfe){
				System.out.println("Error Occured in setTotalPrice"+nfe);
			}	
			catch(StackOverflowError soe){
				System.out.println("Error Occured in setTotalPrice"+soe);
			}
		}
		
		public void setOverallTotal(){
			try{
				int rowCount = table.getRowCount(),col = 4,totalCost = 0, totalmrpCost = 0, savCost;
				Object str = null, str1=null,sav=null;
				//System.out.println("In setOverallTotal row count==>"+rowCount);
				for(int i=0; i<rowCount; i++){
					Object total =(table.getValueAt(i, 5));
					Object totalmrp =(table.getValueAt(i, 6));
					if(total!=""){
						int totalValue = Integer.parseInt(total.toString());
						totalCost += totalValue;
					} 
					if(totalmrp!=""){
						int totalmrpValue = Integer.parseInt(total.toString());
						totalmrpCost += totalmrpValue;
					} 
				}
				savCost = totalmrpCost - totalCost;
				str = Integer.toString(totalCost);
				totalField.setText(str.toString());
				totalField.setForeground(Color.blue);
				str1 = Integer.toString(totalmrpCost);
				totalMrpFld.setText(str1.toString());
				totalMrpFld.setForeground(Color.blue);
				sav = Integer.toString(savCost);
				savingFld.setText(sav.toString());
				savingFld.setForeground(Color.blue);
				
			}
			catch(NumberFormatException nfe){
				System.out.println("Error Occured in setOverallTotal "+nfe);
			}
		}

	} //EOF TextFieldEditor Class
//	--------------------------------------------------------------------------------
	/*					Code for CellValueRenderer class for checkbox rendering */	
//	--------------------------------------------------------------------------------		
		  public class CellValueRenderer extends DefaultTableCellRenderer {
		        
		        public CellValueRenderer() {
		            super();
		        }
		        
		        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, 
		            boolean hasFocus, int row, int col) {
		            DefaultTableCellRenderer renderer = (DefaultTableCellRenderer)
		            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);
		            return renderer;
		        }
		    }//EOF CellValueRenderer class
	
	
	
	/*	public void checkQuantity(){
		try{
			String quantityVal =(String)(table.getValueAt(table.getSelectedRow(), 4));
			String weightVal =(String)(table.getValueAt(table.getSelectedRow(), 2));
			String priceVal =(String)(table.getValueAt(table.getSelectedRow(), 3));
			if(quantityVal.equals("")){
				System.out.println("For checking blank ");
				String  message="Quantity cannot be blank";
				JOptionPane.showMessageDialog(null,message,"RMS",JOptionPane.INFORMATION_MESSAGE);
			}
			else if( weightVal.equals("")){
				System.out.println("Validating weight price ");
				String  wMessage="Weight cannot be blank";
				JOptionPane.showMessageDialog(null,wMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);				
			}
			else if(weightVal.equals("") && priceVal.equals("")){
				System.out.println("Validating weight price ");
				String  wpMessage="Weight and Price cannot be blank";
				JOptionPane.showMessageDialog(null,wpMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);				
			}
			else if(priceVal.equals("")){
				System.out.println("Validating weight price ");
				String  pMessage="Price cannot be blank";
				JOptionPane.showMessageDialog(null,pMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);				
			}
		}
		catch(NumberFormatException nfe){
			System.out.println("Error while editing cell"+nfe);
		}
	}
	*/	
	
}//EOF RetailSys class

/*try{
URL url = new URL("http://localhost:8080/rms/customer_detailsForm.jsp");
this.getAppletContext().showDocument(url);
System.out.println("complete");
}
catch(MalformedURLException m){
System.out.println("MalformedURLException: "+ m);
}*/






---------------------------------------------------------------
<%@ page import="java.sql.*" %>
<%@ page import="javax.naming.*" %>
<%@ page import="javax.sql.*" %>
<%@ page import="java.text.*" %>
<%@ page import="java.io.*" %>
<jsp:include page="sessionBoth.jsp" />
<%@page contentType="text/html"%>
<script src=js/ScrollableTable.js></script>
	<script type="text/javascript" src="ajax-dynamic-list/js/ajax.js"></script>
	<script type="text/javascript" src="ajax-dynamic-list/js/ajax-dynamic-list.js"></script>
	<script src="js/customerBillOrder.js"></script>
	<script src="js/lastOrderDetails.js"></script>
	<link rel="stylesheet" type="text/css" href="stylesheet/menu.css" />
	<link rel="stylesheet" href="ajax-dynamic-list/css/autosuggest_inquisitor.css" type="text/css" media="screen" charset="utf-8" />

<style type="text/css">

hr {
color: gray;

height: 3px;
}


	body {
		font-family: Lucida Grande, Arial, sans-serif;
		font-size: 10px;
		text-align: center;
		margin: 0;
		padding: 0;
		color: black;
		
	}
	
	table
	{
		border: 1px;
		
		font-size: 10px;
	}
	tr,
	{
		vertical-align: top;
		height:5px;
	}
	th
	{
		text-align: left;
		background-color:#FFE4C4
	}
	th,
	td
	{
		padding: 0px;
		font-family: Lucida Grande, Arial, sans-serif;
		font-size: 1.2em;
		height: 5px;
		
	}
	
	
	a {
		font-weight: bold;
		text-decoration: none;
		color: #f30;
	}
	INPUT{ 
		height: 16px;
	    font-size:9px;  
	    line-height: 9px; 
	}
	input.button{ 
		height: 20px;
	    font-size:20px;  
	    line-height: 20px;
	}

	
	a:hover {
		color: #fff;
		background-color: #f30; 
	}
	
	
	#content h1 {
		font-size: 1.6em;
		border-bottom: 1px solid #ccc;
		padding: 5px 0 5px 0;
	}

	#content h2 {
		font-size: 1.2em;
		margin-top: 3em;
	}
</style>			




<%
	
  	String custCode="";
  	custCode=request.getParameter("cuscode");
  	String area="";
  	area=request.getParameter("area");
  	String add1="";
  	add1=request.getParameter("add1");
  	String add2="";
  	add2=request.getParameter("add2");
  	String backPage="";
  	backPage=request.getParameter("backPage");
  	
  	
  	
  	customer.ManageCustomer c;
	c = new customer.ManageCustomer("jdbc/js");
	c.customerInfo(custCode); 
	String name="",phno="";
	String last_order_date="";
	
	int last_order_num=0;
	int tot_orders_3=0;
	int tot_orders_6=0;
	int tot_orders_12=0;
	int avg_items_3=0;
	int avg_items_6=0;
	int avg_items_12=0;
	
	float fmcg_per_3=0.0f;
	float fmcg_per_6=0.0f;
	float fmcg_per_12=0.0f;
	float tot_savings_3=0.0f;
	float tot_savings_6=0.0f;
	float tot_savings_12=0.0f;
	float tot_value_3=0.0f;
	float tot_value_6=0.0f;
	float tot_value_12=0.0f;

	while(c.rs.next()){
		int i=1;
		  
		name=c.rs.getString(i++);
		phno=c.rs.getString(i++);
		custCode=c.rs.getString(i++);
		fmcg_per_3=c.rs.getFloat(i++);
		last_order_date=c.rs.getString(i++);
		last_order_num=c.rs.getInt(i++);
		
		fmcg_per_6=c.rs.getFloat(i++);
		fmcg_per_12=c.rs.getFloat(i++);
		
		tot_orders_3=c.rs.getInt(i++);
		tot_orders_6=c.rs.getInt(i++);
		tot_orders_12=c.rs.getInt(i++);
		
		tot_savings_3=c.rs.getFloat(i++);
		tot_savings_6=c.rs.getFloat(i++);
		tot_savings_12=c.rs.getFloat(i++);
		
		tot_value_3=c.rs.getFloat(i++);
		tot_value_6=c.rs.getFloat(i++);
		tot_value_12=c.rs.getFloat(i++);
		
		avg_items_3=c.rs.getInt(i++);
		avg_items_6=c.rs.getInt(i++);
		avg_items_12=c.rs.getInt(i++);
				
	}
  	
	c.closeAll();
%>  

	
<form name="myform" method="post" class="ddm1">
	
	<center><h4>Enter Order Details</h4></center>
	
	<table width="100%" class="item3"  border="1" style="background-color:#FFE4C4">
	
	<tr>
		<td>
	<table id="1" border="0" align="left" width="400">
	
	<tr><th colspan="6"><center><b>Customer Information</b></center> </th></tr>
	<tr></tr><TR></TR>
	<tr></tr><TR></TR>
	<tr></tr><TR></TR>
	<tr>		
		<td> <b>Code&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp: </b><%=custCode%></td>	
	</tr>
	<tr>		
		<td> <b>Name &nbsp&nbsp&nbsp&nbsp&nbsp: </b> <%=name%> </td>	
	</tr>
	<tr>		
		<td><b>Address&nbsp: </b><%=area%>,<%=add1%></td>		
	</tr>
	<tr>		
		<td><b>Phone &nbsp&nbsp&nbsp&nbsp:</b> <%=phno%></td>		
	</tr>
	</table></td>	
	<td>
	<table  border="1" align="left"  width="300">
	<tr><th colspan="4"><center><b>Purchase Pattern</b></center> </th></tr>
		<tr>
			
			<td></td>
			<td><b>3M</b></td>
			<td><b>6M</b></td>
			<td><b>12M</b></td>
		</tr>	
		<tr>
			<td><b>Orders</b></td>
			<td align="right"><%=tot_orders_3%></td>	
			<td align="right"><%=tot_orders_6%></td>	
			<td align="right"><%=tot_orders_12%></td>	
		</tr>
		<tr>
			<td><b>FMCG (%)</b></td>
			<td align="right"><%=fmcg_per_3%></td>
			<td align="right"><%=fmcg_per_6%></td>
			<td align="right"><%=fmcg_per_12%></td>	
		</tr>
		<tr>
			<td><b>Value</b></td>
			<td align="right"><%=tot_value_3%></td>
			<td align="right"><%=tot_value_6%></td>
			<td align="right"><%=tot_value_12%></td>
		</tr>	
		<tr>
			<td><b>Savings</b></td>
			<td align="right"><%=tot_savings_3%></td>
			<td align="right"><%=tot_savings_6%></td>
			<td align="right"><%=tot_savings_12%></td>
		</tr>
		<tr>
			<td><b>AVG Items</b></td>
			<td align="right"><%=avg_items_3%></td>
			<td align="right"><%=avg_items_6%></td>
			<td align="right"><%=avg_items_12%></td>
		</tr>
	
 	</table>
 	<table id="1" border="1" align="right" width="300">
 			<tr>
			<td><b>AVG Items</b></td>
			<td><%=avg_items_3%></td>
			<td><%=avg_items_6%></td>
			<td><%=avg_items_12%></td>
		</tr>
 	</table>
 	</td></tr></table>
 	<br><center><hr><br>
	<table border="1" align="center">
 	<tr><td> 	   
	<table id="ItemTable" border="1" align="center" width="960" >
	<thead>
		<tr>
			<th colspan="10" style="background-color:#ccc"><center><b>Order Details</b></center></th>
		</tr>
		
		<tr>
			<td width="30%"><b>Item</b></td>
			<td width="5%"></td>
			<td width="5%"><b>Rate</b></td>
			<td width="8%"><b>Weight</b></td>
			<td width="7%"><b>Qty</b></td>
			<td colspan="2" width="20%"><b><center>Price</center></b></td>
			<td colspan="2" width="20%"><b><center>Deals</center></b></td>
			<td width="5%"></td>
		</tr>
		
		<tr>
			<td colspan=5 width="60%">&nbsp;</td>
			<td width="10%"><b>Janta's Price</b></td>
			<td width="10%" valign="top"><b>MRP</b></td>
			<td width="5%"><b>Discount</b></td>
			<td width="15%"><b>Remark</b></td>
			<td width="5%"></td>
		</tr>
		</thead>
		<tbody>
		<tr></tr>		</tbody></table>
	<table>
		<tr>
				<th align='left' width="30%" style="background-color:#ccc"> <div id='totalSel'><b>Total items: 0 </b></div></th> 
			 	
			
				<th width="5%" style="background-color:#ccc"><b>Payment:<b></th>
<%	
	Connection conn=null;
	Statement stmt=null,stat=null;
	ResultSet rs=null;
	try {
		String code,desc;
		Context initContext = new InitialContext();
		Context envContext  = (Context)initContext.lookup("java:/comp/env");
		DataSource ds = (DataSource)envContext.lookup("jdbc/js");
		conn = ds.getConnection();
		stmt = conn.createStatement();
		rs = stmt.executeQuery("select payment_type_code, payment_type_desc from payment_type");
%>
			      	<th width="10%" style="background-color:#ccc">
						<SELECT name="p_type">
						<OPTION VALUE="" >Select Type
<% 
	
	 	while (rs.next()) {
	 		code = rs.getString(1);
	 		desc = rs.getString(2);
%>
			<OPTION VALUE="<%= code%>" ><%= desc%>
<%
		}	
	    rs.close();
	    stmt.close();
	    conn.close();
	  }
	  catch (Exception e) {
        e.getMessage();
        e.printStackTrace();
      }
	    
%>
					</th>
					<th align='right' width="7%" style="background-color:#ccc"><div id='totalAmtDisp' align="left"><b>Total  : </th><th width="10%" style="background-color:#ccc"><div id='totalAmt' align="right">0</div></th>
			<th colspan=5 width="48%" style="background-color:#ccc"></th>
			
					</SELECT>	
		
</th>
		</tr>
		
	</table>
	
	</td></tr>
	

	<input type="hidden" name="horderNo" value="<%=last_order_num%>">
	<input type="hidden" name="horderDate" value="<%=last_order_date%>">
	<input type="hidden" name="htotalSel">
	<input type="hidden" name="hidCount">
	<input type="hidden" name="htotOrderValue">
	<input type="hidden" name="htotMRPValue">
	<input type="hidden" name="htotPickup" value="0">
	<input type="hidden" name="cusCode" value="<%=custCode%>"> 
	<tr><td>	
	
	<input type="button" accesskey="c" name="Clear" value="Clear <Alt+c>"  onClick="window.location.reload(false)" />&nbsp&nbsp&nbsp
	<input type="button" accesskey="b" name="Cancel" value="Cancel <Alt+b>"  onClick="showMsg()" />&nbsp&nbsp&nbsp
	<input type="hidden" name="backPage" value="<%=backPage%>" >
	</td></tr>
	
	</table><br><br>
	<center><hr><br>
	<div id="txtHint" class="ddm1">	</div>
	<p><h1><center><div id="waitMessage"  style="cursor: sw-resize"></center></div></h1></p>
	
	


	
	<script type="text/javascript">		
		var allowBackspace = false;
		document.onkeydown = checkKey;
			function checkKey() {
			var key = event.keyCode;
			
			if (key==8) {
			if (allowBackspace==false) {
					return false;
				}
				else 
				{
					return true;						
				}
			}
		}
		
		
		window.onload= showHint; 
		
	function showMsg(){
		var backPage=document.myform.backPage.value;
	
		if(backPage =="create_newCustomer.jsp"){
	  	 window.close();
	   	}else{
	   		window.history.back();
	   		
	   	}
	}
   	</script>
	
	</form>
	</body>
	
	</html>


//--------------------------------------------
/*import javax.swing.*;
import javax.swing.event.CellEditorListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.text.JTextComponent;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.*;
import java.sql.*;
import java.util.EventObject;
import java.util.Vector;

import java.net.URL;
import java.net.MalformedURLException;
import netscape.javascript.JSObject; 
import netscape.javascript.JSException;

// TableModelListener to be implemented for tableChanged event/function
public class CustomerOrderApplet extends JApplet implements ActionListener, TableModelListener{
	JTable table;
	JSObject win;
	Vector rows,columns;
	DefaultTableModel tabModel;
	JScrollPane scrollPane;
	JButton addButton,deleteButton,saveButton,cancelButton;
	JCheckBox checkBox = new JCheckBox();
	JComboBox paymentCombo; 
	JLabel totalPrice,totalField,totalMrp,totalItems,pickUp,deliver,paymentLbl,savingLbl,
		   totalItemFld,pickUpFld,deliverFld,totalMrpFld,savingFld;
	JPanel tablePanel,innerbuttonPanel,buttonPanel,mainPanel,labelPanel;//labelPanel1;
	JTextComponent editor;
	Connection con=null;
	ResultSet rs=null,rs1=null; 
	Statement getValstmt=null,getItemstmt=null;	
	String productValue,setProdName="", customerCode="JS";
	Vector productArray = new Vector();
	int itemCount = 0, pickUpCnt=0, max=0;
	public void init(){
		try{
				//max = Integer.parseInt(getParameter("max"));
				//customerCode = getParameter("customerCode");
				SwingUtilities.invokeAndWait(new Runnable(){
					public void run(){
						makeGUI();
						}
					}
				);
			}
			catch(Exception e){
				System.out.println("Exception occured in Init"+e);
			}
	} //EOF intit()
		
	public void makeGUI(){
		UIManager.LookAndFeelInfo[] lfi=UIManager.getInstalledLookAndFeels();
		rows=new Vector();
		columns= new Vector();
		String[] columnNames = { "Product","Check", "Weight","Price","Quantity","Total Price"};
		addColumns(columnNames);
		tabModel = new DefaultTableModel();
		tabModel.setDataVector(rows,columns);
		//table = new JTable(tabModel);
        table = new JTable(tabModel)
        {
            public boolean isCellEditable(int row, int column)
            { 
            	if(column ==0 || column ==4 || column ==1)
            		return true;
            	else
            		return false;
            }
 
            public void changeSelection(final int row, final int column, boolean toggle, boolean extend)
            {
                super.changeSelection(row, column, toggle, extend);
                if (editCellAt(row, column))
                    getEditorComponent().requestFocusInWindow();

                System.out.println("ROW=="+row+"Column=="+column);
                
            } 
        };
		scrollPane = new JScrollPane(table);//ScrollPane				
		table.setRowSelectionAllowed(false);
		
	    TableColumnModel tcm = table.getColumnModel();
	    TableColumn colwithCombo = tcm.getColumn(0);		
	    TableColumn colwithCheck = tcm.getColumn(1);
		table.getModel().addTableModelListener(this);		
		
		//Add combobox in cell
		colwithCombo.setCellEditor(new ComboEditor());
		
		//colwithCheck.setCellEditor(new DefaultCellEditor(new CheckBox()));
/*/-----------------------------------------------------------------------------------		
		// Add checkbox in cell
/*///-----------------------------------------------------------------------------------		
		colwithCheck.setPreferredWidth(25);
		CheckBoxCellEditor editor1 = new CheckBoxCellEditor();
		colwithCheck.setCellEditor(editor1);
		CheckBoxCellRendrer renderer1 = new CheckBoxCellRendrer();
		colwithCheck.setCellRenderer(renderer1);	

		setUpProductColumn(colwithCombo);
		
		buttonPanel = new JPanel();
		innerbuttonPanel = new JPanel();
		buttonPanel.setLayout(new GridLayout(3,3,3,3));
		
		addButton = new JButton("Add Row");
		deleteButton = new JButton("Delete");
		saveButton = new JButton("Save&Print");
		cancelButton = new JButton("Cancel");
		addButton.setMnemonic(KeyEvent.VK_N);
		deleteButton.setMnemonic(KeyEvent.VK_S);
		saveButton.setMnemonic(KeyEvent.VK_B);
		cancelButton.setMnemonic(KeyEvent.VK_R);
		labelPanel = new JPanel(new FlowLayout(1,2,2));
		totalPrice = new JLabel("Total Price :");	
		totalMrp = new JLabel("Total MRP :");	
		totalItems = new JLabel("Total Items :");	
		pickUp = new JLabel("PickUp :");	
		deliver = new JLabel("Deliver :");
		paymentLbl = new JLabel("Payment :");
		savingLbl =  new JLabel("saving :");
		totalField = new JLabel();
		totalItemFld =  new JLabel();
		pickUpFld =  new JLabel();
		deliverFld =  new JLabel();
		totalMrpFld =  new JLabel();
		savingFld =  new JLabel();
		paymentCombo = new JComboBox();
		paymentCombo.addItem("Select Type");
		paymentCombo.addItem("Cash");
		paymentCombo.addItem("Credit");
		paymentCombo.addItem("Hawala");
		labelPanel.add(totalItems);
		labelPanel.add(totalItemFld);
		
		labelPanel.add(paymentLbl);
		labelPanel.add(paymentCombo);
		
		labelPanel.add(totalPrice);
	    labelPanel.add(totalField);
	    
		labelPanel.add(pickUp);
		labelPanel.add(pickUpFld);
		
		labelPanel.add(totalMrp);
		labelPanel.add(totalMrpFld);
		
		labelPanel.add(deliver);
		labelPanel.add(deliverFld);
		
		labelPanel.add(savingLbl);
		labelPanel.add(savingFld);
		
		innerbuttonPanel.add(addButton);
		innerbuttonPanel.add(deleteButton);	
		innerbuttonPanel.add(saveButton);	
		innerbuttonPanel.add(cancelButton);
	
		buttonPanel.add(labelPanel);
		buttonPanel.add(innerbuttonPanel);

	
		addButton.addActionListener(this);
		deleteButton.addActionListener(this);
		saveButton.addActionListener(this);
		cancelButton.addActionListener(this);

		mainPanel=new JPanel();
		tablePanel=new JPanel();

		mainPanel.setLayout(new BorderLayout());
		mainPanel.add("Center",scrollPane);
		mainPanel.add("South",buttonPanel);
		tablePanel.setBackground(Color.white);
		buttonPanel.setBackground(Color.white);
		table.getParent().setBackground(Color.white);
		getContentPane().add(mainPanel);
	}//EOF retail()  
		
	// Table Columns
	public void addColumns(String[] colName){
		for(int i=0;i<colName.length;i++)
			columns.addElement((String) colName[i]);
	}
		
	// Add Row
	public void addRow(){ 
		Vector r=new Vector();
		r=addBlankElement();
		rows.addElement(r);
		table.addNotify();	
        int rowcnt = tabModel.getRowCount();   
        
	}
			
	 public Vector addBlankElement(){
		Vector t = new Vector();
		t.addElement((String) "");
		t.addElement((String) "");
		t.addElement((String) "");
		t.addElement((String) "");
		t.addElement((String) "");
		t.addElement((String) "");	
		return t;
	}
			
	void deleteRow(int index){
		if(index!=-1)//At least one Row in Table
		{ 
			rows.removeElementAt(index);
			table.addNotify();
		}	
	}//Delete Row
			
	public void setUpProductColumn(TableColumn productColumn) {
		//Set up the editor for the ProductName cells.
		try{
			String dburl = "jdbc:mysql://192.168.1.104/js";
			String dbuser = "dev";
			String dbpassword = "";
			String dbclassName = "com.mysql.jdbc.Driver";
			Class.forName(dbclassName);
			con = DriverManager.getConnection(dburl, dbuser, dbpassword);
			getValstmt = con.createStatement();
			
			String query="SELECT DISTINCT item_name from item_master order by item_name";			
			rs = getValstmt.executeQuery(query);			
			while(rs.next()){
				productArray.add(rs.getString(1));
			}				
			con.close();
			getValstmt.close();
			rs.close();	
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setToolTipText("Click the Product to see a list of choices");
			productColumn.setCellRenderer(renderer);
		  }//EOF Try
		catch(Exception e){

			System.out.println("Could not connect to database"+e);

		}// catch

	}//EOF setUpProductColumn
			
//	This method is to implement the change in table cells
	public void tableChanged(javax.swing.event.TableModelEvent source){
		switch (source.getType())
		{
			case TableModelEvent.UPDATE:
				if(source.getColumn()==1){
					System.out.println("Checkbox clicked on row"+table.getSelectedRow());
					//checkQuantity();			
				}
				if(source.getColumn()==0){
					System.out.println("Checking product column redundancy");
					//checkSelctedProduct();
				}
				
				if(source.getColumn()==4){
					setTotalPrice();
					setOverallTotal();
				}
		}
		

		
		//|| source.getColumn()==2 ||source.getColumn()==3 ||source.getColumn()==5


	}//Table Changed Method		
		
	public void actionPerformed(ActionEvent source)
	{try{
		if (source.getSource()==(JButton) addButton)
		{		
			addRow();	
			itemCount++;
			totalItemFld.setText(Integer.toString(itemCount));
			totalItemFld.setForeground(Color.blue);
			deliverFld.setText(Integer.toString(itemCount));
			deliverFld.setForeground(Color.blue);
			//System.out.println("In actionPerformed for addButton "+itemCount);
		}
		else if (source.getSource()==(JButton) deleteButton)
		{
			deleteRow(table.getSelectedRow());
			if(itemCount>0 && table.getSelectedRow()!=-1 )
				{
				System.out.println("delete count"+itemCount);
				itemCount--;
				totalItemFld.setText(Integer.toString(itemCount));
				deliverFld.setText(Integer.toString(itemCount));
//				/pickUpFld.setText(Integer.toString(pickUpCnt));
			}
			System.out.println("In actionPerformed for deleteButton "+itemCount);
		}
		else if (source.getSource()==(JButton) saveButton)
		{
			checkSelctedProduct();
			checkPaymentType();
			System.out.println("For saveButtton");
			ManageOrderFile mo = new ManageOrderFile("jdbc/js");
			String ans = mo.TestOrder(max,customerCode);
			System.out.println(ans);
			/*try{
				URL url = new URL("http://localhost:8080/rms/customer_detailsForm.jsp");
				this.getAppletContext().showDocument(url);
				System.out.println("complete");
			}
			catch(MalformedURLException m){
				System.out.println("MalformedURLException: "+ m);
			}*/
		/*	try{

				win = JSObject.getWindow(this);
				System.out.println(win);				
		        JSObject doc = (JSObject) win.getMember("document");
		        System.out.println(doc);
		        JSObject loc = (JSObject) doc.getMember("location");
		        System.out.println(loc);
		         String s = (String) loc.getMember("href");  
		         System.out.println(s);
		        // win.call("check", null);
		         win.eval("document.myform.action='customer_detailsForm.jsp'");
		         win.eval("document.myform.submit()");
			}
			catch(JSException e){
				String error="Not get Win Object";
			}
			





		}
		else if (source.getSource()==(JButton) cancelButton)
		{
			System.out.println("For cancelButton");
		}
	}
	catch(ArrayIndexOutOfBoundsException aie){
		System.out.println("Error occured in actionPerformed "+ aie);
	}

	}// EOF ActionList
	
	public void setCellValues(String productName){		
		try{
			String dburl = "jdbc:mysql://192.168.1.104/js";
			String dbuser = "dev";
			String dbpassword = "";
			String dbclassName = "com.mysql.jdbc.Driver";
			Class.forName(dbclassName);
			con = DriverManager.getConnection(dburl, dbuser, dbpassword);
			getItemstmt = con.createStatement();
			String insertIntoCellQuery = "SELECT item_weight,item_rate,deal_on_qty,deal_amount FROM item_master where item_name='"+productName+"'";
			rs1 = getItemstmt.executeQuery(insertIntoCellQuery);
			if(rs1.next()){
				selectCell(table.getSelectedRow(),table.getSelectedColumn());
				table.setValueAt(setProdName, table.getSelectedRow(), 0);
				//table.setValueAt(new Boolean(false), table.getSelectedRow(), 1);
				table.setValueAt(rs1.getString(1), table.getSelectedRow(), 2);
				table.setValueAt(rs1.getString(2), table.getSelectedRow(), 3);
				table.setValueAt(rs1.getString(3), table.getSelectedRow(), 4);
				table.setValueAt(rs1.getString(4), table.getSelectedRow(), 5);
			}
			
		}
		catch(Exception se){
			System.out.println("Exception Occured while inserting data in table cells"+se);
		}
     }
    
	
	public void checkSelctedProduct(){
		try{
			System.out.println("In checkSelctedProduct");
			Vector vec = new Vector();
			for(int i=0; i< table.getRowCount(); i++){
					vec.add(table.getValueAt(i, 0));
			}
	
			System.out.println(" Vcetor vec==>"+vec+"Vec Size"+vec.size()); 
			String message = "Duplicate entry for:";
			int rowCount = table.getRowCount(),flagCount=0;
			String str1,str2,matchString="";
			for(int row = 0; row < rowCount; row++){
				 str1 = (String)table.getValueAt(row, 0);
					if(flagCount>0){					
						message = message+matchString;
						JOptionPane.showMessageDialog(null,message,"RMS",JOptionPane.INFORMATION_MESSAGE);
						break;
					}
				for(int j = 0;  j< vec.size(); j++){
					if(row!=j){
						str2 = (String)table.getValueAt(j, 0);
						if(str1.equalsIgnoreCase(str2)){
							flagCount++;
							matchString = str1;
							System.out.println("SAME ELEMENTS"+"\tstr1="+str1+"\tstr1"+str2);
							System.out.println("At position =>"+j+"Flag Value =>"+flagCount);
							break;
						}
					}				
				}
			}

		}
		catch(ArrayIndexOutOfBoundsException aie){
			System.out.println("Exception in checkSelctedProduct" +aie);
		}
	}
	
	public void checkQuantity(){
	try{
		String quantityVal =(String)(table.getValueAt(table.getSelectedRow(), 4));

		if(quantityVal.equals("")){
			System.out.println("For checking blank ");
			String  message="Quantity cannot be blank";
			JOptionPane.showMessageDialog(null,message,"RMS",JOptionPane.INFORMATION_MESSAGE);
		}

	}
	catch(NumberFormatException nfe){
		System.out.println("Error while editing cell"+nfe);
	}
}

	
	public void checkPaymentType(){
		String message = "Please select payment term";
		String noItemsMsg = "No items Selected";
		if(paymentCombo.getSelectedItem() == "Select Type" && table.getRowCount()>0){
			JOptionPane.showMessageDialog(null,message,"RMS",JOptionPane.INFORMATION_MESSAGE);
		}
		if(table.getRowCount()==0){
			JOptionPane.showMessageDialog(null,noItemsMsg,"RMS",JOptionPane.INFORMATION_MESSAGE);
		}
			
	}
	
	
	public void selectCell(int row,int col)
	{
		if(row!=-1 && col !=-1)            
		{
			table.setRowSelectionInterval(row,row);
			table.setColumnSelectionInterval(col,col);
		}
	}//EOF selecCell()

	public void setTotalPrice(){
		try{
			System.out.println(" In setTotalPrice()");
			if(table.getSelectedColumn()==4){
				String objTotal =(String)(table.getValueAt(table.getSelectedRow(), table.getSelectedColumn())); 
				int totalCost = Integer.parseInt(objTotal); 
				String priceValue = (String)table.getValueAt(table.getSelectedRow(), 3);
				int price = Integer.parseInt(priceValue);
				int totalRate = totalCost * price;
				System.out.println("TotalRate in col 5==>"+totalRate);
				table.setValueAt(Integer.toString(totalRate), table.getSelectedRow(), 5);
			}
		}
		catch(NumberFormatException nfe){
			System.out.println("Error Occured in setTotalPrice"+nfe);
		}	
		catch(StackOverflowError soe){
			System.out.println("Error Occured in setTotalPrice"+soe);
		}
	}
	
	public void setOverallTotal(){
		try{
			int rowCount = table.getRowCount(),col = 4,totalCost = 0;
			Object str = null;
			System.out.println("In setOverallTotal row count==>"+rowCount);
			for(int i=0; i<rowCount; i++){
				Object total =(table.getValueAt(table.getSelectedRow(), 5));
				if(total!=""){
					int totalValue = Integer.parseInt(total.toString());
					totalCost += totalValue;
				} 
			}
			str = Integer.toString(totalCost);
			//totalTxtField.setText(str.toString());
			totalField.setText(str.toString());
			totalMrpFld.setText(str.toString());

		}
		catch(NumberFormatException nfe){
			System.out.println("Error Occured in setOverallTotal "+nfe);
		}
	}

	//, CaretListener
	public class ComboEditor extends JComboBox implements TableCellEditor{

	  JTextComponent editor;

	  Object newValue;	  	  
	  
	  public ComboEditor() {
	    super();
	    setEditable(true);
	    setEnabled(true);
	    editor = (JTextComponent) getEditor().getEditorComponent();
	    editor.addMouseListener(new MouseAdapter(){

	    	public void mouseReleased(MouseEvent me) {
	    		setProdName = editor.getText();
	    		setCellValues(setProdName);
	    	} 
	    });
	    editor.addKeyListener(new KeyAdapter(){
    		String temp="";

        	public void keyReleased(KeyEvent ke){        	

        		if((ke.getKeyCode()==KeyEvent.VK_DOWN)){
        			setPopupVisible(true);
        		}
        		if ((ke.getKeyCode() == KeyEvent.VK_ESCAPE)){
        			if(isPopupVisible())
        				setPopupVisible(false);        				
        		}
        		
        		if (ke.getKeyCode() == KeyEvent.VK_ENTER){
        			setProdName = editor.getText();
        			if(table.getRowCount()>0)
        				setCellValues(setProdName);  
        		}
        		
        		if(!(ke.getKeyCode()==KeyEvent.VK_DOWN) && !(ke.getKeyCode()==KeyEvent.VK_UP)
        			&& !(ke.getKeyCode()==KeyEvent.VK_LEFT) && !(ke.getKeyCode()==KeyEvent.VK_RIGHT)
        			&& !(ke.getKeyCode()==KeyEvent.VK_ENTER) && !(ke.getKeyCode()==KeyEvent.VK_TAB)
        			&& !(ke.getKeyCode()==KeyEvent.VK_SHIFT) && !(ke.getKeyCode()==KeyEvent.VK_HOME)
        			&& !(ke.getKeyCode()==KeyEvent.VK_PAGE_UP) && !(ke.getKeyCode()==KeyEvent.VK_PAGE_DOWN)) {
        			try{
        				temp = editor.getText();

        				while(getItemCount()!=0)
        					removeItemAt(0);
        				
        				String str="";
        				
        				if (temp.trim().length()>0){
	        				for(int i=0; i<productArray.size(); i++){
	        					str = productArray.get(i).toString();
	        					if(str.toUpperCase().startsWith(temp.toUpperCase())){
	        						addItem(str);
	        					}
	        				}
        				}
        				setProdName = temp;        				
        				if(setProdName == ""){
        					hidePopup();
        				}
        				else
        					showPopup();
        				editor.setText(temp);

        			}
        			catch(Exception e){
        				System.out.println("Error occured in KeyReleased"+e);
        			}
        		}
        	
        	}	        	
        });
	    
	    addActionListener(new ActionListener() {
	      public void actionPerformed(ActionEvent event) {
	    	  //System.out.println("----In actionListener----"+editor.getText()+"  "+count);	    	  
	      }
	    });
	  }	  

	  public void addCellEditorListener(CellEditorListener listener) {
	   // listenerList.add(CellEditorListener.class, listener);
	   // System.out.println("----In addCellEditorListener----");
	  }

	  public void removeCellEditorListener(CellEditorListener listener) {
	    //listenerList.remove(CellEditorListener.class, listener);
	    //System.out.println("----In removeCellEditorListener----");
	  }

	  public void fireEditingStopped() {
	    //System.out.println("fireEditingStopped called ");
	  }

	  public void fireEditingCanceled() {
		 //System.out.println("----In fireEditingCanceled----");

	  }

	  public void cancelCellEditing() {
	    //System.out.println("cancelCellEditing called ");
	    fireEditingCanceled();
	  }

	  public boolean stopCellEditing() {
	   // System.out.println("stopCellEditing called ");
	   // fireEditingStopped();
	    return true;
	  }

	  public boolean isCellEditable(EventObject event) {
		//System.out.println("----In isCellEditable----");
	    return true;
	  }

	  public boolean shouldSelectCell(EventObject event) {
		  //System.out.println("----In shouldSelectCell----");
	    return true;
	  }

	  public Object getCellEditorValue() {
	   // System.out.println("getCellEditorValue called returning vlaue: " + newValue);
	    return this;
	  }

	  

	  public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected,
	      int row, int column) {
	    return this;
	  }
	}
		

//----------------------------------------------------------------------------------

	public class CheckBoxCellEditor extends JCheckBox implements TableCellEditor {

		boolean selected = false;
		boolean cellEnabled = true;
		JTextField jtc = new JTextField();

		public CheckBoxCellEditor() {
			super();
			setEnabled(true);
			setBackground(Color.WHITE);
			this.setSize(10, 10);
			setHorizontalAlignment(JLabel.CENTER);
			System.out.println("In CheckBoxCellEditorconstructor..");
			
			addMouseListener(new MouseAdapter(){
				public void mousePressed(MouseEvent me){
					System.out.println("In Mouse Pressed");
					System.out.println("ME Source"+(me.getSource()));
					if(me.getClickCount()==1){
						System.out.println("Click count ");
					}
				}
			}
			);			
			addItemListener(new ItemListener() {
				public void itemStateChanged(ItemEvent event) {	
					System.out.println("In itemStateChanged of CheckBoxCellEditor");
					JCheckBox cb = (JCheckBox)event.getSource();
		            Object item = event.getItem();  
		            
		            System.out.println("Before item state changed==> Count"+pickUpCnt);
		            if (event.getStateChange() == ItemEvent.SELECTED) {
		            	int checkFlag;		            	
		            	checkFlag = checkBlankValue();
		            	System.out.println("checkFlag Value "+checkFlag);
		            	if(checkFlag ==1){
		            		System.out.println("Flag is 1");
		            		cb.setSelected(false);
		            	}
		            	else if(checkFlag ==0){
		            		System.out.println("Flag is "+checkFlag);
		            		cb.setSelected(true);
		            		}
		            	pickUpCnt++;
		            	System.out.println("SELECTED => Count"+pickUpCnt);
		            	pickUpFld.setText(Integer.toString(pickUpCnt));
		            	table.setValueAt(new Boolean(true), table.getSelectedRow(), 1);
		            } 
		            else if (event.getStateChange() == ItemEvent.DESELECTED) {
		            	//checkBlankValue();
		            	//if(pickUpCnt>0 ){
			            	pickUpCnt--;
			            	System.out.println("DESELECTED=> Count"+pickUpCnt);
			            	pickUpFld.setText(Integer.toString(pickUpCnt));
			            	table.setValueAt(new Boolean(false), table.getSelectedRow(), 1);
		            	//}
		            }
					//fireEditingStopped();	
				}
		});
		}

		public int checkBlankValue(){
			try{
	    		String objVal =(String)(table.getValueAt(table.getSelectedRow(), 4));
				String weightVal =(String)(table.getValueAt(table.getSelectedRow(), 2));
				String priceVal =(String)(table.getValueAt(table.getSelectedRow(), 3));
				int val = Integer.parseInt(objVal); 
				String  mesg="Quantity cannot be zero";
				String  message="Quantity cannot be blank";
				if(objVal.equals("")){
					System.out.println("For checking blank ");	
					JOptionPane.showMessageDialog(null,message,"RMS",JOptionPane.INFORMATION_MESSAGE);
					return 1;
				}
				else if(objVal!="" && (val ==0)){
					JOptionPane.showMessageDialog(null,mesg,"RMS",JOptionPane.INFORMATION_MESSAGE);
					return 1;
				}	
				else if(weightVal.equals("") && priceVal.equals("")){
					System.out.println("Validating weight price ");
					String  wpMessage="Weight and Price cannot be blank";
					JOptionPane.showMessageDialog(null,wpMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
					return 1;
				}
				else if( weightVal.equals("")){
					System.out.println("Validating weight price ");
					String  wMessage="Weight cannot be blank";
					JOptionPane.showMessageDialog(null,wMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
					return 1;
				}

				else if(priceVal.equals("")){
					System.out.println("Validating weight price ");
					String  pMessage="Price cannot be blank";
					JOptionPane.showMessageDialog(null,pMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);
					return 1;
				}

			}
			catch(NumberFormatException nfe){
				System.out.println("Exception occured in checkBlankValue"+nfe);
			}	
				return 0;
		}
		
		
		public void addCellEditorListener(CellEditorListener l) {
			//System.out.println("In addCellEditorListener");
			//--
			listenerList.add(CellEditorListener.class, l);
		}

		public void cancelCellEditing() {
			//System.out.println("In cancelCellEditing");
		}

		public Object getCellEditorValue() {
			System.out.println("In getCellEditorValue"+this.isSelected());
			return new Boolean(this.isSelected());
			///--return Boolean.valueOf((this.isSelected()));

		}

		public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected,
			int row, int column) {
			//System.out.println("In getTableCellEditorComponent");
			selected = isSelected;
			this.requestFocus();
			if (table.isCellEditable(row, column)) {
				this.setEnabled(true);
			}
			else {
				this.setEnabled(false);
			}
			if (value.equals(new Boolean(true))) {
				this.setSelected(true);
			}
			else {
				this.setSelected(false);
			}
			return this;	
		}

		public void setCellEnabled(boolean enabled) {
			//System.out.println("In setCellEnabled");
			//--
			cellEnabled = enabled;
		}

		public boolean isCellEditable(EventObject anEvent) {
			System.out.println("In isCellEditable"+cellEnabled);
			return cellEnabled;
		}
		public void removeCellEditorListener(CellEditorListener l) {
			//System.out.println("In removeCellEditorListener");
			//--
			listenerList.remove(CellEditorListener.class, l);
		}

		public boolean shouldSelectCell(EventObject anEvent) {

			return true;

		}

		public boolean stopCellEditing() {
			//System.out.println("In stopCellEditing");

			fireEditingStopped();
			return true;

		}

		public void fireEditingStopped() {
			//System.out.println("In fireEditingStopped");

		}

		public void fireEditingCanceled() {
			//System.out.println("In fireEditingCanceled");
		}

	}// EOF CheckBoxCellEditor
				
//	----------------------------------------------------------------------------------
	
	public class CheckBoxCellRendrer extends JCheckBox implements TableCellRenderer {

		public boolean cellEnabled = true;
		
		public CheckBoxCellRendrer(){
			super();
			this.setEnabled(true);
			setHorizontalAlignment(JLabel.CENTER);
			System.out.println("In CheckBoxCellRendrer constructor..");
		}

		public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,	
				boolean hasFocus, int row, int column) {
			
			System.out.println("In CheckBoxCellRendrer getTableCellRendererComponent");
			if (table.isCellEditable(row, column)) {
				//System.out.println(" 1st IF CheckBoxCellRendrer getTableCellRendererComponent row="+row+"Column"+column);
				this.setEnabled(true);
			}
			else {
				//System.out.println(" 1st ELSE CheckBoxCellRendrer getTableCellRendererComponent");
				this.setEnabled(false);
			}
	
			if (value != null && value.equals(new Boolean(true))) {
				//System.out.println(" 2nd IF CheckBoxCellRendrer getTableCellRendererComponent");
				this.setSelected(true);
			}
		
			else {
				//System.out.println(" 2nd ELSE CheckBoxCellRendrer getTableCellRendererComponent");
				this.setSelected(false);
			}	
			return this;

		}

		public void setCellEnabled(boolean enabled) {
			//System.out.println("In CheckBoxCellRendrer setCellEnabled");
			cellEnabled = enabled;
		}

		public boolean isCellEditable(EventObject anEvent) {
			//System.out.println("In CheckBoxCellRendrer isCellEditable");
			return cellEnabled;
		}

		public boolean isCellEnabled(EventObject anEvent) {
			//System.out.println("In CheckBoxCellRendrer isCellEnabled");
			return cellEnabled;
		}
	}// EOF CheckBoxCellRendrer
	

	/*		public void checkQuantity(){
	try{
		String quantityVal =(String)(table.getValueAt(table.getSelectedRow(), 4));
		String weightVal =(String)(table.getValueAt(table.getSelectedRow(), 2));
		String priceVal =(String)(table.getValueAt(table.getSelectedRow(), 3));
		if(quantityVal.equals("")){
			System.out.println("For checking blank ");
			String  message="Quantity cannot be blank";
			JOptionPane.showMessageDialog(null,message,"RMS",JOptionPane.INFORMATION_MESSAGE);
		}
		else if( weightVal.equals("")){
			System.out.println("Validating weight price ");
			String  wMessage="Weight cannot be blank";
			JOptionPane.showMessageDialog(null,wMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);				
		}
		else if(weightVal.equals("") && priceVal.equals("")){
			System.out.println("Validating weight price ");
			String  wpMessage="Weight and Price cannot be blank";
			JOptionPane.showMessageDialog(null,wpMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);				
		}
		else if(priceVal.equals("")){
			System.out.println("Validating weight price ");
			String  pMessage="Price cannot be blank";
			JOptionPane.showMessageDialog(null,pMessage,"RMS",JOptionPane.INFORMATION_MESSAGE);				
		}
	}
	catch(NumberFormatException nfe){
		System.out.println("Error while editing cell"+nfe);
	}
}
*/	

}*///EOF RetailSys class









-----------------------------------------------------------------
<%@page contentType="text/html"%>
<jsp:include page="header.jsp" /> 

<script src="js/editCustomer_details.js">
</script> 

<b>Please Enter Customer Details to Search  </b></center>
<form name="myform" method="post">
<table>
	<tr>
		<td><b><font color="blue">C</font>ustomer Code</b></td><td><input type="text" name="custCode" accesskey="c"></td>
		<td><b><font color="blue">P</font>hone Number</b></td><td><input type="text" name="phonenumber" size="22" align="right" colspan="2" accesskey="p"></td>
	</tr>
</table>
<input type="submit" name="search"  title="Press <Enter>" value="Search <Enter>" accesskey="s" onclick="showHint();return false;">
<input type="reset" name="clear" title="Press <Alt+c>" tabindex="1" value="Clear <Alt+c>" accesskey="c" onclick="document.getElementById('txtHint').innerHTML='';">

<div id="div1">
  <table>
	<tr></tr>
    <tr name="tr1" > 
        <td><input type="button" name="asearch" value="Advance Search" onClick="Display1()"></td> 
        </tr>
  </table>
 </div>
  <div style="VISIBILITY:hidden" id="div2">
  <table>
	<tr>
		<td><b>Customer <font color="blue">N</font>ame</b></td><td><input type="text" name="cusName"  align="right" accesskey="n"></td>
		<td><b>Na<font color="blue">m</font>e String</b></td><td><input type="text" name="nameString" size="22"  align="right" accesskey="m" colspan="2"></td>
	</tr>
	<tr>
		<td ><b><font color="blue">B</font>uilding</b></td><td><input type="text" name="Building" accesskey="b" align="right"></b></td>
		<td align="right"><b>Bl<u>o</u>ck</b></td>
		<td><input type ="text" name="block" accesskey="o" size="5"  align="right">
		<b><font color="blue">W</font>ing</b>&nbsp&nbsp<input type ="text" name="wing" accesskey="w"size="5" ></td>
	</tr>
	<tr >
		<td ><b><font color="blue">A</font>ddress1</b></td><td><input type ="text" accesskey="a" name="add1"></td>
		<td ><b>A<font color="blue">d</font>dress2</b></td><td><input type ="text" accesskey="d" name="add2" size="22"></td>
	</tr>
	<tr>
		<td><b>Create<font color="blue">D</font>ate</b></td><td><input type ="text" accesskey="d" name="c_date"></td>
		<td><b><font color="blue">U</font>pdate Date/Time</b></td><td><input type ="text" accesskey="u" name="u_date" ></td>
	</tr>
	<tr>
		<td></td>
		<td>[  yyyy  -  mm  -  dd  ]</td>
		<td></td>
		<td>[  yyyy  -  mm  -  dd  ]</td>
	</tr>
  </table>
 </div>
 <div id="div4" style="VISIBILITY:hidden" >
      <input type="button" name="range" value="Date Range" onClick="Display2()"></td>
 </div>
 <div id="div3" style="VISIBILITY:hidden" >
  <table>
	<tr>
		<td><b><font color="blue">F</font>rom Date</b></td><td><input type ="text" accesskey="f" name="f_date"></td>
		<td><b><font color="blue">T</font>o Date</b></td><td><input type ="text" accesskey="t" name="t_date"></td>
	</tr>
	<tr>
		<td></td>
		<td>[  yyyy  -  mm  -  dd  ]</td>
		<td></td>
		<td>[  yyyy  -  mm  -  dd  ]</td>
	</tr>
	<tr></tr>
 </table> 
</div>

<script type="text/javascript">
 
<%
	String errMsg="";
	errMsg=request.getParameter("Exp");
%>   
   var jExp=<%=errMsg%>
      	document.myform.custCode.focus();
 		if(jExp==1){
   			alert("You Successfully Edit the User");
   			window.refresh;
   			jExp=jExp+1;
   		 }
   function Display1()
   {
       document.getElementById('div1').style.visibility="hidden";
  	   document.getElementById('div2').style.visibility="visible";
  	    document.getElementById('div4').style.visibility="visible";
   }
  
  function Display2()
  {
     document.getElementById('div4').style.visibility="hidden";
     document.getElementById('div3').style.visibility="visible";
  }

</script>
<p>Suggestions: <div id="txtHint"></div></p>
<br><br>
<p><h1><center><div id="waitMessage"  style="cursor: sw-resize"></center></div></h1></p>
</form>
</body>
</html>



<%@page contentType="text/html"%>
<jsp:include page="header.jsp" /> 
<script src="js/editCustomer_details.js">
 </script> 

<b>Please Enter Customer Details to Search  </b></center>
<form name="myform" method="post">
<table>
	<tr>
		<td><b><font color="blue">C</font>ustomer Code</b></td><td><input type="text" name="custCode" accesskey="c"></td>
		<td><b><font color="blue">P</font>hone Number</b></td><td><input type="text" name="phonenumber" size="22" align="right" colspan="2" accesskey="p"></td>
	</tr>
</table>
<div id="div1">
  <table>
	<tr></tr>
    <tr name="tr1" > 
        <td><input type="button" name="asearch" value="Advance Search" onClick="Display1()"></td> 
        <td><input type="button" name="range" value="Date Range" onClick="Display2()"></td>
    </tr>
  </table>
 </div>
 <div style="VISIBILITY:hidden" id="div2">
  <table>
	<tr>
		<td><b>Customer <font color="blue">N</font>ame</b></td><td><input type="text" name="cusName"  align="right" accesskey="n"></td>
		<td><b>Na<font color="blue">m</font>e String</b></td><td><input type="text" name="nameString" size="22"  align="right" accesskey="m" colspan="2"></td>
	</tr>
	<tr>
		<td ><b><font color="blue">B</font>uilding</b></td><td><input type="text" name="Building" accesskey="b" align="right"></b></td>
		<td align="right"><b>Bl<u>o</u>ck</b></td>
		<td><input type ="text" name="block" accesskey="o" size="5"  align="right">
		<b><font color="blue">W</font>ing</b>&nbsp&nbsp<input type ="text" name="wing" accesskey="w"size="5" ></td>
	</tr>
	<tr >
		<td ><b><font color="blue">A</font>ddress1</b></td><td><input type ="text" accesskey="a" name="add1"></td>
		<td ><b>A<font color="blue">d</font>dress2</b></td><td><input type ="text" accesskey="d" name="add2" size="22"></td>
	</tr>
	<tr>
		<td><b>Create<font color="blue">D</font>ate</b></td><td><input type ="text" accesskey="d" name="c_date"></td>
		<td><b><font color="blue">U</font>pdate Date/Time</b></td><td><input type ="text" accesskey="u" name="u_date" ></td>
	</tr>
	<tr>
		<td></td>
		<td>[  yyyy  -  mm  -  dd  ]</td>
		<td></td>
		<td>[  yyyy  -  mm  -  dd  ]</td>
	</tr>
  </table>
 </div>
 <div id="div3">
  <table>
	<tr>
		<td><b><font color="blue">F</font>rom Date</b></td><td><input type ="text" accesskey="f" name="f_date"></td>
		<td><b><font color="blue">T</font>o Date</b></td><td><input type ="text" accesskey="t" name="t_date"></td>
	</tr>
	<tr>
		<td></td>
		<td>[  yyyy  -  mm  -  dd  ]</td>
		<td></td>
		<td>[  yyyy  -  mm  -  dd  ]</td>
	</tr>
	<tr></tr>
 </table> 
</div>
<input type="submit" name="search"  title="Press <Enter>" value="Search <Enter>" accesskey="s" onclick="showHint();return false;">

<input type="reset" name="clear" title="Press <Alt+c>" tabindex="1" value="Clear <Alt+c>" accesskey="c" onclick="document.getElementById('txtHint').innerHTML='';">

<script type="text/javascript">
 	

<%
	String errMsg="";
	errMsg=request.getParameter("Exp");
%>
   
   var jExp=<%=errMsg%>
      	document.myform.custCode.focus();
 		if(jExp==1){
   			alert("You Successfully Edit the User");
   			window.refresh;
   			jExp=jExp+1;
   		 }
   function Display1()
   {
       
       document.myform.action="Main.jsp";
       document.myform.submit();
   }
  
  function Display2()
  {
     document.getElementById('div2').style ="VISIBILITY:visible"; 
  }

</script>
<p>Suggestions: <div id="txtHint"></div></p>
<br><br>
<p><h1><center><div id="waitMessage"  style="cursor: sw-resize"></center></div></h1></p>
</form>
</body>
</html>















--------------------------------------------------------------
<%@ page import="java.sql.*" %>
<%@ page import="javax.naming.*" %>
<%@ page import="javax.sql.*" %>
<%@ page import="java.io.*" %>
<%@page contentType="text/html"%>

<%
	try{
		String name="";
    	String phone="";
    	String building="";
    	String block="";
    	String wing="";
    	String add1="";
    	String add2="";
    	String custCode="";
    	String nameString="";
    	
    	String city="", state="", area="";
    	String building_no="", station="";
		name=request.getParameter("nameStartWith");
		phone=request.getParameter("phStartWith"); 
		building=request.getParameter("bldgStartWith");
		building_no=request.getParameter("bldgnoStartWith");
		block=request.getParameter("blockStartWith");
		wing=request.getParameter("wingStartWith");
		add1=request.getParameter("add1StartWith");
		add2=request.getParameter("add2StartWith");
		custCode=request.getParameter("custCodeStartWith");
		nameString=request.getParameter("nameStringStartWith");
		
		area=request.getParameter("areaStartWith");
		station=request.getParameter("stationStartWith");
		
		Context initContext = new InitialContext();
		Context envContext  = (Context)initContext.lookup("java:/comp/env");
		DataSource ds = (DataSource)envContext.lookup("jdbc/js");
		Connection conn = ds.getConnection();
    	Statement stat=conn.createStatement();
    	String query="";
    	query="select custname,phone,building,block,wing,add1,add2,custcode,building_no,area,station from customer_master where 1=1 ";
    	
    	if(!name.equals("")){
    		query = query + " and custname like'" + name + "%'";
    	}
		if(!phone.equals("")){
    		query = query + " and phone like'" + phone + "%'";
    	}
    	
		if(!building.equals("")){
    		query = query + " and building like'" + building + "%'";
    	}
    	if(!building_no.equals("")){
    		query = query + " and building_no like'" + building_no + "%'";
    	}
		if(!block.equals("")){
    		query = query + " and block like'" + block + "%'";
    	}
		if(!wing.equals("")){
			query = query + " and wing like'" + wing + "%'";
		}
    	
		if(!add1.equals("")){
    		query = query + " and add1 like'" + add1 + "%'";
    	}
    	
		if(!add2.equals("")){
			query = query + " and add2 like'" + add2 + "%'";
    	}
    	if(!custCode.equals("")){
    		query = query + "and custcode like'" + custCode + "%'";
    	}
    	if(!nameString.equals("")){
    		query = query + "and custname like'%"+ nameString + "%'";
    	}
    	
    	if(!area.equals("")){
    		query = query + " and area like'" + area + "%'";
    	}
    	if(!station.equals("")){
    		query = query + " and station like'" + station + "%'";
    	}
    	query =query + "order by update_datetime DESC";	 	
%>
       <center>
       <div align="center" id="newid" style="position:absolute; overflow:auto; WIDTH:80%; HEIGHT:120px; visibility: visible;  z-index: 5;" right:100;>

       <table   border="1" name="t" class="item3"> 	<tr>
				<td  name="custcode"><b>CustCode</b></td>
				<td><b>CustName</b></td>
				<td><b>Phone</b></td>
				<td><b>Building</b></td>
				<td><b>Flat No.</b></td>
				<td><b>Wing</b></td>
				<td><b>Add1</b></td>
				<td><b>Add2</b></td>		
            </tr>
<%		    	
			ResultSet rs=stat.executeQuery(query);
	    	while(rs.next()) {
 %>
			<tr >		
				<td><a  href="cust_orderBill.jsp?name=<%=rs.getString(1)%>&tele=<%=rs.getString(2)%>&bldg=<%=rs.getString(3)%>&block=<%=rs.getString(4)%>&wing=<%=rs.getString(5)%>&add1=<%=rs.getString(6)%>&add2=<%=rs.getString(7)%>&cuscode=<%=rs.getString(8)%>&building_no=<%=rs.getString(9)%>&area=<%=rs.getString(10)%>&station=<%=rs.getString(11)%>"  >	
<%             
    			out.println(rs.getString(8));
%>
    	 		</a></td><td>    			
<%			
				out.println(rs.getString(1));
%>
				</td><td>
<%			
				out.println(rs.getString(2));
%> 						
				</td><td>
<%	
           		out.println(rs.getString(3));
%>
				</td><td>
<%	
           		out.println(rs.getString(4));
%>
				</td><td>
<%	
				out.println(rs.getString(5));
%>
				</td><td>
<%	
				out.println(rs.getString(6));
%>
        		</td><td>
<%
				out.println(rs.getString(7));
%>
				</td>
			</tr>			        	  
<%			    
		}
		rs.close();
		stat.close();
		conn.close();
%>
<style type="text/css">
a:link {color: blue}
a:hover {background: blue;color: white}
a:active {background: blue;color: white}
</style>

</table></div>
<%							
	}catch(Exception e){
	}		
%>
<script type="text/javascript">
      	document.myform.custcode.focus();
</script>














------------------------------------------------


<%@ page import="java.sql.*" %>
<%@ page import="javax.naming.*" %>
<%@ page import="javax.sql.*" %>
<%@ page import="java.io.*" %>
<%@page contentType="text/html"%>
<script src="js/aw.js"></script>
<link href="stylsheet/aw.css" rel="stylesheet"></link>
<style>

	#myGrid {width: 600px; height: 200px;}
	#myGrid .aw-alternate-even {background: #eee;}

</style>

<%
	try{
		String name="";
    	String phone="";
    	String building="";
    	String block="";
    	String wing="";
    	String add1="";
    	String add2="";
    	String custCode="";
    	String nameString="";
    	String msg="";
    	
    	String city="", state="", area="";
    	String building_no="", station="";
		name=request.getParameter("nameStartWith");
		phone=request.getParameter("phStartWith"); 
		building=request.getParameter("bldgStartWith");
		building_no=request.getParameter("bldgnoStartWith");
		block=request.getParameter("blockStartWith");
		wing=request.getParameter("wingStartWith");
		add1=request.getParameter("add1StartWith");
		add2=request.getParameter("add2StartWith");
		custCode=request.getParameter("custCodeStartWith");
		nameString=request.getParameter("nameStringStartWith");
		
		area=request.getParameter("areaStartWith");
		station=request.getParameter("stationStartWith");
		
		Context initContext = new InitialContext();
		Context envContext  = (Context)initContext.lookup("java:/comp/env");
		DataSource ds = (DataSource)envContext.lookup("jdbc/js");
		Connection conn = ds.getConnection();
    	Statement stat=conn.createStatement();
    	String query="";
    	query="select custname,phone,building,block,wing,add1,add2,custcode,building_no,area,station from customer_master where 1=1 ";
    	
    	if(!name.equals("")){
    		query = query + " and custname like'" + name + "%'";
    	}
		if(!phone.equals("")){
    		query = query + " and phone like'" + phone + "%'";
    	}
    	
		if(!building.equals("")){
    		query = query + " and building like'" + building + "%'";
    	}
    	if(!building_no.equals("")){
    		query = query + " and building_no like'" + building_no + "%'";
    	}
		if(!block.equals("")){
    		query = query + " and block like'" + block + "%'";
    	}
		if(!wing.equals("")){
			query = query + " and wing like'" + wing + "%'";
		}
    	
		if(!add1.equals("")){
    		query = query + " and add1 like'" + add1 + "%'";
    	}
    	
		if(!add2.equals("")){
			query = query + " and add2 like'" + add2 + "%'";
    	}
    	if(!custCode.equals("")){
    		query = query + "and custcode like'" + custCode + "%'";
    	}
    	if(!nameString.equals("")){
    		query = query + "and custname like'%"+ nameString + "%'";
    	}
    	
    	if(!area.equals("")){
    		query = query + " and area like'" + area + "%'";
    	}
    	if(!station.equals("")){
    		query = query + " and station like'" + station + "%'";
    	}
    	query =query + "order by update_datetime DESC";	
    	ResultSet rs=stat.executeQuery(query);
	    while(rs.next()) { 
	    String code= rs.getString(8);
	   
		  
		  msg= masg+" [" +"\" + rs.getString(8)+\"  " + ", "+" rs.getString(1) "+", "+" rs.getString(2) "+", "+" rs.getString(3) "+", "+" rs.getString(4) "+", "+" rs.getString(5) "+", "+" rs.getString(6) "+", "+" rs.getString(7) "+"], " ;	
    			
        }
%>
 
<script>
	var obj = new AW.UI.Grid;
    obj.setId("myGrid");
    obj.setCellData();
    obj.setColumnCount(7);
    obj.setRowCount(10);
    document.write(obj);
</script>
      	
	}catch(Exception e){
	}		
%>
<script type="text/javascript">
      	document.myform.custcode.focus();
</script>















-------------------------------------------------------
var xmlHttp

function showHint() {
	var str;
	var str1;
	var str2;
	var str3;
	var str4;
	var str5;
	var str6;
	var str9, str10, str11;
	str=document.myform.cusName.value
	str1=document.myform.phonenumber.value
	str2=document.myform.Building.value
	str3=document.myform.block.value
	str4=document.myform.wing.value
	str5=document.myform.add1.value
	str6=document.myform.add2.value
	str7=document.myform.custCode.value
	str8=document.myform.nameString.value
	str9=document.myform.Building_no.value
	str10=document.myform.area.value
	str11=document.myform.station.value
	
	document.getElementById("waitMessage").innerHTML="Please wait...";
	if (str.length==0 && str1.length==0 && str2.length==0 && str3.length==0 && str4.length==0 && str5.length==0 && str6.length==0&&str7.length==0 && str8.length==0  && str9.length==0 && str10.length==0 && str11.length==0)
  	{ 
  		document.getElementById("txtHint").innerHTML="";
  		return;
  	}
	xmlHttp=GetXmlHttpObject()
	if (xmlHttp==null)
  	{
  		alert ("Your browser does not support AJAX!");
  		return;
  	} 
	var url="customer_details.jsp";
	url=url+"?nameStartWith="+str+"&phStartWith="+str1+"&bldgStartWith="+str2+"&blockStartWith="+str3+"&wingStartWith="+str4+"&add1StartWith="+str5+"&add2StartWith="+str6+"&custCodeStartWith="+str7+"&nameStringStartWith="+str8+"&bldgnoStartWith="+str9+"&areaStartWith="+str10+"&stationStartWith="+str11+"&t="+new Date().getTime();
	url=url+"&sid="+Math.random();
	xmlHttp.onreadystatechange=stateChanged;
	xmlHttp.open("GET",url,true);
	xmlHttp.send(null);
} 

function stateChanged() 
{
	if (xmlHttp.readyState==4)
	{ 
		document.getElementById("waitMessage").innerHTML="";
		putIntoGrid(xmlHttp.responseText);
	}
}

function GetXmlHttpObject()
{
	var xmlHttp=null;
	try
  	{
  		// Firefox, Opera 8.0+, Safari
  		xmlHttp=new XMLHttpRequest();
  	}
	catch (e)
  	{
  	// Internet Explorer
  		try
    	{
    		xmlHttp=new ActiveXObject("Msxml2.XMLHTTP");
    	}
  		catch (e)
    	{
    	xmlHttp=new ActiveXObject("Microsoft.XMLHTTP");
    	}
  	}
	return xmlHttp;
}
function putIntoGrid(data) {
	
	data = data.replace(/^\s+|\s+$/,'');
	
	actdata =  eval("["+data+"]");
	var grid  = new AW.UI.Grid;
	grid.setId("myGrid");
	
	
	grid.setHeaderText("Customer Code",0);
	grid.setHeaderText("Customer name",1);
	grid.setHeaderText("Phone No.",2);
	grid.setHeaderText("Building",3);
	grid.setHeaderText("Flat No.",4);
	grid.setHeaderText("User",5);
	grid.setHeaderText("Address1",6);
	grid.setHeaderText("Address2",7);
	
    grid.setCellData(actdata);
    grid.setColumnCount(8);
    grid.setRowCount(2);
    grid.refresh();

--------------------------------------------------------
<%@ page import="java.sql.*" %>
<%@ page import="javax.naming.*" %>
<%@ page import="javax.sql.*" %>
<%@ page import="java.io.*" %>
<%@page contentType="text/html"%>

<%
	try{
		String name="";
    	String phone="";
    	String building="";
    	String block="";
    	String wing="";
    	String add1="";
    	String add2="";
    	String custCode="";
    	String nameString="";
    	String msg="";
    	int isfirstRow=0;
    	String city="", state="", area="";
    	String building_no="", station="";
		name=request.getParameter("nameStartWith");
		phone=request.getParameter("phStartWith"); 
		building=request.getParameter("bldgStartWith");
		building_no=request.getParameter("bldgnoStartWith");
		block=request.getParameter("blockStartWith");
		wing=request.getParameter("wingStartWith");
		add1=request.getParameter("add1StartWith");
		add2=request.getParameter("add2StartWith");
		custCode=request.getParameter("custCodeStartWith");
		nameString=request.getParameter("nameStringStartWith");
		
		area=request.getParameter("areaStartWith");
		station=request.getParameter("stationStartWith");
		
		Context initContext = new InitialContext();
		Context envContext  = (Context)initContext.lookup("java:/comp/env");
		DataSource ds = (DataSource)envContext.lookup("jdbc/js");
		Connection conn = ds.getConnection();
    	Statement stat=conn.createStatement();
    	String query="";
    	query="select custname,phone,building,block,wing,add1,add2,custcode,building_no,area,station from customer_master where 1=1 ";
    	
    	if(!name.equals("")){
    		query = query + " and custname like'" + name + "%'";
    	}
		if(!phone.equals("")){
    		query = query + " and phone like'" + phone + "%'";
    	}
    	
		if(!building.equals("")){
    		query = query + " and building like'" + building + "%'";
    	}
    	if(!building_no.equals("")){
    		query = query + " and building_no like'" + building_no + "%'";
    	}
		if(!block.equals("")){
    		query = query + " and block like'" + block + "%'";
    	}
		if(!wing.equals("")){
			query = query + " and wing like'" + wing + "%'";
		}
    	
		if(!add1.equals("")){
    		query = query + " and add1 like'" + add1 + "%'";
    	}
    	
		if(!add2.equals("")){
			query = query + " and add2 like'" + add2 + "%'";
    	}
    	if(!custCode.equals("")){
    		query = query + "and custcode like'" + custCode + "%'";
    	}
    	if(!nameString.equals("")){
    		query = query + "and custname like'%"+ nameString + "%'";
    	}
    	
    	if(!area.equals("")){
    		query = query + " and area like'" + area + "%'";
    	}
    	if(!station.equals("")){
    		query = query + " and station like'" + station + "%'";
    	}
    	query =query + "order by update_datetime DESC";	
    	ResultSet rs=stat.executeQuery(query);
    	msg = "";
    	int j=0;
	    while(rs.next()) { 
			if (!msg.equals(""))
		  		msg = msg + ",";
		  	msg= msg+"[" +"\"<a href='cust_orderBill.jsp?name=" + rs.getString(1) +
		  	 "&tele=" + rs.getString(2) + "&bldg=" + rs.getString(3) + 
		  	 "&block=" + rs.getString(4) + "&wing=" + rs.getString(5) + 
		  	 "&add1=" + rs.getString(6)+ "&add2=" + rs.getString(7) + 
		  	 "&cuscode=" + rs.getString(8) + "&building_no=" + rs.getString(9) + 
		  	 "&area=" + rs.getString(10) + "&station=" + rs.getString(11) + 
		  	 "'>" + rs.getString(8) + "</a>\",\"" +
		   		rs.getString(1) + "\",\"" + rs.getString(2) + "\",\"" +
		    	rs.getString(3) + "\",\"" + rs.getString(4) + "\",\"" + 
		    	rs.getString(5) + "\",\"" + rs.getString(6) + "\",\"" + 
		    	rs.getString(7) + "\"]" ;	
 			j++;
        }
        
        out.print(msg.trim());
        rs.close();
        stat.close();
        conn.close();     	
	}catch(Exception e){
		System.out.println(e);
	}	
%>









---------------------------------EditItemForm-----------------

<%@ page import="java.sql.*" %>
<%@ page import="javax.naming.*" %>
<%@ page import="javax.sql.*" %>

<%@ page import="java.io.*" %>
<jsp:include page="header.jsp" /> 
<jsp:include page="sessionBoth.jsp" />
<%@page contentType="text/html"%>

<%
		String i_code1="";
		String ig_code1="";
		String i_name1="";
		String i_weight1="";
		String i_mrp1="";
		String i_rate1="";
		String id_type1="";
		String id_flag1="";
		String id_qty1="";
		String id_amt1="";
		
		i_code1=request.getParameter("icode");
		ig_code1=request.getParameter("igcode");
		i_name1=request.getParameter("iname");
		i_weight1=request.getParameter("iweight");
		i_mrp1=request.getParameter("imrp");
		i_rate1=request.getParameter("irate");
		id_type1=request.getParameter("id_type");
		id_flag1=request.getParameter("id_flag");
		id_qty1=request.getParameter("id_qty");
		id_amt1=request.getParameter("id_amt");
%>
<script type="text/javascript">

	function checkField(){
		var iname =document.myform.i_name.value;
		var iweight =document.myform.i_weight.value;
		var imrp =document.myform.i_mrp.value;
		var irate =document.myform.i_rate.value;
		if(iname=="") {
				alert("Please Enter Item Name");
				document.myform.i_name.focus();
				return false;
		}
		else if(imrp=="") {
				alert("Please Enter Item MRP Value");
				document.myform.i_mrp.focus();
				return false;
		}
		else if(isNaN(imrp)) {
				alert("Please Enter a number in MRP field");
				document.myform.i_mrp.value="";
				document.myform.i_mrp.focus();
				return false;
		}
		else if(irate=="") {
				alert("Please Enter Item Rate");
				document.myform.i_rate.focus();
				return false;
		}
		else if(isNaN(irate)) {
				alert("Please Enter a number in Rate field");
				document.myform.i_rate.value="";
				document.myform.i_rate.focus();
				return false;
		}
		else {
		
			var ans=confirm("Do you want to create this Item?");
			if (ans==true){
				document.myform.action="EditItem.jsp";
				document.myform.submit();
			}
			else
			 {
			  window.refresh; 
			 }
			
		}	
	}	
	function showMsg(){
	  	 document.myform.action="Main.jsp";
	   	 document.myform.submit();
	}
	function Warn(){
		alert("U  Can't Change The Item Code");
    }
</script>
<center><h3>Edit Item</h3></center><br>
<form name="myform" action="EditItem.jsp">
 	<table border="0" align="center">
		<tr>
			<td><b>Item Code</b></td><td><input type="text" name="i_code" readonly value="<%=i_code1%>"  onClick="Warn();" >
		</tr>
		<tr>
			<td><b>Item Group Code</b></td>
<%	
	try {
		String name,desc;
		int rowcount;
		Context initContext = new InitialContext();
		Context envContext  = (Context)initContext.lookup("java:/comp/env");
		DataSource ds = (DataSource)envContext.lookup("jdbc/js");
		Connection conn = ds.getConnection();
		Statement stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery("select item_group_code, item_group_desc from item_group");
%>
			      	<td>
						<SELECT name="iGroupCode">
					<!--	<OPTION VALUE="<%=ig_code1%>"><%=ig_code1%> -->
<% 
		rowcount = 0;
	 	while (rs.next()) {
	 		name = rs.getString(1);
	 		desc = rs.getString(2);
	 		if (ig_code1.equals(desc)) {
%>
							<OPTION selected VALUE="<%= name%>" ><%= desc%>
<%
  			}
   			else {
			   				
%>		
								<OPTION VALUE="<%= name%>" ><%= desc%>
<%
			} 
			rowcount++;
		 }
		 rowcount=0;
	     rs.close();
	     
%>
					</td>
					</SELECT>	
		</tr>
		<tr></tr>
		<tr></tr>
		<tr>	
			<td><b>Item Name</b></td><td><input type="text" name="i_name" value="<%=i_name1%>"></td>
		</tr>
		<tr></tr>
		<tr></tr>
		<tr>
			<td><b>Item Weight</b></td><td><input type="text" name="i_weight" value="<%=i_weight1%>"></td>
		</tr>
		<tr></tr>
		<tr></tr>
		<tr>
  			<td><b>Item MRP [Rs.]</b></td><td><input type="text" name="i_mrp" value="<%=i_mrp1%>"></td>
  		</tr>
  		<tr></tr>
  		<tr></tr>
  		<tr>
  			<td><b>Item Rate [Rs.]</b></td><td><input type="text" name="i_rate" value="<%=i_rate1%>"></td>
  		</tr>
  		</tr>
  		<tr>
  			<td></td>
 <%      if(id_flag1.equals("N")){
 %>   
  		    <td><input type="Checkbox" id="chck"  size="10" onClick="funEnabled();"><b>&nbsp&nbsp&nbsp&nbspDeal flag</b></td>
 <%
  		 }
  		 else{
 %>
 			<td><input type="Checkbox" id="chck" checked size="10" onClick="funEnabled();"><b>&nbsp&nbsp&nbsp&nbspDeal flag</b></td>
 <%
 		}
 %>
 			
		</tr>
		
		<tr>
		      			
  			<td colspan="4"><div id="div4" style="VISIBILITY:visible" >
 			<fieldset><legend><font color="white"><b>Deal</b></font></legend>
  			<table align="center">
  				<tr>
		  			<td><b>Deal Type</b></td><td>
		  				<SELECT name="iDealType">
		  				
<% 
		String name1,items="",money="",category="";
		Statement stat = conn.createStatement();
		ResultSet rs2 = stat.executeQuery("select value from code_table where category='DealType'");
		while (rs2.next()) {
 			name1 = rs2.getString(1);
 			
 			if (id_type1.equals(name1))	{ 			
%>
					<OPTION VALUE="<%=name1%>" selected > <%= name1%> 
<%					
			}
			else if(id_type1.equals("")){
%>
				<OPTION VALUE=""> Select type
<%			
			}
			else{
%>
			<OPTION VALUE="<%=name1%>"> <%= name1%> 
<%
			}
		}
    	
    	rs.close();
    	stmt.close();
    	conn.close();
	 }
	 catch (Exception e) {
	        e.getMessage();
	        e.printStackTrace();
	 }
%>  			</select></td>
		  		</tr>
		  		<tr>
		  			<td><b>Quantity</b></td><td><input type="text" name="id_qty" value="<%=id_qty1%>" size="10"></td>
		  			<td><b>Amount</b></td><td><input type="text" name="id_amt" value="<%=id_amt1%>" size="10"></td>
		  		</tr>
		  	</table></div>
		  </tr>			
		  	
  	</table>
  	<br><br> 
	<center><input type="submit" name="Submit"  disabled value="Submit <Alt+s>" accesskey="s" onClick="checkField();return false;">
	<input type="reset" name="clear" accesskey="r" value="Clear <Alt+r>">
	<INPUT type=BUTTON value="Cancel <Alt+c>" accesskey="c" onClick="showMsg();"></center>
  	
  </form>
  <script type="text/javascript">
  
  			if (document.myform.chck.checked==true){
				document.getElementById('div4').style.visibility="visible";
				
			}
			else{
				document.getElementById('div4').style.visibility="hidden";
				
			}
      	document.myform.i_name.focus();
      	    function check(){
	    		document.myform.Submit.disabled=false;
		}
		document.onkeyup = check;
		function funEnabled(){
		    if (document.myform.chck.checked==true){
				document.getElementById('div4').style.visibility="visible";
				
			}
			else{
				document.getElementById('div4').style.visibility="hidden";
				
			}
		}
  </script>
</body>
</html>

-----------------------------------------------------
<%@ page import="java.sql.*" %>
<%@ page import="javax.naming.*" %>
<%@ page import="javax.sql.*" %>
<%@ page import="java.io.*" %>
<%@ page import="java.text.*" %>
<%@ page import="java.util.*" %>
<%@page contentType="text/html"%>

<head>
<title>Printing...</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<style>
.boldtable, .boldtable TD, .boldtable TH
{
font-family:arial;
font-size:11pt;
}

.boldtable1, .boldtable1 TD, .boldtable1 TH
{
font-family:arial;
font-size:11pt;
}

</style>

</head>
<body>
<form name="myform">
<%
				DecimalFormat df = new DecimalFormat("###,###.00");
				DecimalFormat dfQty = new DecimalFormat("0.000");
				DecimalFormat dfQty1 = new DecimalFormat("0");
						
				String orderDate="";
				String flag="";
				flag= request.getParameter("buttonFlag");
				if (flag==null)
					flag="N";
				int totalItems=0;
				int totalTaken=0;
				int taken_ind=0;
				int itemsPerPage=15;
				int pageItemCount=0;
				int emptyLines=0;
				int  itemQtyCheck=0;
				float totalValue=0.0f;
				String enteredBy="";
				
				float itemRate=0.0f;
				float itemQty=0.0f;
				float itemTotPrice=0.0f;
				float itemMRP=0.0f;
				float totalValueMRP=0.0f;
				float savings=0.0f;
				float totalValueDis=0.0f;
				float itemTotDis=0.0f;
				
				String itemName="";
				String itemWeight="";
				String custCode="";
				String custName="";
				String building="";
				String block="";
				String wing="";
				String add1="";
				String add2="";
				String area="";
				String phone="";
				String codeValue="";
				String categoryCode="";
				String storeName="";
				String storeAdd1="";
				String storePhone="";
				String billMessage="";
				String disRemark="";
				String p_type="";
				
        	    int i=0;
        		String orderNo="";
        		
        		orderNo=request.getParameter("orderNo");
             
		String query="";
		Connection conn=null;
		Statement stat=null;
		ResultSet rs=null;
		try{	
			Context initContext = new InitialContext();
			Context envContext  = (Context)initContext.lookup("java:/comp/env");
			DataSource ds = (DataSource)envContext.lookup("jdbc/js");
			conn = ds.getConnection();
			stat=conn.createStatement();
			
			query="select code,value from code_table where code in ('StoreName','StoreAdd1','StorePhone','BILLMSG')";
			rs=stat.executeQuery(query);
			
			while(rs.next())
			{
				categoryCode=rs.getString(1);
				codeValue=rs.getString(2);
									
				if (categoryCode.equals("BILLMSG"))
				{
					billMessage=codeValue;
				}
				
				if (categoryCode.equals("StoreName"))
				{
					storeName=codeValue;
				}
				
				if (categoryCode.equals("StoreAdd1"))
				{
					storeAdd1=codeValue;
				}

				if (categoryCode.equals("StorePhone"))
				{
					storePhone=codeValue;
				}				
				
			}
			rs.close();

			query="select DATE_FORMAT(a.order_date,'%d/%m/%y %r'), a.total_items, a.total_taken, a.total_value, " +
					"a.total_value_mrp, a.enterd_by,a.total_value_discount, " + 
					"b.rate, b.qty, b.price, b.mrp, b.item_discount, b.remark,e.payment_type_desc, b.item_taken, " + 
				  	"d.item_name, d.item_weight, " +
				  	"c.custcode,c.custname,c.building,c.block,c.wing,c.add1,c.add2,c.phone, c.area " +
					"from orders a, order_detail b, customer_master c, item_master d ,payment_type e " +
					"where a.order_num = b.order_num " +
					"and a.custcode = c.custcode " +
					"and b.item_code = d.item_code " +
					"and a.payment_type_code = e.payment_type_code "+
					"and a.order_num = '" + orderNo + "' "+
					"order by b.entry_no";
					
										
				rs=stat.executeQuery(query);		
				int ctr = 0, j=0, itemCount=0;
				
			while(rs.next()) {
			    
				i=1;
				itemCount=itemCount+1;
				pageItemCount=pageItemCount+1;		
				
				orderDate=rs.getString(i++);
				totalItems=rs.getInt(i++);
				totalTaken=rs.getInt(i++);
				totalValue=rs.getFloat(i++);
				totalValueMRP=rs.getFloat(i++);
				enteredBy=rs.getString(i++);
				totalValueDis=rs.getFloat(i++);
				
				itemRate=rs.getFloat(i++);
				itemQty=rs.getFloat(i);
				itemQtyCheck=rs.getInt(i++);
					
				itemTotPrice=rs.getFloat(i++);
				itemMRP=rs.getFloat(i++);
				itemTotDis=rs.getFloat(i++);
				disRemark=rs.getString(i++);
				
				p_type=rs.getString(i++);
				taken_ind=rs.getInt(i++);
				
				itemName=rs.getString(i++);
				itemWeight=rs.getString(i++);
				custCode=rs.getString(i++);
				custName=rs.getString(i++);
				building=rs.getString(i++);
				block=rs.getString(i++);
				wing=rs.getString(i++);
				add1=rs.getString(i++);
				add2=rs.getString(i++);
				phone=rs.getString(i++);
				area=rs.getString(i++);
				
					
	if (ctr==0) {			
	%>
	<table class='boldtable' width=710 cellpadding='0' cellspacing='4' border='0'>		
	<tr><td colspan=6>&nbsp;</td></tr>
    <tr><td colspan=6>&nbsp;</td></tr>
	<tr><td colspan=2 align='right'><%=totalItems%>-<%=totalTaken%>=<%=totalItems - totalTaken%></td><td colspan=4>&nbsp;</td></tr>
	<tr><td colspan=6>&nbsp;</td></tr>
		
	<tr>
		<td width='15%' colspan=2 align='center'><%=custCode%></td>
		<td width='60%' colspan=2 align='center'><%=custName%></td>
		<td width='25%' colspan=2 align='right'><%=orderDate%></td>
	</tr>
	
	<tr>
		<td colspan=5 width='80%'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<%=add1%> ,<%=add2%></td>
		<td colspan=1 width='20%' align='right'><%=phone%></td>
	</tr>
	
	<tr>
		<td colspan=5 width='80%'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<%=building%>, <%=block%>, <%=wing%>,<%=area%> </td>
		<td colspan=1 width='20%' align='right'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
	</tr>
	
	<tr><td colspan=6>&nbsp;</td></tr>
	
	</table>
<% ctr = ctr + 1; 
	} 
	savings = totalValueMRP - totalValue;
	if(savings<0)
		savings=0.0f;
	
	%>
	<table class='boldtable1' width=710 cellpadding='0' cellspacing='3' border='0'>

<tr>
	<td width='9%' valign=top><%=itemWeight%></td>
	<% if ((itemQtyCheck-itemQty)==0)
	{ %>
	<td width='6%' valign=top><%=dfQty1.format(itemQty)%></td>
	<% } else { %>
	<td width='6%' valign=top><%=dfQty.format(itemQty)%></td>
	<% } %>
	
	<td width='59%' valign=top><%=itemName%>&nbsp;<%=disRemark%></td>
	<% if(taken_ind > 0) { %>
		<td width='10%' valign=top>Taken</td>
	<% } else { %>
	<td width='10%' valign=top>&nbsp;</td>
	<%}%>
	<td width='8%' valign=top align=right><font size="3pt"><b><%=df.format(itemTotPrice)%></b></font></td>
	<% if(itemMRP<=0) { %>
	<td width='8%' valign=top align=right>NA</td>
	<% } else { %>
	<td width='8%' valign=top align=right><%=df.format(itemMRP)%></td>
	<%}%>
</tr>
</table>
<% 

if ((pageItemCount == itemsPerPage)&&(itemCount != totalItems)) 
{ 
	pageItemCount = 0;%>
<table class='boldtable1' width=710 cellpadding='0' cellspacing='0' border='0'>	
	<tr><td colspan=6 align=right>Contd..</td></tr>
	<tr><td colspan=6><p style="page-break-after:always;">&nbsp;</p></td></tr>
</table>
	
<table class='boldtable' width=710 cellpadding='0' cellspacing='4' border='0'>		
	<tr><td colspan=6>&nbsp;</td></tr>
	<tr><td colspan=6>&nbsp;</td></tr>
	<tr><td colspan=6>&nbsp;</td></tr>
	<tr><td colspan=6>&nbsp;</td></tr>
	<tr><td colspan=6>&nbsp;</td></tr>
	<tr><td colspan=6>&nbsp;</td></tr>
</table>
 <%
}
if (itemCount==totalItems) {
	emptyLines = itemsPerPage - (totalItems%itemsPerPage);
	
	if (emptyLines > 0) { 
	while ((emptyLines > 0)&&(emptyLines !=itemsPerPage)) { %>
	<table class='boldtable1' width=710 cellpadding='0' cellspacing='3' border='0'> 
	<tr><td colspan=6>&nbsp;</td></tr>
</table>
<% emptyLines=(emptyLines - 1);} }%>
<table class='boldtable1' width=710 cellpadding='0' cellspacing='0' border='0'>	
<tr>
	<td colspan=5 width='92%' align='right'><font size="3pt"><b><%=df.format(totalValue)%></b></font></td>
	<td colSpan=1 width='8%'  align='right'>(<%=p_type%>)</td>	
</tr>
<tr><td colspan=6 align='center'><%= df.format(savings)%></td></tr>
<tr><td colspan=6 align='center'><%=billMessage%></td></tr>
</table>

<%} }
		rs.close();
		stat.close();
		conn.close();
	}catch(Exception e)
	{
		System.out.println(e);
		rs.close();
		stat.close();
		conn.close();
	}

%>
<input type="hidden" name="horderNo" value="">
</form>

<script>
function Fun_Print(){    
     self.print();
     back();
}
function back(){
	var backPage="";
	
	backPage ="<%=request.getParameter("backPage")%>";
	if(backPage != "create_newCustomer.jsp"){ window.location=backPage;}
	else {
		
		window.close();
	}
	
}

window.onload = function(){
		Fun_Print();

}	
</script>
</body>
</html>



----------------------------------------
