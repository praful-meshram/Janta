/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.42
 * Generated at: 2014-03-12 05:03:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.tutorialspoint.DataBean;
import com.tutorialspoint.DataBeanList;
import net.sf.jasperreports.engine.JRException;
import com.tutorialspoint.CreateReport;
import java.util.Vector;
import outputbean.PurchaseInventoryJasperBean;
import net.sf.jasperreports.engine.JRDataSourceProvider;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import javax.naming.InitialContext;
import javax.naming.Context;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.design.JasperDesign;
import java.util.HashMap;
import java.util.Map;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import beans.jqxgridFormat;
import com.google.gson.Gson;
import beans.JsonOutputBean;
import outputbean.ItemPurchaseInventoryBean;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import inventory.PurchaseInventoryDetail;

public final class InventoryPurchaseAjaxResponse_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	String ajaxCall = request.getParameter("ajaxCall");
	System.out.println("in if 11 "+ajaxCall);
	if(ajaxCall.equals("vendorList")){
		System.out.println("in if 122 ");
		PurchaseInventoryDetail purchaseInventoryDetail = new PurchaseInventoryDetail();
		Hashtable<Integer, String> vendorList = purchaseInventoryDetail.getVendorList();
		System.out.println("hash size  "+vendorList.size());
		
      out.write("\n");
      out.write("\t\t<select id='vendorNameList'>\n");
      out.write("\t\t\t<option value=\"\">All</option>\n");
      out.write("\t\t\t");

			
				Enumeration keys = vendorList.keys();
				
				while(keys.hasMoreElements()){
					Integer key = (Integer)keys.nextElement();
					String vendorName = vendorList.get(key); 
					
      out.write("\n");
      out.write("\t\t\t\t\t<option value=\"");
      out.print(key);
      out.write('"');
      out.write('>');
      out.print(vendorName);
      out.write("</option>\n");
      out.write("\t\t\t\t\t");

				}
			
      out.write("\n");
      out.write("\t\t</select>\n");
      out.write("\t\t");

		
	}else if(ajaxCall.equals("purchaseDetails")){
	
	String fromDate = request.getParameter("fromDate");
	String toDate = request.getParameter("toDate");
	String vendorID = request.getParameter("vendorId");
	
	PurchaseInventoryDetail purchaseInventoryDetail = new PurchaseInventoryDetail();
	//Vector listOutPutBean  = purchaseInventoryDetail.getPurchaseInventoryDetailsIReportDataSource(vendorID, fromDate, toDate);
	//ArrayList<ItemPurchaseInventoryBean> listOutPutBean  = purchaseInventoryDetail.getPurchaseInventoryDetailsIReportDataSource()(vendorID, fromDate, toDate);
	ArrayList<PurchaseInventoryJasperBean> listOutPutBean = purchaseInventoryDetail.
			getPurchaseInventoryDetails(vendorID, fromDate, toDate);
	
	Context envContext = (Context) new InitialContext().lookup("java:comp/env");
	String pathForReport= (String) envContext.lookup("jasper");
	pathForReport=session.getServletContext().getRealPath(pathForReport);
	System.out.println("pathForReport1111 "+pathForReport);
	
    String masterReportFileName = pathForReport+System.getProperty("file.separator")+"PurchaseInventoryMasterReport.jrxml";
    String subReportFileName = pathForReport+System.getProperty("file.separator")+"PurchaseInventorySubReportNew.jrxml";
    
    String destFileName = pathForReport+System.getProperty("file.separator")+"jasper_report_template.JRprint";
   
    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(listOutPutBean);
	System.out.println("before try ..\n"+masterReportFileName+"\n"+subReportFileName);
    try {
       /* Compile the master and sub report */
       JasperReport jasperMasterReport = JasperCompileManager
          .compileReport(masterReportFileName);
       JasperReport jasperSubReport = JasperCompileManager
          .compileReport(subReportFileName);
       
       Map<String, Object> parameters = new HashMap<String, Object>();
       parameters.put("subReportPath", pathForReport+"/");
       System.out.println(" in try ");
       JasperPrint jasperPrint = JasperFillManager.fillReport(jasperMasterReport, parameters, beanColDataSource);
       System.out.println(" in try 1");
       JasperExportManager.exportReportToPdfFile(jasperPrint,pathForReport+System.getProperty("file.separator")+"Demo.pdf");
       System.out.println(" in try11 ");
    } catch (JRException e) {
  		     e.printStackTrace();
    }

 
      out.write("\n");
      out.write(" \t<iframe src=\"");
      out.print("Report/SubReport/Demo.pdf");
      out.write("\" width=\"100%\" height=\"430px;\"></iframe>\n");
      out.write(" \t");
      out.write('\n');
      out.write(' ');
      out.write('	');
      out.write('\n');
      out.write(' ');

 System.out.println("Done filling!!! ...");
 	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
